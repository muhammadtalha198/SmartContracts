{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "OnlyOwnerError",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ReentrancyError",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "treasuryBallance",
						"type": "uint256"
					}
				],
				"name": "insuficentTrasuryBalance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "invalidAmount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "invalidFee",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "addressLength",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "idsLength",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountsLength",
						"type": "uint256"
					}
				],
				"name": "lengthDontMatch",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "nodExist",
						"type": "bool"
					}
				],
				"name": "nodeNotExist",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "transfered",
						"type": "bool"
					}
				],
				"name": "withdrawFailed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "addressLength",
						"type": "uint256"
					}
				],
				"name": "wrongAddressLength",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountsLength",
						"type": "uint256"
					}
				],
				"name": "wrongAmountsLength",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "idsLength",
						"type": "uint256"
					}
				],
				"name": "wrongIdsLength",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "nodeId",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "userAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stakedAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalStakedAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "tokenStaked",
						"type": "bool"
					}
				],
				"name": "StakeEvent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_nodeId",
						"type": "string"
					}
				],
				"name": "addNode",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "checkTreasuryBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_nodeId",
						"type": "string"
					}
				],
				"name": "deleteNode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_userAddresses",
						"type": "address[]"
					},
					{
						"internalType": "string[]",
						"name": "_nodeIds",
						"type": "string[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_stakedAmounts",
						"type": "uint256[]"
					}
				],
				"name": "feedNodeRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "fillTreasury",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					}
				],
				"name": "getNodeIds",
				"outputs": [
					{
						"internalType": "string[]",
						"name": "",
						"type": "string[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_nodeId",
						"type": "string"
					}
				],
				"name": "getStakeAmountOfNode",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_nodeId",
						"type": "string"
					}
				],
				"name": "nodeExists",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					}
				],
				"name": "totalStakedOfUser",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalStakedStorCoins",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addNode(string)": {
					"details": "Adds a new node and stakes tokens to it.",
					"params": {
						"_nodeId": "The ID of the node to be added."
					}
				},
				"checkTreasuryBalance()": {
					"details": "Checks the contract's current treasury balance."
				},
				"deleteNode(string)": {
					"details": "Deletes an existing node and unstakes the associated tokens.",
					"params": {
						"_nodeId": "The ID of the node to be deleted."
					}
				},
				"feedNodeRecord(address[],string[],uint256[])": {
					"details": "Feeds old contract data into the new contract.",
					"params": {
						"_nodeIds": "Array of node IDs corresponding to users.",
						"_stakedAmounts": "Array of staked amounts corresponding to each node.",
						"_userAddresses": "Array of user addresses."
					}
				},
				"fillTreasury()": {
					"details": "Fills the contract treasury with funds."
				},
				"getNodeIds(address)": {
					"details": "Retrieves all node IDs associated with a specific user.",
					"params": {
						"_userAddress": "The address of the user."
					},
					"returns": {
						"_0": "An array of node IDs owned by the user."
					}
				},
				"getStakeAmountOfNode(address,string)": {
					"details": "Gets the staked amount for a specific node owned by a user.",
					"params": {
						"_nodeId": "The ID of the node.",
						"_userAddress": "The address of the user."
					},
					"returns": {
						"_0": "The staked amount for the given node."
					}
				},
				"nodeExists(address,string)": {
					"details": "Checks if a specific node exists for a given user.",
					"params": {
						"_nodeId": "The ID of the node to check.",
						"_userAddress": "The address of the user."
					},
					"returns": {
						"_0": "A boolean indicating if the node exists and is alive."
					}
				},
				"totalStakedOfUser(address)": {
					"details": "Gets the total staked amount for a specific user.",
					"params": {
						"_userAddress": "The address of the user."
					},
					"returns": {
						"_0": "The total staked amount by the user."
					}
				},
				"totalStakedStorCoins()": {
					"details": "Gets the total staked tokens across all users. Only the owner can view this value.",
					"returns": {
						"_0": "The total staked tokens in the contract."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"EthTesting.sol/storageChain.sol": "StakingContract"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"EthTesting.sol/storageChain.sol": {
			"keccak256": "0x4521adbafe44b2c1afeafff2ac368de0ff48105a0326acb8e28108410ad1adda",
			"license": "MIT",
			"urls": [
				"bzz-raw://4bcd342b851d6e76c138b70664b2dba611274d9d0c78bb666801b3f4d77efbfc",
				"dweb:/ipfs/QmahL6uvB9ZMhNJMHqDkqMSNMevUDtcX89NnsSuuDogEt9"
			]
		}
	},
	"version": 1
}