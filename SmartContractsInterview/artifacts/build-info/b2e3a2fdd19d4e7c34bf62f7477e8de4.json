{
	"id": "b2e3a2fdd19d4e7c34bf62f7477e8de4",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"SmartContractsInterview/MerkleDistribution.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ncontract MerkleDistributor is Pausable, Ownable, ReentrancyGuard {\n    bytes32 public merkleRoot;\n\n    address public token;\n    address public treasury;\n\n    bool public isClaiming;\n    uint256 public startClaimingRound;\n    uint256 public claimingRoundDuration;\n\n    mapping(address => bool) public claimed;\n\n    event Claimed(address indexed account, uint256 amount);\n\n    modifier onlyClaimingRound() {\n        require(\n            isClaiming && (block.timestamp >= startClaimingRound &&\n                block.timestamp <= startClaimingRound + claimingRoundDuration),\n            \"It is no period to claim!\"\n        );\n        _;\n    }\n\n    constructor(address _owner, address _treasury) Ownable(msg.sender) {\n        treasury = _treasury;\n        claimingRoundDuration = 86400 * 7; // 7 days\n        isClaiming = false;\n        transferOwnership(_owner);\n        pause();\n    }\n\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\n        merkleRoot = _merkleRoot;\n    }\n\n    function setToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Token shouldn't be zero\");\n        token = _token;\n    }\n\n    function setStartClaimingRound() external onlyOwner {\n        isClaiming = true;\n        startClaimingRound = block.timestamp;\n    }\n\n    function endClaimingRound() external onlyOwner {\n        isClaiming = false;\n        startClaimingRound = 0;\n    }\n\n    function setClaimingRoundDuration(uint256 _duration) external onlyOwner {\n        claimingRoundDuration = _duration;\n    }\n\n    function verifyUser(\n        address _user,\n        uint256 _amount,\n        bytes32[] calldata _merkleProof\n    ) external view returns (bool) {\n        bytes32 node = keccak256(abi.encodePacked(_user, _amount));\n        return MerkleProof.verify(_merkleProof, merkleRoot, node);\n    }\n\n    function claim(\n        uint256 _amount,\n        bytes32[] calldata _merkleProof\n    ) external whenNotPaused nonReentrant onlyClaimingRound {\n        \n        require(!claimed[msg.sender], \"Already claimed\");\n\n        // Verify the merkle proof\n        bytes32 node = keccak256(abi.encodePacked(msg.sender, _amount));\n        require(\n            MerkleProof.verify(_merkleProof, merkleRoot, node),\n            \"Invalid proof\"\n        );\n\n        require(token != address(0), \"Token address shouldn't be zero!\");\n\n        // Claim Tokens\n        require(\n            IERC20(token).balanceOf(address(this)) > _amount,\n            \"Insufficient Balance!\"\n        );\n        if (_amount > 0) {\n            IERC20(token).transfer(msg.sender, _amount);\n        }\n\n        // Mark it claimed and transfer the token\n        claimed[msg.sender] = true;\n\n        emit Claimed(msg.sender, _amount);\n    }\n\n    function unClaimedTokenToTreasury() external onlyOwner {\n        IERC20 tokenERC20 = IERC20(token);\n        uint256 balance = tokenERC20.balanceOf(address(this));\n        tokenERC20.transfer(treasury, balance);\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function checkClaimingRound() external view returns (bool) {\n        return\n            isClaiming && ((startClaimingRound + claimingRoundDuration) >= block.timestamp) &&\n            (block.timestamp >= startClaimingRound);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Sorts the pair (a, b) and hashes the result.\n     */\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/Pausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/Pausable.sol": {
				"Pausable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract in unpaused state."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ddabb16009cd17eaca3143feadf450ac13e72919ebe2ca50e00f61cb78bc004\",\"dweb:/ipfs/QmSPwPxX7d6TTWakN5jy5wsaGkS1y9TW8fuhGSraMkLk2B\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 165,
								"contract": "@openzeppelin/contracts/security/Pausable.sol:Pausable",
								"label": "_paused",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 266,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"MerkleProof": {
					"abi": [
						{
							"inputs": [],
							"name": "MerkleProofInvalidMultiproof",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box.",
						"errors": {
							"MerkleProofInvalidMultiproof()": [
								{
									"details": "The multiproof provided is not valid."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":803:9759  library MerkleProof {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":803:9759  library MerkleProof {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220bbd4f90f5757a3bd80f12c4c1f38c40c41ff408579ea341beb50408defabc3b764736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220bbd4f90f5757a3bd80f12c4c1f38c40c41ff408579ea341beb50408defabc3b764736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xD4 0xF9 0xF JUMPI JUMPI LOG3 0xBD DUP1 CALL 0x2C 0x4C 0x1F CODESIZE 0xC4 0xC COINBASE SELFDESTRUCT BLOCKHASH DUP6 PUSH26 0xEA341BEB50408DEFABC3B764736F6C634300081A003300000000 ",
							"sourceMap": "803:8956:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;803:8956:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220bbd4f90f5757a3bd80f12c4c1f38c40c41ff408579ea341beb50408defabc3b764736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xD4 0xF9 0xF JUMPI JUMPI LOG3 0xBD DUP1 CALL 0x2C 0x4C 0x1F CODESIZE 0xC4 0xC COINBASE SELFDESTRUCT BLOCKHASH DUP6 PUSH26 0xEA341BEB50408DEFABC3B764736F6C634300081A003300000000 ",
							"sourceMap": "803:8956:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"_efficientHash(bytes32,bytes32)": "infinite",
								"_hashPair(bytes32,bytes32)": "infinite",
								"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)": "infinite",
								"multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)": "infinite",
								"processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)": "infinite",
								"processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)": "infinite",
								"processProof(bytes32[] memory,bytes32)": "infinite",
								"processProofCalldata(bytes32[] calldata,bytes32)": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32)": "infinite",
								"verifyCalldata(bytes32[] calldata,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 803,
									"end": 9759,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bbd4f90f5757a3bd80f12c4c1f38c40c41ff408579ea341beb50408defabc3b764736f6c634300081a0033",
									".code": [
										{
											"begin": 803,
											"end": 9759,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 803,
											"end": 9759,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 803,
											"end": 9759,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 803,
											"end": 9759,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 803,
											"end": 9759,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 803,
											"end": 9759,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 803,
											"end": 9759,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 803,
											"end": 9759,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 803,
											"end": 9759,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/security/Pausable.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"SmartContractsInterview/MerkleDistribution.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5d3d47d35af4373743a559ea4b9b7ecfe4bab6f0703f410c1e59959b7966ac\",\"dweb:/ipfs/QmTHdoghh4WLu4yURjGEgRk162pcwwdsG52MPGa12GqnGR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"SmartContractsInterview/MerkleDistribution.sol": {
				"MerkleDistributor": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_treasury",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Claimed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "checkClaimingRound",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "_merkleProof",
									"type": "bytes32[]"
								}
							],
							"name": "claim",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "claimed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "claimingRoundDuration",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "endClaimingRound",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isClaiming",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "merkleRoot",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_duration",
									"type": "uint256"
								}
							],
							"name": "setClaimingRoundDuration",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_merkleRoot",
									"type": "bytes32"
								}
							],
							"name": "setMerkleRoot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "setStartClaimingRound",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "setToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startClaimingRound",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "treasury",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unClaimedTokenToTreasury",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "_merkleProof",
									"type": "bytes32[]"
								}
							],
							"name": "verifyUser",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"SmartContractsInterview/MerkleDistribution.sol\":356:3676  contract MerkleDistributor is Pausable, Ownable, ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1001:1238  constructor(address _owner, address _treasury) Ownable(msg.sender) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":1006:1011  false */\n  0x00\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":996:1011  _paused = false */\n  dup1\n  sload\n  not(0xff)\n  and\n  swap1\n  sstore\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1056:1066  msg.sender */\n  caller\n  dup1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_10\n  jumpi\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0x1e4fbdf7)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1350:1351  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":640:691   */\n  mstore\n    /* \"#utility.yul\":613:631   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\ntag_11:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  tag_13\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1392:1404  initialOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1391  _transferOwnership */\n  tag_14\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  jump\t// in\ntag_13:\n  pop\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1821:1843  _status = _NOT_ENTERED */\n  dup1\n  sstore\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1078:1086  treasury */\n  0x04\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1078:1098  treasury = _treasury */\n  dup1\n  sload\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1132:1141  86400 * 7 */\n  0x093a80\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1108:1129  claimingRoundDuration */\n  0x06\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1108:1141  claimingRoundDuration = 86400 * 7 */\n  sstore\n  not(sub(shl(0xa8, 0x01), 0x01))\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1161:1179  isClaiming = false */\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1078:1098  treasury = _treasury */\n  dup4\n  and\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1161:1179  isClaiming = false */\n  or\n  swap1\n  sstore\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1189:1214  transferOwnership(_owner) */\n  tag_17\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1207:1213  _owner */\n  dup3\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1189:1206  transferOwnership */\n  tag_18\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1189:1214  transferOwnership(_owner) */\n  jump\t// in\ntag_17:\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1224:1231  pause() */\n  tag_19\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1224:1229  pause */\n  tag_20\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1224:1231  pause() */\n  jump\t// in\ntag_19:\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":1001:1238  constructor(address _owner, address _treasury) Ownable(msg.sender) {... */\n  pop\n  pop\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":356:3676  contract MerkleDistributor is Pausable, Ownable, ReentrancyGuard {... */\n  jump(tag_59)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\ntag_14:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  dup4\n  dup2\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  0x0100\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  dup2\n  dup2\n  mul\n  not(sub(shl(0xa8, 0x01), 0x0100))\n  dup6\n  and\n  or\n  dup6\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  swap4\n  div\n  swap2\n  swap1\n  swap2\n  and\n  swap3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  swap1\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\ntag_18:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n  tag_24\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n  tag_25\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n  jump\t// in\ntag_24:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n  dup2\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n  tag_27\n  jumpi\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0x1e4fbdf7)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2700:2701  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":640:691   */\n  mstore\n    /* \"#utility.yul\":613:631   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n  tag_11\n    /* \"#utility.yul\":494:697   */\n  jump\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\ntag_27:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n  tag_29\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2742:2750  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2741  _transferOwnership */\n  tag_14\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n  jump\t// in\ntag_29:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n  pop\n  jump\t// out\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":3311:3370  function pause() public onlyOwner {... */\ntag_20:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n  tag_31\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n  tag_25\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n  jump\t// in\ntag_31:\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":3355:3363  _pause() */\n  tag_33\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":3355:3361  _pause */\n  tag_34\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":3355:3363  _pause() */\n  jump\t// in\ntag_33:\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":3311:3370  function pause() public onlyOwner {... */\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\ntag_25:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1684:1691  address */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  0x0100\n  swap1\n  swap2\n  div\n  and\n    /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n  eq\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n  tag_33\n  jumpi\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n  mload(0x40)\n  shl(0xe0, 0x118cdaa7)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":640:691   */\n  mstore\n    /* \"#utility.yul\":613:631   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n  tag_11\n    /* \"#utility.yul\":494:697   */\n  jump\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":2186:2301  function _pause() internal virtual whenNotPaused {... */\ntag_34:\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":1239:1258  _requireNotPaused() */\n  tag_44\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":1239:1256  _requireNotPaused */\n  tag_45\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":1239:1258  _requireNotPaused() */\n  jump\t// in\ntag_44:\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":2245:2252  _paused */\n  0x00\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":2245:2259  _paused = true */\n  dup1\n  sload\n  not(0xff)\n  and\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":2255:2259  true */\n  0x01\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":2245:2259  _paused = true */\n  or\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":2274:2294  Paused(_msgSender()) */\n  0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":2281:2293  _msgSender() */\n  tag_47\n    /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n  caller\n  swap1\n    /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n  jump\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":2281:2293  _msgSender() */\ntag_47:\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":2274:2294  Paused(_msgSender()) */\n  mload(0x40)\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":658:690   */\n  swap1\n  swap2\n  and\n    /* \"#utility.yul\":640:691   */\n  dup2\n  mstore\n    /* \"#utility.yul\":628:630   */\n  0x20\n    /* \"#utility.yul\":613:631   */\n  add\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":2274:2294  Paused(_msgSender()) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log1\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":2186:2301  function _pause() internal virtual whenNotPaused {... */\n  jump\t// out\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":1767:1873  function _requireNotPaused() internal view virtual {... */\ntag_45:\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":1662:1666  bool */\n  0x00\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":1685:1692  _paused */\n  sload\n  0xff\n  and\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":1836:1845  !paused() */\n  iszero\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":1828:1866  require(!paused(), \"Pausable: paused\") */\n  tag_33\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":904:906   */\n  0x20\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":1828:1866  require(!paused(), \"Pausable: paused\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":886:907   */\n  mstore\n    /* \"#utility.yul\":943:945   */\n  0x10\n    /* \"#utility.yul\":923:941   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":916:946   */\n  mstore\n  shl(0x82, 0x14185d5cd8589b194e881c185d5cd959)\n    /* \"#utility.yul\":962:980   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":955:1001   */\n  mstore\n    /* \"#utility.yul\":1018:1036   */\n  0x64\n  add\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":1828:1866  require(!paused(), \"Pausable: paused\") */\n  tag_11\n    /* \"#utility.yul\":702:1042   */\n  jump\n    /* \"#utility.yul\":14:191   */\ntag_58:\n    /* \"#utility.yul\":93:106   */\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":135:166   */\n  dup2\n  and\n    /* \"#utility.yul\":125:167   */\n  dup2\n  eq\n    /* \"#utility.yul\":115:185   */\n  tag_61\n  jumpi\n    /* \"#utility.yul\":181:182   */\n  0x00\n    /* \"#utility.yul\":178:179   */\n  dup1\n    /* \"#utility.yul\":171:183   */\n  revert\n    /* \"#utility.yul\":115:185   */\ntag_61:\n    /* \"#utility.yul\":14:191   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":196:489   */\ntag_3:\n    /* \"#utility.yul\":275:281   */\n  0x00\n    /* \"#utility.yul\":283:289   */\n  dup1\n    /* \"#utility.yul\":336:338   */\n  0x40\n    /* \"#utility.yul\":324:333   */\n  dup4\n    /* \"#utility.yul\":315:322   */\n  dup6\n    /* \"#utility.yul\":311:334   */\n  sub\n    /* \"#utility.yul\":307:339   */\n  slt\n    /* \"#utility.yul\":304:356   */\n  iszero\n  tag_63\n  jumpi\n    /* \"#utility.yul\":352:353   */\n  0x00\n    /* \"#utility.yul\":349:350   */\n  dup1\n    /* \"#utility.yul\":342:354   */\n  revert\n    /* \"#utility.yul\":304:356   */\ntag_63:\n    /* \"#utility.yul\":375:415   */\n  tag_64\n    /* \"#utility.yul\":405:414   */\n  dup4\n    /* \"#utility.yul\":375:415   */\n  tag_58\n  jump\t// in\ntag_64:\n    /* \"#utility.yul\":365:415   */\n  swap2\n  pop\n    /* \"#utility.yul\":434:483   */\n  tag_65\n    /* \"#utility.yul\":479:481   */\n  0x20\n    /* \"#utility.yul\":468:477   */\n  dup5\n    /* \"#utility.yul\":464:482   */\n  add\n    /* \"#utility.yul\":434:483   */\n  tag_58\n  jump\t// in\ntag_65:\n    /* \"#utility.yul\":424:483   */\n  swap1\n  pop\n    /* \"#utility.yul\":196:489   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":702:1042   */\ntag_59:\n    /* \"SmartContractsInterview/MerkleDistribution.sol\":356:3676  contract MerkleDistributor is Pausable, Ownable, ReentrancyGuard {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":356:3676  contract MerkleDistributor is Pausable, Ownable, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x7cb64759\n      gt\n      tag_25\n      jumpi\n      dup1\n      0xb6cd5d1a\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xb6cd5d1a\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xc27f7e26\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xc884ef83\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xde805da7\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xfc0c546a\n      eq\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      dup1\n      0x7cb64759\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x7cc6cb7a\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x8456cb59\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xa0074c67\n      eq\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      dup1\n      0x49039527\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x49039527\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x5c975abb\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x5e4f3a9c\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x6038efad\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x61d027b3\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup1\n      0x144fa6d7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2eb4a7ab\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2f52ebb7\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x3f4ba83a\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x428e7565\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1354:1504  function setToken(address _token) external onlyOwner {... */\n    tag_3:\n      tag_28\n      tag_29\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      stop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":427:452  bytes32 public merkleRoot */\n    tag_4:\n      tag_32\n      sload(0x02)\n      dup2\n      jump\n    tag_32:\n      mload(0x40)\n        /* \"#utility.yul\":529:554   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":517:519   */\n      0x20\n        /* \"#utility.yul\":502:520   */\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":427:452  bytes32 public merkleRoot */\n    tag_34:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2188:3083  function claim(... */\n    tag_5:\n      tag_28\n      tag_37\n      calldatasize\n      0x04\n      tag_38\n      jump\t// in\n    tag_37:\n      tag_39\n      jump\t// in\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3376:3439  function unpause() public onlyOwner {... */\n    tag_6:\n      tag_28\n      tag_41\n      jump\t// in\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":543:576  uint256 public startClaimingRound */\n    tag_7:\n      tag_32\n      sload(0x05)\n      dup2\n      jump\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":582:618  uint256 public claimingRoundDuration */\n    tag_8:\n      tag_32\n      sload(0x06)\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1615:1699  function paused() public view virtual returns (bool) {... */\n    tag_9:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1662:1666  bool */\n      0x00\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1685:1692  _paused */\n      sload\n      0xff\n      and\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1615:1699  function paused() public view virtual returns (bool) {... */\n    tag_49:\n      mload(0x40)\n        /* \"#utility.yul\":1840:1854   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1833:1855   */\n      iszero\n        /* \"#utility.yul\":1815:1856   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1803:1805   */\n      0x20\n        /* \"#utility.yul\":1788:1806   */\n      add\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1615:1699  function paused() public view virtual returns (bool) {... */\n      tag_34\n        /* \"#utility.yul\":1675:1862   */\n      jump\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1648:1762  function endClaimingRound() external onlyOwner {... */\n    tag_10:\n      tag_28\n      tag_54\n      jump\t// in\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1768:1890  function setClaimingRoundDuration(uint256 _duration) external onlyOwner {... */\n    tag_11:\n      tag_28\n      tag_56\n      calldatasize\n      0x04\n      tag_57\n      jump\t// in\n    tag_56:\n      tag_58\n      jump\t// in\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":485:508  address public treasury */\n    tag_12:\n      sload(0x04)\n      tag_59\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_59:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2262:2294   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2244:2295   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2232:2234   */\n      0x20\n        /* \"#utility.yul\":2217:2235   */\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":485:508  address public treasury */\n      tag_34\n        /* \"#utility.yul\":2098:2301   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_13:\n      tag_28\n      tag_64\n      jump\t// in\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1244:1348  function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {... */\n    tag_14:\n      tag_28\n      tag_66\n      calldatasize\n      0x04\n      tag_57\n      jump\t// in\n    tag_66:\n      tag_68\n      jump\t// in\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":515:537  bool public isClaiming */\n    tag_15:\n      sload(0x04)\n      tag_49\n      swap1\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3311:3370  function pause() public onlyOwner {... */\n    tag_16:\n      tag_28\n      tag_73\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_17:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      jump(tag_59)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1896:2182  function verifyUser(... */\n    tag_18:\n      tag_49\n      tag_78\n      calldatasize\n      0x04\n      tag_79\n      jump\t// in\n    tag_78:\n      tag_80\n      jump\t// in\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1510:1642  function setStartClaimingRound() external onlyOwner {... */\n    tag_19:\n      tag_28\n      tag_83\n      jump\t// in\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3445:3674  function checkClaimingRound() external view returns (bool) {... */\n    tag_20:\n      tag_49\n      tag_85\n      jump\t// in\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":625:664  mapping(address => bool) public claimed */\n    tag_21:\n      tag_49\n      tag_88\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_88:\n      mstore(0x20, 0x07)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3089:3305  function unClaimedTokenToTreasury() external onlyOwner {... */\n    tag_22:\n      tag_28\n      tag_92\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_23:\n      tag_28\n      tag_94\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_94:\n      tag_95\n      jump\t// in\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":459:479  address public token */\n    tag_24:\n      sload(0x03)\n      tag_59\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1354:1504  function setToken(address _token) external onlyOwner {... */\n    tag_31:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_100\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_101\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_100:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1425:1445  _token != address(0) */\n      dup2\n      and\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1417:1473  require(_token != address(0), \"Token shouldn't be zero\") */\n      tag_103\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3323:3325   */\n      0x20\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1417:1473  require(_token != address(0), \"Token shouldn't be zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3305:3326   */\n      mstore\n        /* \"#utility.yul\":3362:3364   */\n      0x17\n        /* \"#utility.yul\":3342:3360   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3335:3365   */\n      mstore\n        /* \"#utility.yul\":3401:3426   */\n      0x546f6b656e2073686f756c646e2774206265207a65726f000000000000000000\n        /* \"#utility.yul\":3381:3399   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3374:3427   */\n      mstore\n        /* \"#utility.yul\":3444:3462   */\n      0x64\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1417:1473  require(_token != address(0), \"Token shouldn't be zero\") */\n    tag_104:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_103:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1483:1488  token */\n      0x03\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1483:1497  token = _token */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1354:1504  function setToken(address _token) external onlyOwner {... */\n      jump\t// out\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2188:3083  function claim(... */\n    tag_39:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1239:1258  _requireNotPaused() */\n      tag_107\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1239:1256  _requireNotPaused */\n      tag_108\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1239:1258  _requireNotPaused() */\n      jump\t// in\n    tag_107:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      tag_110\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2280  _nonReentrantBefore */\n      tag_111\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      jump\t// in\n    tag_110:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":792:802  isClaiming */\n      sload(0x04)\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":792:926  isClaiming && (block.timestamp >= startClaimingRound &&... */\n      dup1\n      iszero\n      tag_114\n      jumpi\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":826:844  startClaimingRound */\n      sload(0x05)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":807:822  block.timestamp */\n      timestamp\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":807:844  block.timestamp >= startClaimingRound */\n      lt\n      iszero\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":807:925  block.timestamp >= startClaimingRound &&... */\n      dup1\n      iszero\n      tag_114\n      jumpi\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":904:925  claimingRoundDuration */\n      sload(0x06)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":883:901  startClaimingRound */\n      sload(0x05)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":883:925  startClaimingRound + claimingRoundDuration */\n      tag_115\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_115:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":864:879  block.timestamp */\n      timestamp\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":864:925  block.timestamp <= startClaimingRound + claimingRoundDuration */\n      gt\n      iszero\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":807:925  block.timestamp >= startClaimingRound &&... */\n    tag_114:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":771:977  require(... */\n      tag_117\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3902:3904   */\n      0x20\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":771:977  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3884:3905   */\n      mstore\n        /* \"#utility.yul\":3941:3943   */\n      0x19\n        /* \"#utility.yul\":3921:3939   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3914:3944   */\n      mstore\n        /* \"#utility.yul\":3980:4007   */\n      0x4974206973206e6f20706572696f6420746f20636c61696d2100000000000000\n        /* \"#utility.yul\":3960:3978   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3953:4008   */\n      mstore\n        /* \"#utility.yul\":4025:4043   */\n      0x64\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":771:977  require(... */\n      tag_104\n        /* \"#utility.yul\":3700:4049   */\n      jump\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":771:977  require(... */\n    tag_117:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2365:2375  msg.sender */\n      caller\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2357:2376  claimed[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2357:2364  claimed */\n      0x07\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2357:2376  claimed[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2356:2376  !claimed[msg.sender] */\n      iszero\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2348:2396  require(!claimed[msg.sender], \"Already claimed\") */\n      tag_121\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4256:4258   */\n      0x20\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2348:2396  require(!claimed[msg.sender], \"Already claimed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4238:4259   */\n      mstore\n        /* \"#utility.yul\":4295:4297   */\n      0x0f\n        /* \"#utility.yul\":4275:4293   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4268:4298   */\n      mstore\n      shl(0x8a, 0x105b1c9958591e4818db185a5b5959)\n        /* \"#utility.yul\":4314:4332   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4307:4352   */\n      mstore\n        /* \"#utility.yul\":4369:4387   */\n      0x64\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2348:2396  require(!claimed[msg.sender], \"Already claimed\") */\n      tag_104\n        /* \"#utility.yul\":4054:4393   */\n      jump\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2348:2396  require(!claimed[msg.sender], \"Already claimed\") */\n    tag_121:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2467:2504  abi.encodePacked(msg.sender, _amount) */\n      mload(0x40)\n      not(0xffffffffffffffffffffffff)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2484:2494  msg.sender */\n      caller\n        /* \"#utility.yul\":4575:4577   */\n      0x60\n        /* \"#utility.yul\":4571:4586   */\n      shl\n        /* \"#utility.yul\":4567:4620   */\n      and\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2467:2504  abi.encodePacked(msg.sender, _amount) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":4555:4621   */\n      mstore\n        /* \"#utility.yul\":4637:4649   */\n      0x34\n      dup2\n      add\n        /* \"#utility.yul\":4630:4658   */\n      dup5\n      swap1\n      mstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2442:2454  bytes32 node */\n      0x00\n      swap1\n        /* \"#utility.yul\":4674:4686   */\n      0x54\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2467:2504  abi.encodePacked(msg.sender, _amount) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2457:2505  keccak256(abi.encodePacked(msg.sender, _amount)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2442:2505  bytes32 node = keccak256(abi.encodePacked(msg.sender, _amount)) */\n      swap1\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2536:2586  MerkleProof.verify(_merkleProof, merkleRoot, node) */\n      tag_126\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2555:2567  _merkleProof */\n      dup4\n      dup4\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2536:2586  MerkleProof.verify(_merkleProof, merkleRoot, node) */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2569:2579  merkleRoot */\n      sload(0x02)\n      swap2\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2581:2585  node */\n      dup5\n      swap1\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2536:2554  MerkleProof.verify */\n      tag_127\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2536:2586  MerkleProof.verify(_merkleProof, merkleRoot, node) */\n      jump\t// in\n    tag_126:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2515:2625  require(... */\n      tag_128\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4899:4901   */\n      0x20\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2515:2625  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4881:4902   */\n      mstore\n        /* \"#utility.yul\":4938:4940   */\n      0x0d\n        /* \"#utility.yul\":4918:4936   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4911:4941   */\n      mstore\n      shl(0x99, 0x24b73b30b634b210383937b7b3)\n        /* \"#utility.yul\":4957:4975   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4950:4993   */\n      mstore\n        /* \"#utility.yul\":5010:5028   */\n      0x64\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2515:2625  require(... */\n      tag_104\n        /* \"#utility.yul\":4697:5034   */\n      jump\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2515:2625  require(... */\n    tag_128:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2644:2649  token */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2636:2700  require(token != address(0), \"Token address shouldn't be zero!\") */\n      tag_131\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5241:5243   */\n      0x20\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2636:2700  require(token != address(0), \"Token address shouldn't be zero!\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5223:5244   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":5260:5278   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5253:5283   */\n      mstore\n        /* \"#utility.yul\":5319:5353   */\n      0x546f6b656e20616464726573732073686f756c646e2774206265207a65726f21\n        /* \"#utility.yul\":5299:5317   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5292:5354   */\n      mstore\n        /* \"#utility.yul\":5371:5389   */\n      0x64\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2636:2700  require(token != address(0), \"Token address shouldn't be zero!\") */\n      tag_104\n        /* \"#utility.yul\":5039:5395   */\n      jump\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2636:2700  require(token != address(0), \"Token address shouldn't be zero!\") */\n    tag_131:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2763:2768  token */\n      sload(0x03)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2756:2794  IERC20(token).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2788:2792  this */\n      address\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2756:2794  IERC20(token).balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2244:2295   */\n      mstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2797:2804  _amount */\n      dup6\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2763:2768  token */\n      and\n      swap1\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2756:2779  IERC20(token).balanceOf */\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":2217:2235   */\n      0x24\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2756:2794  IERC20(token).balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_136\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_136:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_137\n      swap2\n      swap1\n      tag_138\n      jump\t// in\n    tag_137:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2756:2804  IERC20(token).balanceOf(address(this)) > _amount */\n      gt\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2735:2851  require(... */\n      tag_139\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5791:5793   */\n      0x20\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2735:2851  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5773:5794   */\n      mstore\n        /* \"#utility.yul\":5830:5832   */\n      0x15\n        /* \"#utility.yul\":5810:5828   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5803:5833   */\n      mstore\n      shl(0x58, 0x496e73756666696369656e742042616c616e636521)\n        /* \"#utility.yul\":5849:5867   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5842:5893   */\n      mstore\n        /* \"#utility.yul\":5910:5928   */\n      0x64\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2735:2851  require(... */\n      tag_104\n        /* \"#utility.yul\":5589:5934   */\n      jump\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2735:2851  require(... */\n    tag_139:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2865:2876  _amount > 0 */\n      dup4\n      iszero\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2861:2946  if (_amount > 0) {... */\n      tag_142\n      jumpi\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2899:2904  token */\n      sload(0x03)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2892:2935  IERC20(token).transfer(msg.sender, _amount) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2915:2925  msg.sender */\n      caller\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2892:2935  IERC20(token).transfer(msg.sender, _amount) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6113:6164   */\n      mstore\n        /* \"#utility.yul\":6180:6198   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":6173:6207   */\n      dup7\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2899:2904  token */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2892:2914  IERC20(token).transfer */\n      0xa9059cbb\n      swap1\n        /* \"#utility.yul\":6086:6104   */\n      0x44\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2892:2935  IERC20(token).transfer(msg.sender, _amount) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_146\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_146:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_147\n      swap2\n      swap1\n      tag_148\n      jump\t// in\n    tag_147:\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2861:2946  if (_amount > 0) {... */\n    tag_142:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3014:3024  msg.sender */\n      caller\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3006:3025  claimed[msg.sender] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3006:3013  claimed */\n      0x07\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3006:3025  claimed[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3006:3032  claimed[msg.sender] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3028:3032  true */\n      0x01\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3006:3032  claimed[msg.sender] = true */\n      or\n      swap1\n      sstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3048:3076  Claimed(msg.sender, _amount) */\n      mload\n      0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a\n      swap1\n      tag_149\n      swap1\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3068:3075  _amount */\n      dup8\n        /* \"#utility.yul\":529:554   */\n      dup2\n      mstore\n        /* \"#utility.yul\":517:519   */\n      0x20\n        /* \"#utility.yul\":502:520   */\n      add\n      swap1\n        /* \"#utility.yul\":383:560   */\n      jump\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3048:3076  Claimed(msg.sender, _amount) */\n    tag_149:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2329:3083  {... */\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2323  _nonReentrantAfter() */\n      tag_150\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2831  _status = _NOT_ENTERED */\n      dup1\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2629:2838  function _nonReentrantAfter() private {... */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2323  _nonReentrantAfter() */\n    tag_150:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2188:3083  function claim(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3376:3439  function unpause() public onlyOwner {... */\n    tag_41:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_153\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_101\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_153:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3422:3432  _unpause() */\n      tag_155\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3422:3430  _unpause */\n      tag_156\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3422:3432  _unpause() */\n      jump\t// in\n    tag_155:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3376:3439  function unpause() public onlyOwner {... */\n      jump\t// out\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1648:1762  function endClaimingRound() external onlyOwner {... */\n    tag_54:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_159\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_101\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_159:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1705:1715  isClaiming */\n      0x04\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1705:1723  isClaiming = false */\n      dup1\n      sload\n      not(shl(0xa0, 0xff))\n      and\n      swap1\n      sstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1718:1723  false */\n      0x00\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1733:1751  startClaimingRound */\n      0x05\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1733:1755  startClaimingRound = 0 */\n      sstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1648:1762  function endClaimingRound() external onlyOwner {... */\n      jump\t// out\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1768:1890  function setClaimingRoundDuration(uint256 _duration) external onlyOwner {... */\n    tag_58:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_162\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_101\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_162:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1850:1871  claimingRoundDuration */\n      0x06\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1850:1883  claimingRoundDuration = _duration */\n      sstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1768:1890  function setClaimingRoundDuration(uint256 _duration) external onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_64:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_165\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_101\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_165:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      tag_155\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2384:2385  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2375  _transferOwnership */\n      tag_168\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      jump\t// in\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1244:1348  function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {... */\n    tag_68:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_170\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_101\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_170:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1317:1327  merkleRoot */\n      0x02\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1317:1341  merkleRoot = _merkleRoot */\n      sstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1244:1348  function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {... */\n      jump\t// out\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3311:3370  function pause() public onlyOwner {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_173\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_101\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_173:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3355:3363  _pause() */\n      tag_155\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3355:3361  _pause */\n      tag_176\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3355:3363  _pause() */\n      jump\t// in\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1896:2182  function verifyUser(... */\n    tag_80:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2075:2107  abi.encodePacked(_user, _amount) */\n      mload(0x40)\n      not(0xffffffffffffffffffffffff)\n        /* \"#utility.yul\":4575:4577   */\n      0x60\n        /* \"#utility.yul\":4571:4586   */\n      dup7\n      swap1\n      shl\n        /* \"#utility.yul\":4567:4620   */\n      and\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2075:2107  abi.encodePacked(_user, _amount) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":4555:4621   */\n      mstore\n        /* \"#utility.yul\":4637:4649   */\n      0x34\n      dup2\n      add\n        /* \"#utility.yul\":4630:4658   */\n      dup5\n      swap1\n      mstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2034:2038  bool */\n      0x00\n      swap1\n      dup2\n      swap1\n        /* \"#utility.yul\":4674:4686   */\n      0x54\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2075:2107  abi.encodePacked(_user, _amount) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2065:2108  keccak256(abi.encodePacked(_user, _amount)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2050:2108  bytes32 node = keccak256(abi.encodePacked(_user, _amount)) */\n      swap1\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2125:2175  MerkleProof.verify(_merkleProof, merkleRoot, node) */\n      tag_180\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2144:2156  _merkleProof */\n      dup5\n      dup5\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2125:2175  MerkleProof.verify(_merkleProof, merkleRoot, node) */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2158:2168  merkleRoot */\n      sload(0x02)\n      swap2\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2170:2174  node */\n      dup5\n      swap1\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2125:2143  MerkleProof.verify */\n      tag_127\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2125:2175  MerkleProof.verify(_merkleProof, merkleRoot, node) */\n      jump\t// in\n    tag_180:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":2118:2175  return MerkleProof.verify(_merkleProof, merkleRoot, node) */\n      swap7\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1896:2182  function verifyUser(... */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1510:1642  function setStartClaimingRound() external onlyOwner {... */\n    tag_83:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_182\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_101\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_182:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1572:1582  isClaiming */\n      0x04\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1572:1589  isClaiming = true */\n      dup1\n      sload\n      not(shl(0xa0, 0xff))\n      and\n      shl(0xa0, 0x01)\n      or\n      swap1\n      sstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1620:1635  block.timestamp */\n      timestamp\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1599:1617  startClaimingRound */\n      0x05\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1599:1635  startClaimingRound = block.timestamp */\n      sstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":1510:1642  function setStartClaimingRound() external onlyOwner {... */\n      jump\t// out\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3445:3674  function checkClaimingRound() external view returns (bool) {... */\n    tag_85:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3533:3543  isClaiming */\n      sload(0x04)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3498:3502  bool */\n      0x00\n      swap1\n      shl(0xa0, 0x01)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3533:3543  isClaiming */\n      swap1\n      div\n      0xff\n      and\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3533:3612  isClaiming && ((startClaimingRound + claimingRoundDuration) >= block.timestamp) */\n      dup1\n      iszero\n      tag_185\n      jumpi\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3596:3611  block.timestamp */\n      timestamp\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3570:3591  claimingRoundDuration */\n      sload(0x06)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3549:3567  startClaimingRound */\n      sload(0x05)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3549:3591  startClaimingRound + claimingRoundDuration */\n      tag_186\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_186:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3548:3611  (startClaimingRound + claimingRoundDuration) >= block.timestamp */\n      lt\n      iszero\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3533:3612  isClaiming && ((startClaimingRound + claimingRoundDuration) >= block.timestamp) */\n    tag_185:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3533:3667  isClaiming && ((startClaimingRound + claimingRoundDuration) >= block.timestamp) &&... */\n      dup1\n      iszero\n      tag_187\n      jumpi\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3648:3666  startClaimingRound */\n      sload(0x05)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3629:3644  block.timestamp */\n      timestamp\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3629:3666  block.timestamp >= startClaimingRound */\n      lt\n      iszero\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3533:3667  isClaiming && ((startClaimingRound + claimingRoundDuration) >= block.timestamp) &&... */\n    tag_187:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3514:3667  return... */\n      swap1\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3445:3674  function checkClaimingRound() external view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3089:3305  function unClaimedTokenToTreasury() external onlyOwner {... */\n    tag_92:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_189\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_101\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_189:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3181:3186  token */\n      sload(0x03)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3215:3250  tokenERC20.balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3244:3248  this */\n      address\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3215:3250  tokenERC20.balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2244:2295   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3181:3186  token */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3154:3171  IERC20 tokenERC20 */\n      0x00\n      swap1\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3181:3186  token */\n      dup3\n      swap1\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3215:3235  tokenERC20.balanceOf */\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":2217:2235   */\n      0x24\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3215:3250  tokenERC20.balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_193\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_193:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_194\n      swap2\n      swap1\n      tag_138\n      jump\t// in\n    tag_194:\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3280:3288  treasury */\n      0x04\n      dup1\n      sload\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3260:3298  tokenERC20.transfer(treasury, balance) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3280:3288  treasury */\n      swap2\n      dup3\n      and\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3260:3298  tokenERC20.transfer(treasury, balance) */\n      swap3\n      dup2\n      add\n        /* \"#utility.yul\":6113:6164   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":6180:6198   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6173:6207   */\n      dup4\n      swap1\n      mstore\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3197:3250  uint256 balance = tokenERC20.balanceOf(address(this)) */\n      swap2\n      swap3\n      pop\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3260:3279  tokenERC20.transfer */\n      swap1\n      dup4\n      and\n      swap1\n      0xa9059cbb\n      swap1\n        /* \"#utility.yul\":6086:6104   */\n      0x44\n      add\n        /* \"SmartContractsInterview/MerkleDistribution.sol\":3260:3298  tokenERC20.transfer(treasury, balance) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_197\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_197:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_150\n      swap2\n      swap1\n      tag_148\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_95:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_200\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_101\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_200:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_202\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2700:2701  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2244:2295   */\n      mstore\n        /* \"#utility.yul\":2217:2235   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      tag_104\n        /* \"#utility.yul\":2098:2301   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_202:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      tag_204\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2742:2750  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2741  _transferOwnership */\n      tag_168\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_204:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_101:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      0x0100\n      swap1\n      swap2\n      div\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_155\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2244:2295   */\n      mstore\n        /* \"#utility.yul\":2217:2235   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_104\n        /* \"#utility.yul\":2098:2301   */\n      jump\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1767:1873  function _requireNotPaused() internal view virtual {... */\n    tag_108:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1662:1666  bool */\n      0x00\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1685:1692  _paused */\n      sload\n      0xff\n      and\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1836:1845  !paused() */\n      iszero\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1828:1866  require(!paused(), \"Pausable: paused\") */\n      tag_155\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6702:6704   */\n      0x20\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1828:1866  require(!paused(), \"Pausable: paused\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6684:6705   */\n      mstore\n        /* \"#utility.yul\":6741:6743   */\n      0x10\n        /* \"#utility.yul\":6721:6739   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6714:6744   */\n      mstore\n      shl(0x82, 0x14185d5cd8589b194e881c185d5cd959)\n        /* \"#utility.yul\":6760:6778   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6753:6799   */\n      mstore\n        /* \"#utility.yul\":6816:6834   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1828:1866  require(!paused(), \"Pausable: paused\") */\n      tag_104\n        /* \"#utility.yul\":6500:6840   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n    tag_111:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2487  _status != _ENTERED */\n      sub\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_218\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7047:7049   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7029:7050   */\n      mstore\n        /* \"#utility.yul\":7086:7088   */\n      0x1f\n        /* \"#utility.yul\":7066:7084   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7059:7089   */\n      mstore\n        /* \"#utility.yul\":7125:7158   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":7105:7123   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7098:7159   */\n      mstore\n        /* \"#utility.yul\":7176:7194   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_104\n        /* \"#utility.yul\":6845:7200   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_218:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2598:2605  _status */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2598:2616  _status = _ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1265:1419  function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {... */\n    tag_127:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1356:1360  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1408:1412  root */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1379:1404  processProof(proof, leaf) */\n      tag_222\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1392:1397  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1399:1403  leaf */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1379:1391  processProof */\n      tag_223\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1379:1404  processProof(proof, leaf) */\n      jump\t// in\n    tag_222:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1379:1412  processProof(proof, leaf) == root */\n      eq\n      swap5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1265:1419  function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2433:2550  function _unpause() internal virtual whenPaused {... */\n    tag_156:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1486:1502  _requirePaused() */\n      tag_226\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1486:1500  _requirePaused */\n      tag_227\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1486:1502  _requirePaused() */\n      jump\t// in\n    tag_226:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2501:2506  false */\n      0x00\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2491:2506  _paused = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2521:2543  Unpaused(_msgSender()) */\n      0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2530:2542  _msgSender() */\n    tag_229:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2521:2543  Unpaused(_msgSender()) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2262:2294   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2244:2295   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2232:2234   */\n      0x20\n        /* \"#utility.yul\":2217:2235   */\n      add\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2521:2543  Unpaused(_msgSender()) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2433:2550  function _unpause() internal virtual whenPaused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_168:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      dup4\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      0x0100\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      dup2\n      dup2\n      mul\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      dup6\n      and\n      or\n      dup6\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      swap4\n      div\n      swap2\n      swap1\n      swap2\n      and\n      swap3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      swap1\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2186:2301  function _pause() internal virtual whenNotPaused {... */\n    tag_176:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1239:1258  _requireNotPaused() */\n      tag_233\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1239:1256  _requireNotPaused */\n      tag_108\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1239:1258  _requireNotPaused() */\n      jump\t// in\n    tag_233:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2245:2252  _paused */\n      0x00\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2245:2259  _paused = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2255:2259  true */\n      0x01\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2245:2259  _paused = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2274:2294  Paused(_msgSender()) */\n      0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2281:2293  _msgSender() */\n      tag_229\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1967:2257  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n    tag_223:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2050:2057  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2092:2096  leaf */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2050:2057  bytes32 */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2106:2222  for (uint256 i = 0; i < proof.length; i++) {... */\n    tag_239:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2130:2135  proof */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2130:2142  proof.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2126:2127  i */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2126:2142  i < proof.length */\n      lt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2106:2222  for (uint256 i = 0; i < proof.length; i++) {... */\n      iszero\n      tag_240\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2178:2211  _hashPair(computedHash, proof[i]) */\n      tag_242\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2188:2200  computedHash */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2202:2207  proof */\n      dup7\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2208:2209  i */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2202:2210  proof[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_244\n      jumpi\n      tag_244\n      tag_245\n      jump\t// in\n    tag_244:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2178:2187  _hashPair */\n      tag_246\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2178:2211  _hashPair(computedHash, proof[i]) */\n      jump\t// in\n    tag_242:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2163:2211  computedHash = _hashPair(computedHash, proof[i]) */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2144:2147  i++ */\n      0x01\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2106:2222  for (uint256 i = 0; i < proof.length; i++) {... */\n      jump(tag_239)\n    tag_240:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2238:2250  computedHash */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1967:2257  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n    tag_238:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1945:2051  function _requirePaused() internal view virtual {... */\n    tag_227:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1662:1666  bool */\n      0x00\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1685:1692  _paused */\n      sload\n      0xff\n      and\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2003:2044  require(paused(), \"Pausable: not paused\") */\n      tag_155\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7539:7541   */\n      0x20\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2003:2044  require(paused(), \"Pausable: not paused\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7521:7542   */\n      mstore\n        /* \"#utility.yul\":7578:7580   */\n      0x14\n        /* \"#utility.yul\":7558:7576   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7551:7581   */\n      mstore\n      shl(0x62, 0x14185d5cd8589b194e881b9bdd081c185d5cd959)\n        /* \"#utility.yul\":7597:7615   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7590:7640   */\n      mstore\n        /* \"#utility.yul\":7657:7675   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":2003:2044  require(paused(), \"Pausable: not paused\") */\n      tag_104\n        /* \"#utility.yul\":7337:7681   */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9229:9376  function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {... */\n    tag_246:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9292:9299  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9322:9323  b */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9318:9319  a */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9318:9323  a < b */\n      lt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9318:9369  a < b ? _efficientHash(a, b) : _efficientHash(b, a) */\n      tag_253\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9564:9577  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9655:9670  mstore(0x00, a) */\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9690:9694  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9683:9698  mstore(0x20, b) */\n      dup5\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9736:9740  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9720:9741  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9318:9369  a < b ? _efficientHash(a, b) : _efficientHash(b, a) */\n      jump(tag_257)\n    tag_253:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9564:9577  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9655:9670  mstore(0x00, a) */\n      dup4\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9690:9694  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9683:9698  mstore(0x20, b) */\n      dup4\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9736:9740  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9720:9741  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9326:9346  _efficientHash(a, b) */\n    tag_257:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9311:9369  return a < b ? _efficientHash(a, b) : _efficientHash(b, a) */\n      swap4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":9229:9376  function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:187   */\n    tag_259:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:181   */\n      tag_263\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":111:181   */\n    tag_263:\n        /* \"#utility.yul\":14:187   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":192:378   */\n    tag_30:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:324   */\n      iszero\n      tag_265\n      jumpi\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":272:324   */\n    tag_265:\n        /* \"#utility.yul\":343:372   */\n      tag_257\n        /* \"#utility.yul\":362:371   */\n      dup3\n        /* \"#utility.yul\":343:372   */\n      tag_259\n      jump\t// in\n        /* \"#utility.yul\":565:932   */\n    tag_260:\n        /* \"#utility.yul\":628:636   */\n      0x00\n        /* \"#utility.yul\":638:644   */\n      dup1\n        /* \"#utility.yul\":692:695   */\n      dup4\n        /* \"#utility.yul\":685:689   */\n      0x1f\n        /* \"#utility.yul\":677:683   */\n      dup5\n        /* \"#utility.yul\":673:690   */\n      add\n        /* \"#utility.yul\":669:696   */\n      slt\n        /* \"#utility.yul\":659:714   */\n      tag_269\n      jumpi\n        /* \"#utility.yul\":710:711   */\n      0x00\n        /* \"#utility.yul\":707:708   */\n      dup1\n        /* \"#utility.yul\":700:712   */\n      revert\n        /* \"#utility.yul\":659:714   */\n    tag_269:\n      pop\n        /* \"#utility.yul\":733:753   */\n      dup2\n      calldataload\n        /* \"#utility.yul\":776:794   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":765:795   */\n      dup2\n      gt\n        /* \"#utility.yul\":762:812   */\n      iszero\n      tag_270\n      jumpi\n        /* \"#utility.yul\":808:809   */\n      0x00\n        /* \"#utility.yul\":805:806   */\n      dup1\n        /* \"#utility.yul\":798:810   */\n      revert\n        /* \"#utility.yul\":762:812   */\n    tag_270:\n        /* \"#utility.yul\":845:849   */\n      0x20\n        /* \"#utility.yul\":837:843   */\n      dup4\n        /* \"#utility.yul\":833:850   */\n      add\n        /* \"#utility.yul\":821:850   */\n      swap2\n      pop\n        /* \"#utility.yul\":905:908   */\n      dup4\n        /* \"#utility.yul\":898:902   */\n      0x20\n        /* \"#utility.yul\":888:894   */\n      dup3\n        /* \"#utility.yul\":885:886   */\n      0x05\n        /* \"#utility.yul\":881:895   */\n      shl\n        /* \"#utility.yul\":873:879   */\n      dup6\n        /* \"#utility.yul\":869:896   */\n      add\n        /* \"#utility.yul\":865:903   */\n      add\n        /* \"#utility.yul\":862:909   */\n      gt\n        /* \"#utility.yul\":859:926   */\n      iszero\n      tag_271\n      jumpi\n        /* \"#utility.yul\":922:923   */\n      0x00\n        /* \"#utility.yul\":919:920   */\n      dup1\n        /* \"#utility.yul\":912:924   */\n      revert\n        /* \"#utility.yul\":859:926   */\n    tag_271:\n        /* \"#utility.yul\":565:932   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":937:1488   */\n    tag_38:\n        /* \"#utility.yul\":1032:1038   */\n      0x00\n        /* \"#utility.yul\":1040:1046   */\n      dup1\n        /* \"#utility.yul\":1048:1054   */\n      0x00\n        /* \"#utility.yul\":1101:1103   */\n      0x40\n        /* \"#utility.yul\":1089:1098   */\n      dup5\n        /* \"#utility.yul\":1080:1087   */\n      dup7\n        /* \"#utility.yul\":1076:1099   */\n      sub\n        /* \"#utility.yul\":1072:1104   */\n      slt\n        /* \"#utility.yul\":1069:1121   */\n      iszero\n      tag_273\n      jumpi\n        /* \"#utility.yul\":1117:1118   */\n      0x00\n        /* \"#utility.yul\":1114:1115   */\n      dup1\n        /* \"#utility.yul\":1107:1119   */\n      revert\n        /* \"#utility.yul\":1069:1121   */\n    tag_273:\n        /* \"#utility.yul\":1162:1185   */\n      dup4\n      calldataload\n      swap3\n      pop\n        /* \"#utility.yul\":1260:1262   */\n      0x20\n        /* \"#utility.yul\":1245:1263   */\n      dup5\n      add\n        /* \"#utility.yul\":1232:1264   */\n      calldataload\n        /* \"#utility.yul\":1287:1305   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1276:1306   */\n      dup2\n      gt\n        /* \"#utility.yul\":1273:1323   */\n      iszero\n      tag_274\n      jumpi\n        /* \"#utility.yul\":1319:1320   */\n      0x00\n        /* \"#utility.yul\":1316:1317   */\n      dup1\n        /* \"#utility.yul\":1309:1321   */\n      revert\n        /* \"#utility.yul\":1273:1323   */\n    tag_274:\n        /* \"#utility.yul\":1358:1428   */\n      tag_275\n        /* \"#utility.yul\":1420:1427   */\n      dup7\n        /* \"#utility.yul\":1411:1417   */\n      dup3\n        /* \"#utility.yul\":1400:1409   */\n      dup8\n        /* \"#utility.yul\":1396:1418   */\n      add\n        /* \"#utility.yul\":1358:1428   */\n      tag_260\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":937:1488   */\n      swap5\n      swap8\n        /* \"#utility.yul\":1447:1455   */\n      swap1\n      swap7\n      pop\n        /* \"#utility.yul\":1332:1428   */\n      swap4\n      swap5\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":937:1488   */\n      jump\t// out\n        /* \"#utility.yul\":1867:2093   */\n    tag_57:\n        /* \"#utility.yul\":1926:1932   */\n      0x00\n        /* \"#utility.yul\":1979:1981   */\n      0x20\n        /* \"#utility.yul\":1967:1976   */\n      dup3\n        /* \"#utility.yul\":1958:1965   */\n      dup5\n        /* \"#utility.yul\":1954:1977   */\n      sub\n        /* \"#utility.yul\":1950:1982   */\n      slt\n        /* \"#utility.yul\":1947:1999   */\n      iszero\n      tag_279\n      jumpi\n        /* \"#utility.yul\":1995:1996   */\n      0x00\n        /* \"#utility.yul\":1992:1993   */\n      dup1\n        /* \"#utility.yul\":1985:1997   */\n      revert\n        /* \"#utility.yul\":1947:1999   */\n    tag_279:\n      pop\n        /* \"#utility.yul\":2040:2063   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1867:2093   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2491:3116   */\n    tag_79:\n        /* \"#utility.yul\":2595:2601   */\n      0x00\n        /* \"#utility.yul\":2603:2609   */\n      dup1\n        /* \"#utility.yul\":2611:2617   */\n      0x00\n        /* \"#utility.yul\":2619:2625   */\n      dup1\n        /* \"#utility.yul\":2672:2674   */\n      0x60\n        /* \"#utility.yul\":2660:2669   */\n      dup6\n        /* \"#utility.yul\":2651:2658   */\n      dup8\n        /* \"#utility.yul\":2647:2670   */\n      sub\n        /* \"#utility.yul\":2643:2675   */\n      slt\n        /* \"#utility.yul\":2640:2692   */\n      iszero\n      tag_284\n      jumpi\n        /* \"#utility.yul\":2688:2689   */\n      0x00\n        /* \"#utility.yul\":2685:2686   */\n      dup1\n        /* \"#utility.yul\":2678:2690   */\n      revert\n        /* \"#utility.yul\":2640:2692   */\n    tag_284:\n        /* \"#utility.yul\":2711:2740   */\n      tag_285\n        /* \"#utility.yul\":2730:2739   */\n      dup6\n        /* \"#utility.yul\":2711:2740   */\n      tag_259\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":2701:2740   */\n      swap4\n      pop\n        /* \"#utility.yul\":2809:2811   */\n      0x20\n        /* \"#utility.yul\":2794:2812   */\n      dup6\n      add\n        /* \"#utility.yul\":2781:2813   */\n      calldataload\n      swap3\n      pop\n        /* \"#utility.yul\":2888:2890   */\n      0x40\n        /* \"#utility.yul\":2873:2891   */\n      dup6\n      add\n        /* \"#utility.yul\":2860:2892   */\n      calldataload\n        /* \"#utility.yul\":2915:2933   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2904:2934   */\n      dup2\n      gt\n        /* \"#utility.yul\":2901:2951   */\n      iszero\n      tag_286\n      jumpi\n        /* \"#utility.yul\":2947:2948   */\n      0x00\n        /* \"#utility.yul\":2944:2945   */\n      dup1\n        /* \"#utility.yul\":2937:2949   */\n      revert\n        /* \"#utility.yul\":2901:2951   */\n    tag_286:\n        /* \"#utility.yul\":2986:3056   */\n      tag_287\n        /* \"#utility.yul\":3048:3055   */\n      dup8\n        /* \"#utility.yul\":3039:3045   */\n      dup3\n        /* \"#utility.yul\":3028:3037   */\n      dup9\n        /* \"#utility.yul\":3024:3046   */\n      add\n        /* \"#utility.yul\":2986:3056   */\n      tag_260\n      jump\t// in\n    tag_287:\n        /* \"#utility.yul\":2491:3116   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n        /* \"#utility.yul\":3075:3083   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2491:3116   */\n      jump\t// out\n        /* \"#utility.yul\":3473:3695   */\n    tag_116:\n        /* \"#utility.yul\":3538:3547   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3559:3569   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":3556:3689   */\n      iszero\n      tag_238\n      jumpi\n        /* \"#utility.yul\":3611:3621   */\n      0x4e487b71\n        /* \"#utility.yul\":3606:3609   */\n      0xe0\n        /* \"#utility.yul\":3602:3622   */\n      shl\n        /* \"#utility.yul\":3599:3600   */\n      0x00\n        /* \"#utility.yul\":3592:3623   */\n      mstore\n        /* \"#utility.yul\":3646:3650   */\n      0x11\n        /* \"#utility.yul\":3643:3644   */\n      0x04\n        /* \"#utility.yul\":3636:3651   */\n      mstore\n        /* \"#utility.yul\":3674:3678   */\n      0x24\n        /* \"#utility.yul\":3671:3672   */\n      0x00\n        /* \"#utility.yul\":3664:3679   */\n      revert\n        /* \"#utility.yul\":5400:5584   */\n    tag_138:\n        /* \"#utility.yul\":5470:5476   */\n      0x00\n        /* \"#utility.yul\":5523:5525   */\n      0x20\n        /* \"#utility.yul\":5511:5520   */\n      dup3\n        /* \"#utility.yul\":5502:5509   */\n      dup5\n        /* \"#utility.yul\":5498:5521   */\n      sub\n        /* \"#utility.yul\":5494:5526   */\n      slt\n        /* \"#utility.yul\":5491:5543   */\n      iszero\n      tag_297\n      jumpi\n        /* \"#utility.yul\":5539:5540   */\n      0x00\n        /* \"#utility.yul\":5536:5537   */\n      dup1\n        /* \"#utility.yul\":5529:5541   */\n      revert\n        /* \"#utility.yul\":5491:5543   */\n    tag_297:\n      pop\n        /* \"#utility.yul\":5562:5578   */\n      mload\n      swap2\n        /* \"#utility.yul\":5400:5584   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6218:6495   */\n    tag_148:\n        /* \"#utility.yul\":6285:6291   */\n      0x00\n        /* \"#utility.yul\":6338:6340   */\n      0x20\n        /* \"#utility.yul\":6326:6335   */\n      dup3\n        /* \"#utility.yul\":6317:6324   */\n      dup5\n        /* \"#utility.yul\":6313:6336   */\n      sub\n        /* \"#utility.yul\":6309:6341   */\n      slt\n        /* \"#utility.yul\":6306:6358   */\n      iszero\n      tag_301\n      jumpi\n        /* \"#utility.yul\":6354:6355   */\n      0x00\n        /* \"#utility.yul\":6351:6352   */\n      dup1\n        /* \"#utility.yul\":6344:6356   */\n      revert\n        /* \"#utility.yul\":6306:6358   */\n    tag_301:\n        /* \"#utility.yul\":6386:6395   */\n      dup2\n        /* \"#utility.yul\":6380:6396   */\n      mload\n        /* \"#utility.yul\":6439:6444   */\n      dup1\n        /* \"#utility.yul\":6432:6445   */\n      iszero\n        /* \"#utility.yul\":6425:6446   */\n      iszero\n        /* \"#utility.yul\":6418:6423   */\n      dup2\n        /* \"#utility.yul\":6415:6447   */\n      eq\n        /* \"#utility.yul\":6405:6465   */\n      tag_257\n      jumpi\n        /* \"#utility.yul\":6461:6462   */\n      0x00\n        /* \"#utility.yul\":6458:6459   */\n      dup1\n        /* \"#utility.yul\":6451:6463   */\n      revert\n        /* \"#utility.yul\":7205:7332   */\n    tag_245:\n        /* \"#utility.yul\":7266:7276   */\n      0x4e487b71\n        /* \"#utility.yul\":7261:7264   */\n      0xe0\n        /* \"#utility.yul\":7257:7277   */\n      shl\n        /* \"#utility.yul\":7254:7255   */\n      0x00\n        /* \"#utility.yul\":7247:7278   */\n      mstore\n        /* \"#utility.yul\":7297:7301   */\n      0x32\n        /* \"#utility.yul\":7294:7295   */\n      0x04\n        /* \"#utility.yul\":7287:7302   */\n      mstore\n        /* \"#utility.yul\":7321:7325   */\n      0x24\n        /* \"#utility.yul\":7318:7319   */\n      0x00\n        /* \"#utility.yul\":7311:7326   */\n      revert\n\n    auxdata: 0xa2646970667358221220b24f23ab3eeb44dd50a9499034daaff673fe0a3fc42196c3c5307a18f603014864736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1055": {
									"entryPoint": null,
									"id": 1055,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_174": {
									"entryPoint": null,
									"id": 174,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_274": {
									"entryPoint": null,
									"id": 274,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_50": {
									"entryPoint": null,
									"id": 50,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_checkOwner_84": {
									"entryPoint": 332,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_410": {
									"entryPoint": null,
									"id": 410,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_pause_238": {
									"entryPoint": 382,
									"id": 238,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requireNotPaused_211": {
									"entryPoint": 471,
									"id": 211,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 165,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@owner_67": {
									"entryPoint": null,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@pause_1296": {
									"entryPoint": 314,
									"id": 1296,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@paused_199": {
									"entryPoint": null,
									"id": 199,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferOwnership_126": {
									"entryPoint": 253,
									"id": 126,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_address_fromMemory": {
									"entryPoint": 540,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address_fromMemory": {
									"entryPoint": 567,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:1044:7",
										"nodeType": "YulBlock",
										"src": "0:1044:7",
										"statements": [
											{
												"nativeSrc": "6:3:7",
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "74:117:7",
													"nodeType": "YulBlock",
													"src": "74:117:7",
													"statements": [
														{
															"nativeSrc": "84:22:7",
															"nodeType": "YulAssignment",
															"src": "84:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "99:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "99:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "93:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "93:5:7"
																},
																"nativeSrc": "93:13:7",
																"nodeType": "YulFunctionCall",
																"src": "93:13:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "84:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "84:5:7"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "169:16:7",
																"nodeType": "YulBlock",
																"src": "169:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "178:1:7",
																					"nodeType": "YulLiteral",
																					"src": "178:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "181:1:7",
																					"nodeType": "YulLiteral",
																					"src": "181:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "171:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "171:6:7"
																			},
																			"nativeSrc": "171:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "171:12:7"
																		},
																		"nativeSrc": "171:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "171:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "128:5:7",
																				"nodeType": "YulIdentifier",
																				"src": "128:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "139:5:7",
																						"nodeType": "YulIdentifier",
																						"src": "139:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "154:3:7",
																										"nodeType": "YulLiteral",
																										"src": "154:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "159:1:7",
																										"nodeType": "YulLiteral",
																										"src": "159:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "150:3:7",
																									"nodeType": "YulIdentifier",
																									"src": "150:3:7"
																								},
																								"nativeSrc": "150:11:7",
																								"nodeType": "YulFunctionCall",
																								"src": "150:11:7"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "163:1:7",
																								"nodeType": "YulLiteral",
																								"src": "163:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "146:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "146:3:7"
																						},
																						"nativeSrc": "146:19:7",
																						"nodeType": "YulFunctionCall",
																						"src": "146:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "135:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "135:3:7"
																				},
																				"nativeSrc": "135:31:7",
																				"nodeType": "YulFunctionCall",
																				"src": "135:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "125:2:7",
																			"nodeType": "YulIdentifier",
																			"src": "125:2:7"
																		},
																		"nativeSrc": "125:42:7",
																		"nodeType": "YulFunctionCall",
																		"src": "125:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "118:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "118:6:7"
																},
																"nativeSrc": "118:50:7",
																"nodeType": "YulFunctionCall",
																"src": "118:50:7"
															},
															"nativeSrc": "115:70:7",
															"nodeType": "YulIf",
															"src": "115:70:7"
														}
													]
												},
												"name": "abi_decode_address_fromMemory",
												"nativeSrc": "14:177:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "53:6:7",
														"nodeType": "YulTypedName",
														"src": "53:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "64:5:7",
														"nodeType": "YulTypedName",
														"src": "64:5:7",
														"type": ""
													}
												],
												"src": "14:177:7"
											},
											{
												"body": {
													"nativeSrc": "294:195:7",
													"nodeType": "YulBlock",
													"src": "294:195:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "340:16:7",
																"nodeType": "YulBlock",
																"src": "340:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "349:1:7",
																					"nodeType": "YulLiteral",
																					"src": "349:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "352:1:7",
																					"nodeType": "YulLiteral",
																					"src": "352:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "342:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "342:6:7"
																			},
																			"nativeSrc": "342:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "342:12:7"
																		},
																		"nativeSrc": "342:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "342:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "315:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "315:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "324:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "324:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "311:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "311:3:7"
																		},
																		"nativeSrc": "311:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "311:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "336:2:7",
																		"nodeType": "YulLiteral",
																		"src": "336:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "307:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "307:3:7"
																},
																"nativeSrc": "307:32:7",
																"nodeType": "YulFunctionCall",
																"src": "307:32:7"
															},
															"nativeSrc": "304:52:7",
															"nodeType": "YulIf",
															"src": "304:52:7"
														},
														{
															"nativeSrc": "365:50:7",
															"nodeType": "YulAssignment",
															"src": "365:50:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "405:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "405:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nativeSrc": "375:29:7",
																	"nodeType": "YulIdentifier",
																	"src": "375:29:7"
																},
																"nativeSrc": "375:40:7",
																"nodeType": "YulFunctionCall",
																"src": "375:40:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "365:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "365:6:7"
																}
															]
														},
														{
															"nativeSrc": "424:59:7",
															"nodeType": "YulAssignment",
															"src": "424:59:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "468:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "468:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "479:2:7",
																				"nodeType": "YulLiteral",
																				"src": "479:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "464:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "464:3:7"
																		},
																		"nativeSrc": "464:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "464:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nativeSrc": "434:29:7",
																	"nodeType": "YulIdentifier",
																	"src": "434:29:7"
																},
																"nativeSrc": "434:49:7",
																"nodeType": "YulFunctionCall",
																"src": "434:49:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "424:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "424:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address_fromMemory",
												"nativeSrc": "196:293:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "252:9:7",
														"nodeType": "YulTypedName",
														"src": "252:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "263:7:7",
														"nodeType": "YulTypedName",
														"src": "263:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "275:6:7",
														"nodeType": "YulTypedName",
														"src": "275:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "283:6:7",
														"nodeType": "YulTypedName",
														"src": "283:6:7",
														"type": ""
													}
												],
												"src": "196:293:7"
											},
											{
												"body": {
													"nativeSrc": "595:102:7",
													"nodeType": "YulBlock",
													"src": "595:102:7",
													"statements": [
														{
															"nativeSrc": "605:26:7",
															"nodeType": "YulAssignment",
															"src": "605:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "617:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "617:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "628:2:7",
																		"nodeType": "YulLiteral",
																		"src": "628:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "613:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "613:3:7"
																},
																"nativeSrc": "613:18:7",
																"nodeType": "YulFunctionCall",
																"src": "613:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "605:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "605:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "647:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "647:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "662:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "662:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "678:3:7",
																								"nodeType": "YulLiteral",
																								"src": "678:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "683:1:7",
																								"nodeType": "YulLiteral",
																								"src": "683:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "674:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "674:3:7"
																						},
																						"nativeSrc": "674:11:7",
																						"nodeType": "YulFunctionCall",
																						"src": "674:11:7"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "687:1:7",
																						"nodeType": "YulLiteral",
																						"src": "687:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "670:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "670:3:7"
																				},
																				"nativeSrc": "670:19:7",
																				"nodeType": "YulFunctionCall",
																				"src": "670:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "658:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "658:3:7"
																		},
																		"nativeSrc": "658:32:7",
																		"nodeType": "YulFunctionCall",
																		"src": "658:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "640:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "640:6:7"
																},
																"nativeSrc": "640:51:7",
																"nodeType": "YulFunctionCall",
																"src": "640:51:7"
															},
															"nativeSrc": "640:51:7",
															"nodeType": "YulExpressionStatement",
															"src": "640:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "494:203:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "564:9:7",
														"nodeType": "YulTypedName",
														"src": "564:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "575:6:7",
														"nodeType": "YulTypedName",
														"src": "575:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "586:4:7",
														"nodeType": "YulTypedName",
														"src": "586:4:7",
														"type": ""
													}
												],
												"src": "494:203:7"
											},
											{
												"body": {
													"nativeSrc": "876:166:7",
													"nodeType": "YulBlock",
													"src": "876:166:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "893:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "893:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "904:2:7",
																		"nodeType": "YulLiteral",
																		"src": "904:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "886:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "886:6:7"
																},
																"nativeSrc": "886:21:7",
																"nodeType": "YulFunctionCall",
																"src": "886:21:7"
															},
															"nativeSrc": "886:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "886:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "927:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "927:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "938:2:7",
																				"nodeType": "YulLiteral",
																				"src": "938:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "923:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "923:3:7"
																		},
																		"nativeSrc": "923:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "923:18:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "943:2:7",
																		"nodeType": "YulLiteral",
																		"src": "943:2:7",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "916:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "916:6:7"
																},
																"nativeSrc": "916:30:7",
																"nodeType": "YulFunctionCall",
																"src": "916:30:7"
															},
															"nativeSrc": "916:30:7",
															"nodeType": "YulExpressionStatement",
															"src": "916:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "966:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "966:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "977:2:7",
																				"nodeType": "YulLiteral",
																				"src": "977:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "962:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "962:3:7"
																		},
																		"nativeSrc": "962:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "962:18:7"
																	},
																	{
																		"hexValue": "5061757361626c653a20706175736564",
																		"kind": "string",
																		"nativeSrc": "982:18:7",
																		"nodeType": "YulLiteral",
																		"src": "982:18:7",
																		"type": "",
																		"value": "Pausable: paused"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "955:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "955:6:7"
																},
																"nativeSrc": "955:46:7",
																"nodeType": "YulFunctionCall",
																"src": "955:46:7"
															},
															"nativeSrc": "955:46:7",
															"nodeType": "YulExpressionStatement",
															"src": "955:46:7"
														},
														{
															"nativeSrc": "1010:26:7",
															"nodeType": "YulAssignment",
															"src": "1010:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1022:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1022:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1033:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1033:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1018:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1018:3:7"
																},
																"nativeSrc": "1018:18:7",
																"nodeType": "YulFunctionCall",
																"src": "1018:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1010:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "1010:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "702:340:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "853:9:7",
														"nodeType": "YulTypedName",
														"src": "853:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "867:4:7",
														"nodeType": "YulTypedName",
														"src": "867:4:7",
														"type": ""
													}
												],
												"src": "702:340:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1008 CODESIZE SUB DUP1 PUSH2 0x1008 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2E SWAP2 PUSH2 0x237 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLER DUP1 PUSH2 0x5D JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x66 DUP2 PUSH2 0xA5 JUMP JUMPDEST POP PUSH1 0x1 DUP1 SSTORE PUSH1 0x4 DUP1 SLOAD PUSH3 0x93A80 PUSH1 0x6 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH2 0x96 DUP3 PUSH2 0xFD JUMP JUMPDEST PUSH2 0x9E PUSH2 0x13A JUMP JUMPDEST POP POP PUSH2 0x268 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH2 0x100 DUP2 DUP2 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT DUP6 AND OR DUP6 SSTORE PUSH1 0x40 MLOAD SWAP4 DIV SWAP2 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH2 0x105 PUSH2 0x14C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x12E JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54 JUMP JUMPDEST PUSH2 0x137 DUP2 PUSH2 0xA5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x142 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x14A PUSH2 0x17E JUMP JUMPDEST JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x14A JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54 JUMP JUMPDEST PUSH2 0x186 PUSH2 0x1D7 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1BA CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x14A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x54 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x232 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x248 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x251 DUP4 PUSH2 0x21C JUMP JUMPDEST SWAP2 POP PUSH2 0x25F PUSH1 0x20 DUP5 ADD PUSH2 0x21C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xD93 DUP1 PUSH2 0x275 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x13D JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7CB64759 GT PUSH2 0xB4 JUMPI DUP1 PUSH4 0xB6CD5D1A GT PUSH2 0x79 JUMPI DUP1 PUSH4 0xB6CD5D1A EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xC27F7E26 EQ PUSH2 0x262 JUMPI DUP1 PUSH4 0xC884EF83 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0xDE805DA7 EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x294 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x2A7 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x203 JUMPI DUP1 PUSH4 0x7CC6CB7A EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0xA0074C67 EQ PUSH2 0x247 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x49039527 GT PUSH2 0x105 JUMPI DUP1 PUSH4 0x49039527 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x5E4F3A9C EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x6038EFAD EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x61D027B3 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1FB JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x144FA6D7 EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x2F52EBB7 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x428E7565 EQ PUSH2 0x18D JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x154 PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0xBDE JUMP JUMPDEST PUSH2 0x2BA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15F PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x154 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0xC3F JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST PUSH2 0x154 PUSH2 0x6BF JUMP JUMPDEST PUSH2 0x15F PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15F PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0xFF AND JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x169 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x6D1 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x1CB CALLDATASIZE PUSH1 0x4 PUSH2 0xC87 JUMP JUMPDEST PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x1E3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x169 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x6F9 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0xC87 JUMP JUMPDEST PUSH2 0x70A JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x1A5 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x717 JUMP JUMPDEST PUSH0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x255 CALLDATASIZE PUSH1 0x4 PUSH2 0xC9E JUMP JUMPDEST PUSH2 0x727 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x7B3 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x7D4 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0xBDE JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x811 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x2A2 CALLDATASIZE PUSH1 0x4 PUSH2 0xBDE JUMP JUMPDEST PUSH2 0x901 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x1E3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2C2 PUSH2 0x93E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x31D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E2073686F756C646E2774206265207A65726F000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x347 PUSH2 0x970 JUMP JUMPDEST PUSH2 0x34F PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x384 JUMPI POP PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 0x384 JUMPI POP PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD PUSH2 0x380 SWAP2 SWAP1 PUSH2 0xCF4 JUMP JUMPDEST TIMESTAMP GT ISZERO JUMPDEST PUSH2 0x3D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4974206973206E6F20706572696F6420746F20636C61696D2100000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x421 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x105B1C9958591E4818DB185A5B5959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP5 SWAP1 MSTORE PUSH0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x4A0 DUP4 DUP4 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x2 SLOAD SWAP2 POP DUP5 SWAP1 POP PUSH2 0xA0E JUMP JUMPDEST PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x24B73B30B634B210383937B7B3 PUSH1 0x99 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x534 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E20616464726573732073686F756C646E2774206265207A65726F21 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP6 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x57A JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x59E SWAP2 SWAP1 PUSH2 0xD13 JUMP JUMPDEST GT PUSH2 0x5E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x496E73756666696369656E742042616C616E636521 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x65D JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x637 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x65B SWAP2 SWAP1 PUSH2 0xD2A JUMP JUMPDEST POP JUMPDEST CALLER PUSH0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xD8138F8A3F377C5259CA548E70E4C2DE94F129F5A11036A15B69513CBA2B426A SWAP1 PUSH2 0x6A8 SWAP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x6BA PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x93E JUMP JUMPDEST PUSH2 0x6CF PUSH2 0xA23 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6D9 PUSH2 0x93E JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH0 PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH2 0x6F4 PUSH2 0x93E JUMP JUMPDEST PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH2 0x701 PUSH2 0x93E JUMP JUMPDEST PUSH2 0x6CF PUSH0 PUSH2 0xA74 JUMP JUMPDEST PUSH2 0x712 PUSH2 0x93E JUMP JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH2 0x71F PUSH2 0x93E JUMP JUMPDEST PUSH2 0x6CF PUSH2 0xACC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP5 SWAP1 MSTORE PUSH0 SWAP1 DUP2 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x7A9 DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x2 SLOAD SWAP2 POP DUP5 SWAP1 POP PUSH2 0xA0E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7BB PUSH2 0x93E JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE TIMESTAMP PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x7FE JUMPI POP TIMESTAMP PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD PUSH2 0x7FB SWAP2 SWAP1 PUSH2 0xCF4 JUMP JUMPDEST LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x80C JUMPI POP PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x819 PUSH2 0x93E JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH0 SWAP1 DUP3 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x863 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x887 SWAP2 SWAP1 PUSH2 0xD13 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP SWAP1 DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8DD JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6BA SWAP2 SWAP1 PUSH2 0xD2A JUMP JUMPDEST PUSH2 0x909 PUSH2 0x93E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x932 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x314 JUMP JUMPDEST PUSH2 0x93B DUP2 PUSH2 0xA74 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x6CF JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x314 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH0 DUP3 PUSH2 0xA1A DUP6 DUP5 PUSH2 0xB08 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xA2B PUSH2 0xB4C JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH2 0x100 DUP2 DUP2 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT DUP6 AND OR DUP6 SSTORE PUSH1 0x40 MLOAD SWAP4 DIV SWAP2 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH2 0xAD4 PUSH2 0x970 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xA57 CALLER SWAP1 JUMP JUMPDEST PUSH0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xB42 JUMPI PUSH2 0xB38 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB2B JUMPI PUSH2 0xB2B PUSH2 0xD49 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xB94 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xB0C JUMP JUMPDEST POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0xFF AND PUSH2 0x6CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST PUSH0 DUP2 DUP4 LT PUSH2 0xBAE JUMPI PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xBBC JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBD9 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBEE JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xBBC DUP3 PUSH2 0xBC3 JUMP JUMPDEST PUSH0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC07 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC1E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xC38 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC51 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC6E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xC7A DUP7 DUP3 DUP8 ADD PUSH2 0xBF7 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC97 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xCB1 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xCBA DUP6 PUSH2 0xBC3 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCDC JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xCE8 DUP8 DUP3 DUP9 ADD PUSH2 0xBF7 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xB46 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD23 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD3A JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xBBC JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 0x4F 0x23 0xAB RETURNDATACOPY 0xEB PREVRANDAO 0xDD POP 0xA9 BLOBHASH SWAP1 CALLVALUE 0xDA 0xAF 0xF6 PUSH20 0xFE0A3FC42196C3C5307A18F603014864736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "356:3320:6:-:0;;;1001:237;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1006:5:1;996:15;;-1:-1:-1;;996:15:1;;;1056:10:6;;1269:95:0;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;640:51:7;613:18;;1322:31:0;;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;1716:1:2;1821:22;;1078:8:6::1;:20:::0;;1132:9:::1;1108:21;:33:::0;-1:-1:-1;;;;;;1161:18:6;-1:-1:-1;;;;;1078:20:6;::::1;1161:18:::0;;;1189:25:::1;1207:6:::0;1189:17:::1;:25::i;:::-;1224:7;:5;:7::i;:::-;1001:237:::0;;356:3320;;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;3004:6;3020:17;;;-1:-1:-1;;;;;;3020:17:0;;;;;3052:40;;3004:6;;;;;;;3020:17;;3004:6;;3052:40;;;2975:124;2912:187;:::o;2543:215::-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;640:51:7::0;613:18;;2672:31:0::1;494:203:7::0;2623:91:0::1;2723:28;2742:8:::0;2723:18:::1;:28::i;:::-;2543:215:::0;:::o;3311:59:6:-;1531:13:0;:11;:13::i;:::-;3355:8:6::1;:6;:8::i;:::-;3311:59::o:0;1796:162:0:-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;;;;;735:10:4;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:4;1901:40:0;;;640:51:7;613:18;;1901:40:0;494:203:7;2186:115:1;1239:19;:17;:19::i;:::-;2245:7:::1;:14:::0;;-1:-1:-1;;2245:14:1::1;2255:4;2245:14;::::0;;2274:20:::1;2281:12;735:10:4::0;;656:96;2281:12:1::1;2274:20;::::0;-1:-1:-1;;;;;658:32:7;;;640:51;;628:2;613:18;2274:20:1::1;;;;;;;2186:115::o:0;1767:106::-;1662:4;1685:7;;;1836:9;1828:38;;;;-1:-1:-1;;;1828:38:1;;904:2:7;1828:38:1;;;886:21:7;943:2;923:18;;;916:30;-1:-1:-1;;;962:18:7;;;955:46;1018:18;;1828:38:1;702:340:7;14:177;93:13;;-1:-1:-1;;;;;135:31:7;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;702:340::-;356:3320:6;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_checkOwner_84": {
									"entryPoint": 2366,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_efficientHash_964": {
									"entryPoint": null,
									"id": 964,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_hashPair_952": {
									"entryPoint": 2964,
									"id": 952,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_msgSender_410": {
									"entryPoint": null,
									"id": 410,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_nonReentrantAfter_308": {
									"entryPoint": null,
									"id": 308,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_nonReentrantBefore_300": {
									"entryPoint": 2485,
									"id": 300,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_pause_238": {
									"entryPoint": 2764,
									"id": 238,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requireNotPaused_211": {
									"entryPoint": 2416,
									"id": 211,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requirePaused_222": {
									"entryPoint": 2892,
									"id": 222,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 2676,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_unpause_254": {
									"entryPoint": 2595,
									"id": 254,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@checkClaimingRound_1328": {
									"entryPoint": 2004,
									"id": 1328,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@claim_1257": {
									"entryPoint": 831,
									"id": 1257,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@claimed_994": {
									"entryPoint": null,
									"id": 994,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@claimingRoundDuration_990": {
									"entryPoint": null,
									"id": 990,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@endClaimingRound_1118": {
									"entryPoint": 1745,
									"id": 1118,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isClaiming_986": {
									"entryPoint": null,
									"id": 986,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@merkleRoot_980": {
									"entryPoint": null,
									"id": 980,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@owner_67": {
									"entryPoint": null,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@pause_1296": {
									"entryPoint": 1815,
									"id": 1296,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@paused_199": {
									"entryPoint": null,
									"id": 199,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@processProof_516": {
									"entryPoint": 2824,
									"id": 516,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@renounceOwnership_98": {
									"entryPoint": 1785,
									"id": 98,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@setClaimingRoundDuration_1130": {
									"entryPoint": 1772,
									"id": 1130,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setMerkleRoot_1067": {
									"entryPoint": 1802,
									"id": 1067,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setStartClaimingRound_1104": {
									"entryPoint": 1971,
									"id": 1104,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@setToken_1089": {
									"entryPoint": 698,
									"id": 1089,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@startClaimingRound_988": {
									"entryPoint": null,
									"id": 988,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@token_982": {
									"entryPoint": null,
									"id": 982,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_126": {
									"entryPoint": 2305,
									"id": 126,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@treasury_984": {
									"entryPoint": null,
									"id": 984,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@unClaimedTokenToTreasury_1287": {
									"entryPoint": 2065,
									"id": 1287,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@unpause_1305": {
									"entryPoint": 1727,
									"id": 1305,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@verifyUser_1160": {
									"entryPoint": 1831,
									"id": 1160,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@verify_455": {
									"entryPoint": 2574,
									"id": 455,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 3011,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_array_bytes32_dyn_calldata": {
									"entryPoint": 3063,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3038,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr": {
									"entryPoint": 3230,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 3370,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3207,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 3347,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_array$_t_bytes32_$dyn_calldata_ptr": {
									"entryPoint": 3135,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_23bc11b9652f987eff8045f5fbefd0a7a6e0feeed7ac640e905989decdc052c6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_61a85e5c7ff10d61e0d485a3a109c122858fc92abbf7d6216873950f0d5aedcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_8d5f1075ee9cf123a11fed45e62459547c318d7703b4e3920694b01d6b8c6dcf__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ef35312ab5edf5b6a3e679741e49a97912d1142319a2ff11ab578776f752b342__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f6657e4d1cfe337fdb58cc2af2fa00dc813b20940f609425939a74aa165269ab__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3316,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x32": {
									"entryPoint": 3401,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:7683:7",
										"nodeType": "YulBlock",
										"src": "0:7683:7",
										"statements": [
											{
												"nativeSrc": "6:3:7",
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "63:124:7",
													"nodeType": "YulBlock",
													"src": "63:124:7",
													"statements": [
														{
															"nativeSrc": "73:29:7",
															"nodeType": "YulAssignment",
															"src": "73:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "95:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "82:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:7"
																},
																"nativeSrc": "82:20:7",
																"nodeType": "YulFunctionCall",
																"src": "82:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "73:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:7"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "165:16:7",
																"nodeType": "YulBlock",
																"src": "165:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "174:1:7",
																					"nodeType": "YulLiteral",
																					"src": "174:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "177:1:7",
																					"nodeType": "YulLiteral",
																					"src": "177:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "167:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:7"
																			},
																			"nativeSrc": "167:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:7"
																		},
																		"nativeSrc": "167:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "124:5:7",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "135:5:7",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "150:3:7",
																										"nodeType": "YulLiteral",
																										"src": "150:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "155:1:7",
																										"nodeType": "YulLiteral",
																										"src": "155:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "146:3:7",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:7"
																								},
																								"nativeSrc": "146:11:7",
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:7"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "159:1:7",
																								"nodeType": "YulLiteral",
																								"src": "159:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "142:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:7"
																						},
																						"nativeSrc": "142:19:7",
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "131:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:7"
																				},
																				"nativeSrc": "131:31:7",
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "121:2:7",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:7"
																		},
																		"nativeSrc": "121:42:7",
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "114:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:7"
																},
																"nativeSrc": "114:50:7",
																"nodeType": "YulFunctionCall",
																"src": "114:50:7"
															},
															"nativeSrc": "111:70:7",
															"nodeType": "YulIf",
															"src": "111:70:7"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "14:173:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "42:6:7",
														"nodeType": "YulTypedName",
														"src": "42:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "53:5:7",
														"nodeType": "YulTypedName",
														"src": "53:5:7",
														"type": ""
													}
												],
												"src": "14:173:7"
											},
											{
												"body": {
													"nativeSrc": "262:116:7",
													"nodeType": "YulBlock",
													"src": "262:116:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "308:16:7",
																"nodeType": "YulBlock",
																"src": "308:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "317:1:7",
																					"nodeType": "YulLiteral",
																					"src": "317:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "320:1:7",
																					"nodeType": "YulLiteral",
																					"src": "320:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "310:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:7"
																			},
																			"nativeSrc": "310:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "310:12:7"
																		},
																		"nativeSrc": "310:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "310:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "283:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "292:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "279:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:7"
																		},
																		"nativeSrc": "279:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "304:2:7",
																		"nodeType": "YulLiteral",
																		"src": "304:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "275:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:7"
																},
																"nativeSrc": "275:32:7",
																"nodeType": "YulFunctionCall",
																"src": "275:32:7"
															},
															"nativeSrc": "272:52:7",
															"nodeType": "YulIf",
															"src": "272:52:7"
														},
														{
															"nativeSrc": "333:39:7",
															"nodeType": "YulAssignment",
															"src": "333:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "362:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "362:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "343:18:7",
																	"nodeType": "YulIdentifier",
																	"src": "343:18:7"
																},
																"nativeSrc": "343:29:7",
																"nodeType": "YulFunctionCall",
																"src": "343:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "333:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "333:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "192:186:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "228:9:7",
														"nodeType": "YulTypedName",
														"src": "228:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "239:7:7",
														"nodeType": "YulTypedName",
														"src": "239:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "251:6:7",
														"nodeType": "YulTypedName",
														"src": "251:6:7",
														"type": ""
													}
												],
												"src": "192:186:7"
											},
											{
												"body": {
													"nativeSrc": "484:76:7",
													"nodeType": "YulBlock",
													"src": "484:76:7",
													"statements": [
														{
															"nativeSrc": "494:26:7",
															"nodeType": "YulAssignment",
															"src": "494:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "506:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "506:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "517:2:7",
																		"nodeType": "YulLiteral",
																		"src": "517:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "502:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "502:3:7"
																},
																"nativeSrc": "502:18:7",
																"nodeType": "YulFunctionCall",
																"src": "502:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "494:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "494:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "536:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "536:9:7"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "547:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "547:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "529:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "529:6:7"
																},
																"nativeSrc": "529:25:7",
																"nodeType": "YulFunctionCall",
																"src": "529:25:7"
															},
															"nativeSrc": "529:25:7",
															"nodeType": "YulExpressionStatement",
															"src": "529:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nativeSrc": "383:177:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "453:9:7",
														"nodeType": "YulTypedName",
														"src": "453:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "464:6:7",
														"nodeType": "YulTypedName",
														"src": "464:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "475:4:7",
														"nodeType": "YulTypedName",
														"src": "475:4:7",
														"type": ""
													}
												],
												"src": "383:177:7"
											},
											{
												"body": {
													"nativeSrc": "649:283:7",
													"nodeType": "YulBlock",
													"src": "649:283:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "698:16:7",
																"nodeType": "YulBlock",
																"src": "698:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "707:1:7",
																					"nodeType": "YulLiteral",
																					"src": "707:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "710:1:7",
																					"nodeType": "YulLiteral",
																					"src": "710:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "700:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "700:6:7"
																			},
																			"nativeSrc": "700:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "700:12:7"
																		},
																		"nativeSrc": "700:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "700:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "677:6:7",
																						"nodeType": "YulIdentifier",
																						"src": "677:6:7"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "685:4:7",
																						"nodeType": "YulLiteral",
																						"src": "685:4:7",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "673:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "673:3:7"
																				},
																				"nativeSrc": "673:17:7",
																				"nodeType": "YulFunctionCall",
																				"src": "673:17:7"
																			},
																			{
																				"name": "end",
																				"nativeSrc": "692:3:7",
																				"nodeType": "YulIdentifier",
																				"src": "692:3:7"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "669:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "669:3:7"
																		},
																		"nativeSrc": "669:27:7",
																		"nodeType": "YulFunctionCall",
																		"src": "669:27:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "662:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "662:6:7"
																},
																"nativeSrc": "662:35:7",
																"nodeType": "YulFunctionCall",
																"src": "662:35:7"
															},
															"nativeSrc": "659:55:7",
															"nodeType": "YulIf",
															"src": "659:55:7"
														},
														{
															"nativeSrc": "723:30:7",
															"nodeType": "YulAssignment",
															"src": "723:30:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "746:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "746:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "733:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "733:12:7"
																},
																"nativeSrc": "733:20:7",
																"nodeType": "YulFunctionCall",
																"src": "733:20:7"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "723:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "723:6:7"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "796:16:7",
																"nodeType": "YulBlock",
																"src": "796:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "805:1:7",
																					"nodeType": "YulLiteral",
																					"src": "805:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "808:1:7",
																					"nodeType": "YulLiteral",
																					"src": "808:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "798:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "798:6:7"
																			},
																			"nativeSrc": "798:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "798:12:7"
																		},
																		"nativeSrc": "798:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "798:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "768:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "768:6:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "776:18:7",
																		"nodeType": "YulLiteral",
																		"src": "776:18:7",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "765:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "765:2:7"
																},
																"nativeSrc": "765:30:7",
																"nodeType": "YulFunctionCall",
																"src": "765:30:7"
															},
															"nativeSrc": "762:50:7",
															"nodeType": "YulIf",
															"src": "762:50:7"
														},
														{
															"nativeSrc": "821:29:7",
															"nodeType": "YulAssignment",
															"src": "821:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "837:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "837:6:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "845:4:7",
																		"nodeType": "YulLiteral",
																		"src": "845:4:7",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "833:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "833:3:7"
																},
																"nativeSrc": "833:17:7",
																"nodeType": "YulFunctionCall",
																"src": "833:17:7"
															},
															"variableNames": [
																{
																	"name": "arrayPos",
																	"nativeSrc": "821:8:7",
																	"nodeType": "YulIdentifier",
																	"src": "821:8:7"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "910:16:7",
																"nodeType": "YulBlock",
																"src": "910:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "919:1:7",
																					"nodeType": "YulLiteral",
																					"src": "919:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "922:1:7",
																					"nodeType": "YulLiteral",
																					"src": "922:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "912:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "912:6:7"
																			},
																			"nativeSrc": "912:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "912:12:7"
																		},
																		"nativeSrc": "912:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "912:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "873:6:7",
																						"nodeType": "YulIdentifier",
																						"src": "873:6:7"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "885:1:7",
																								"nodeType": "YulLiteral",
																								"src": "885:1:7",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nativeSrc": "888:6:7",
																								"nodeType": "YulIdentifier",
																								"src": "888:6:7"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "881:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "881:3:7"
																						},
																						"nativeSrc": "881:14:7",
																						"nodeType": "YulFunctionCall",
																						"src": "881:14:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "869:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "869:3:7"
																				},
																				"nativeSrc": "869:27:7",
																				"nodeType": "YulFunctionCall",
																				"src": "869:27:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "898:4:7",
																				"nodeType": "YulLiteral",
																				"src": "898:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "865:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "865:3:7"
																		},
																		"nativeSrc": "865:38:7",
																		"nodeType": "YulFunctionCall",
																		"src": "865:38:7"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "905:3:7",
																		"nodeType": "YulIdentifier",
																		"src": "905:3:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "862:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "862:2:7"
																},
																"nativeSrc": "862:47:7",
																"nodeType": "YulFunctionCall",
																"src": "862:47:7"
															},
															"nativeSrc": "859:67:7",
															"nodeType": "YulIf",
															"src": "859:67:7"
														}
													]
												},
												"name": "abi_decode_array_bytes32_dyn_calldata",
												"nativeSrc": "565:367:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "612:6:7",
														"nodeType": "YulTypedName",
														"src": "612:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "620:3:7",
														"nodeType": "YulTypedName",
														"src": "620:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "arrayPos",
														"nativeSrc": "628:8:7",
														"nodeType": "YulTypedName",
														"src": "628:8:7",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "638:6:7",
														"nodeType": "YulTypedName",
														"src": "638:6:7",
														"type": ""
													}
												],
												"src": "565:367:7"
											},
											{
												"body": {
													"nativeSrc": "1059:429:7",
													"nodeType": "YulBlock",
													"src": "1059:429:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "1105:16:7",
																"nodeType": "YulBlock",
																"src": "1105:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1114:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1114:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1117:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1117:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1107:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "1107:6:7"
																			},
																			"nativeSrc": "1107:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "1107:12:7"
																		},
																		"nativeSrc": "1107:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "1107:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1080:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "1080:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1089:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1089:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1076:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1076:3:7"
																		},
																		"nativeSrc": "1076:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1076:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1101:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1101:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1072:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1072:3:7"
																},
																"nativeSrc": "1072:32:7",
																"nodeType": "YulFunctionCall",
																"src": "1072:32:7"
															},
															"nativeSrc": "1069:52:7",
															"nodeType": "YulIf",
															"src": "1069:52:7"
														},
														{
															"nativeSrc": "1130:14:7",
															"nodeType": "YulVariableDeclaration",
															"src": "1130:14:7",
															"value": {
																"kind": "number",
																"nativeSrc": "1143:1:7",
																"nodeType": "YulLiteral",
																"src": "1143:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1134:5:7",
																	"nodeType": "YulTypedName",
																	"src": "1134:5:7",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1153:32:7",
															"nodeType": "YulAssignment",
															"src": "1153:32:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1175:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1175:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1162:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "1162:12:7"
																},
																"nativeSrc": "1162:23:7",
																"nodeType": "YulFunctionCall",
																"src": "1162:23:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1153:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "1153:5:7"
																}
															]
														},
														{
															"nativeSrc": "1194:15:7",
															"nodeType": "YulAssignment",
															"src": "1194:15:7",
															"value": {
																"name": "value",
																"nativeSrc": "1204:5:7",
																"nodeType": "YulIdentifier",
																"src": "1204:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1194:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1194:6:7"
																}
															]
														},
														{
															"nativeSrc": "1218:46:7",
															"nodeType": "YulVariableDeclaration",
															"src": "1218:46:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1249:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1249:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1260:2:7",
																				"nodeType": "YulLiteral",
																				"src": "1260:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1245:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1245:3:7"
																		},
																		"nativeSrc": "1245:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1245:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1232:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "1232:12:7"
																},
																"nativeSrc": "1232:32:7",
																"nodeType": "YulFunctionCall",
																"src": "1232:32:7"
															},
															"variables": [
																{
																	"name": "offset",
																	"nativeSrc": "1222:6:7",
																	"nodeType": "YulTypedName",
																	"src": "1222:6:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1307:16:7",
																"nodeType": "YulBlock",
																"src": "1307:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1316:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1316:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1319:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1319:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1309:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "1309:6:7"
																			},
																			"nativeSrc": "1309:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "1309:12:7"
																		},
																		"nativeSrc": "1309:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "1309:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "1279:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "1279:6:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1287:18:7",
																		"nodeType": "YulLiteral",
																		"src": "1287:18:7",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1276:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "1276:2:7"
																},
																"nativeSrc": "1276:30:7",
																"nodeType": "YulFunctionCall",
																"src": "1276:30:7"
															},
															"nativeSrc": "1273:50:7",
															"nodeType": "YulIf",
															"src": "1273:50:7"
														},
														{
															"nativeSrc": "1332:96:7",
															"nodeType": "YulVariableDeclaration",
															"src": "1332:96:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1400:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1400:9:7"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "1411:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "1411:6:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1396:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1396:3:7"
																		},
																		"nativeSrc": "1396:22:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1396:22:7"
																	},
																	{
																		"name": "dataEnd",
																		"nativeSrc": "1420:7:7",
																		"nodeType": "YulIdentifier",
																		"src": "1420:7:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_array_bytes32_dyn_calldata",
																	"nativeSrc": "1358:37:7",
																	"nodeType": "YulIdentifier",
																	"src": "1358:37:7"
																},
																"nativeSrc": "1358:70:7",
																"nodeType": "YulFunctionCall",
																"src": "1358:70:7"
															},
															"variables": [
																{
																	"name": "value1_1",
																	"nativeSrc": "1336:8:7",
																	"nodeType": "YulTypedName",
																	"src": "1336:8:7",
																	"type": ""
																},
																{
																	"name": "value2_1",
																	"nativeSrc": "1346:8:7",
																	"nodeType": "YulTypedName",
																	"src": "1346:8:7",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1437:18:7",
															"nodeType": "YulAssignment",
															"src": "1437:18:7",
															"value": {
																"name": "value1_1",
																"nativeSrc": "1447:8:7",
																"nodeType": "YulIdentifier",
																"src": "1447:8:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1437:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1437:6:7"
																}
															]
														},
														{
															"nativeSrc": "1464:18:7",
															"nodeType": "YulAssignment",
															"src": "1464:18:7",
															"value": {
																"name": "value2_1",
																"nativeSrc": "1474:8:7",
																"nodeType": "YulIdentifier",
																"src": "1474:8:7"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1464:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1464:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_array$_t_bytes32_$dyn_calldata_ptr",
												"nativeSrc": "937:551:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1009:9:7",
														"nodeType": "YulTypedName",
														"src": "1009:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1020:7:7",
														"nodeType": "YulTypedName",
														"src": "1020:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1032:6:7",
														"nodeType": "YulTypedName",
														"src": "1032:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1040:6:7",
														"nodeType": "YulTypedName",
														"src": "1040:6:7",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1048:6:7",
														"nodeType": "YulTypedName",
														"src": "1048:6:7",
														"type": ""
													}
												],
												"src": "937:551:7"
											},
											{
												"body": {
													"nativeSrc": "1594:76:7",
													"nodeType": "YulBlock",
													"src": "1594:76:7",
													"statements": [
														{
															"nativeSrc": "1604:26:7",
															"nodeType": "YulAssignment",
															"src": "1604:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1616:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1616:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1627:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1627:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1612:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1612:3:7"
																},
																"nativeSrc": "1612:18:7",
																"nodeType": "YulFunctionCall",
																"src": "1612:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1604:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "1604:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1646:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1646:9:7"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "1657:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "1657:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1639:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1639:6:7"
																},
																"nativeSrc": "1639:25:7",
																"nodeType": "YulFunctionCall",
																"src": "1639:25:7"
															},
															"nativeSrc": "1639:25:7",
															"nodeType": "YulExpressionStatement",
															"src": "1639:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "1493:177:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1563:9:7",
														"nodeType": "YulTypedName",
														"src": "1563:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1574:6:7",
														"nodeType": "YulTypedName",
														"src": "1574:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1585:4:7",
														"nodeType": "YulTypedName",
														"src": "1585:4:7",
														"type": ""
													}
												],
												"src": "1493:177:7"
											},
											{
												"body": {
													"nativeSrc": "1770:92:7",
													"nodeType": "YulBlock",
													"src": "1770:92:7",
													"statements": [
														{
															"nativeSrc": "1780:26:7",
															"nodeType": "YulAssignment",
															"src": "1780:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1792:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1792:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1803:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1803:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1788:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1788:3:7"
																},
																"nativeSrc": "1788:18:7",
																"nodeType": "YulFunctionCall",
																"src": "1788:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1780:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "1780:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1822:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1822:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "1847:6:7",
																						"nodeType": "YulIdentifier",
																						"src": "1847:6:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1840:6:7",
																					"nodeType": "YulIdentifier",
																					"src": "1840:6:7"
																				},
																				"nativeSrc": "1840:14:7",
																				"nodeType": "YulFunctionCall",
																				"src": "1840:14:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1833:6:7",
																			"nodeType": "YulIdentifier",
																			"src": "1833:6:7"
																		},
																		"nativeSrc": "1833:22:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1833:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1815:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1815:6:7"
																},
																"nativeSrc": "1815:41:7",
																"nodeType": "YulFunctionCall",
																"src": "1815:41:7"
															},
															"nativeSrc": "1815:41:7",
															"nodeType": "YulExpressionStatement",
															"src": "1815:41:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "1675:187:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1739:9:7",
														"nodeType": "YulTypedName",
														"src": "1739:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1750:6:7",
														"nodeType": "YulTypedName",
														"src": "1750:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1761:4:7",
														"nodeType": "YulTypedName",
														"src": "1761:4:7",
														"type": ""
													}
												],
												"src": "1675:187:7"
											},
											{
												"body": {
													"nativeSrc": "1937:156:7",
													"nodeType": "YulBlock",
													"src": "1937:156:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "1983:16:7",
																"nodeType": "YulBlock",
																"src": "1983:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1992:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1992:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1995:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1995:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1985:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "1985:6:7"
																			},
																			"nativeSrc": "1985:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "1985:12:7"
																		},
																		"nativeSrc": "1985:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "1985:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1958:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "1958:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1967:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1967:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1954:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1954:3:7"
																		},
																		"nativeSrc": "1954:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1954:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1979:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1979:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1950:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1950:3:7"
																},
																"nativeSrc": "1950:32:7",
																"nodeType": "YulFunctionCall",
																"src": "1950:32:7"
															},
															"nativeSrc": "1947:52:7",
															"nodeType": "YulIf",
															"src": "1947:52:7"
														},
														{
															"nativeSrc": "2008:14:7",
															"nodeType": "YulVariableDeclaration",
															"src": "2008:14:7",
															"value": {
																"kind": "number",
																"nativeSrc": "2021:1:7",
																"nodeType": "YulLiteral",
																"src": "2021:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "2012:5:7",
																	"nodeType": "YulTypedName",
																	"src": "2012:5:7",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2031:32:7",
															"nodeType": "YulAssignment",
															"src": "2031:32:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2053:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "2053:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2040:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "2040:12:7"
																},
																"nativeSrc": "2040:23:7",
																"nodeType": "YulFunctionCall",
																"src": "2040:23:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2031:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "2031:5:7"
																}
															]
														},
														{
															"nativeSrc": "2072:15:7",
															"nodeType": "YulAssignment",
															"src": "2072:15:7",
															"value": {
																"name": "value",
																"nativeSrc": "2082:5:7",
																"nodeType": "YulIdentifier",
																"src": "2082:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2072:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2072:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "1867:226:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1903:9:7",
														"nodeType": "YulTypedName",
														"src": "1903:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1914:7:7",
														"nodeType": "YulTypedName",
														"src": "1914:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1926:6:7",
														"nodeType": "YulTypedName",
														"src": "1926:6:7",
														"type": ""
													}
												],
												"src": "1867:226:7"
											},
											{
												"body": {
													"nativeSrc": "2199:102:7",
													"nodeType": "YulBlock",
													"src": "2199:102:7",
													"statements": [
														{
															"nativeSrc": "2209:26:7",
															"nodeType": "YulAssignment",
															"src": "2209:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2221:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "2221:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2232:2:7",
																		"nodeType": "YulLiteral",
																		"src": "2232:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2217:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "2217:3:7"
																},
																"nativeSrc": "2217:18:7",
																"nodeType": "YulFunctionCall",
																"src": "2217:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2209:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "2209:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2251:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "2251:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2266:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2266:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "2282:3:7",
																								"nodeType": "YulLiteral",
																								"src": "2282:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "2287:1:7",
																								"nodeType": "YulLiteral",
																								"src": "2287:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "2278:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "2278:3:7"
																						},
																						"nativeSrc": "2278:11:7",
																						"nodeType": "YulFunctionCall",
																						"src": "2278:11:7"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2291:1:7",
																						"nodeType": "YulLiteral",
																						"src": "2291:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "2274:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "2274:3:7"
																				},
																				"nativeSrc": "2274:19:7",
																				"nodeType": "YulFunctionCall",
																				"src": "2274:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2262:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "2262:3:7"
																		},
																		"nativeSrc": "2262:32:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2262:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2244:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2244:6:7"
																},
																"nativeSrc": "2244:51:7",
																"nodeType": "YulFunctionCall",
																"src": "2244:51:7"
															},
															"nativeSrc": "2244:51:7",
															"nodeType": "YulExpressionStatement",
															"src": "2244:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "2098:203:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2168:9:7",
														"nodeType": "YulTypedName",
														"src": "2168:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2179:6:7",
														"nodeType": "YulTypedName",
														"src": "2179:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2190:4:7",
														"nodeType": "YulTypedName",
														"src": "2190:4:7",
														"type": ""
													}
												],
												"src": "2098:203:7"
											},
											{
												"body": {
													"nativeSrc": "2376:110:7",
													"nodeType": "YulBlock",
													"src": "2376:110:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "2422:16:7",
																"nodeType": "YulBlock",
																"src": "2422:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2431:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2431:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2434:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2434:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2424:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2424:6:7"
																			},
																			"nativeSrc": "2424:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "2424:12:7"
																		},
																		"nativeSrc": "2424:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "2424:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2397:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "2397:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2406:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "2406:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2393:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "2393:3:7"
																		},
																		"nativeSrc": "2393:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2393:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2418:2:7",
																		"nodeType": "YulLiteral",
																		"src": "2418:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2389:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "2389:3:7"
																},
																"nativeSrc": "2389:32:7",
																"nodeType": "YulFunctionCall",
																"src": "2389:32:7"
															},
															"nativeSrc": "2386:52:7",
															"nodeType": "YulIf",
															"src": "2386:52:7"
														},
														{
															"nativeSrc": "2447:33:7",
															"nodeType": "YulAssignment",
															"src": "2447:33:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2470:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "2470:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2457:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "2457:12:7"
																},
																"nativeSrc": "2457:23:7",
																"nodeType": "YulFunctionCall",
																"src": "2457:23:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2447:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2447:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nativeSrc": "2306:180:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2342:9:7",
														"nodeType": "YulTypedName",
														"src": "2342:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2353:7:7",
														"nodeType": "YulTypedName",
														"src": "2353:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2365:6:7",
														"nodeType": "YulTypedName",
														"src": "2365:6:7",
														"type": ""
													}
												],
												"src": "2306:180:7"
											},
											{
												"body": {
													"nativeSrc": "2630:486:7",
													"nodeType": "YulBlock",
													"src": "2630:486:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "2676:16:7",
																"nodeType": "YulBlock",
																"src": "2676:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2685:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2685:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2688:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2688:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2678:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2678:6:7"
																			},
																			"nativeSrc": "2678:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "2678:12:7"
																		},
																		"nativeSrc": "2678:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "2678:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2651:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "2651:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2660:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "2660:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2647:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "2647:3:7"
																		},
																		"nativeSrc": "2647:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2647:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2672:2:7",
																		"nodeType": "YulLiteral",
																		"src": "2672:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2643:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "2643:3:7"
																},
																"nativeSrc": "2643:32:7",
																"nodeType": "YulFunctionCall",
																"src": "2643:32:7"
															},
															"nativeSrc": "2640:52:7",
															"nodeType": "YulIf",
															"src": "2640:52:7"
														},
														{
															"nativeSrc": "2701:39:7",
															"nodeType": "YulAssignment",
															"src": "2701:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2730:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "2730:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2711:18:7",
																	"nodeType": "YulIdentifier",
																	"src": "2711:18:7"
																},
																"nativeSrc": "2711:29:7",
																"nodeType": "YulFunctionCall",
																"src": "2711:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2701:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2701:6:7"
																}
															]
														},
														{
															"nativeSrc": "2749:14:7",
															"nodeType": "YulVariableDeclaration",
															"src": "2749:14:7",
															"value": {
																"kind": "number",
																"nativeSrc": "2762:1:7",
																"nodeType": "YulLiteral",
																"src": "2762:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "2753:5:7",
																	"nodeType": "YulTypedName",
																	"src": "2753:5:7",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2772:41:7",
															"nodeType": "YulAssignment",
															"src": "2772:41:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2798:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "2798:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2809:2:7",
																				"nodeType": "YulLiteral",
																				"src": "2809:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2794:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "2794:3:7"
																		},
																		"nativeSrc": "2794:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2794:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2781:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "2781:12:7"
																},
																"nativeSrc": "2781:32:7",
																"nodeType": "YulFunctionCall",
																"src": "2781:32:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2772:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "2772:5:7"
																}
															]
														},
														{
															"nativeSrc": "2822:15:7",
															"nodeType": "YulAssignment",
															"src": "2822:15:7",
															"value": {
																"name": "value",
																"nativeSrc": "2832:5:7",
																"nodeType": "YulIdentifier",
																"src": "2832:5:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "2822:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2822:6:7"
																}
															]
														},
														{
															"nativeSrc": "2846:46:7",
															"nodeType": "YulVariableDeclaration",
															"src": "2846:46:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2877:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "2877:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2888:2:7",
																				"nodeType": "YulLiteral",
																				"src": "2888:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2873:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "2873:3:7"
																		},
																		"nativeSrc": "2873:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2873:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2860:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "2860:12:7"
																},
																"nativeSrc": "2860:32:7",
																"nodeType": "YulFunctionCall",
																"src": "2860:32:7"
															},
															"variables": [
																{
																	"name": "offset",
																	"nativeSrc": "2850:6:7",
																	"nodeType": "YulTypedName",
																	"src": "2850:6:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2935:16:7",
																"nodeType": "YulBlock",
																"src": "2935:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2944:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2944:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2947:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2947:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2937:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2937:6:7"
																			},
																			"nativeSrc": "2937:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "2937:12:7"
																		},
																		"nativeSrc": "2937:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "2937:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2907:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "2907:6:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2915:18:7",
																		"nodeType": "YulLiteral",
																		"src": "2915:18:7",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2904:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "2904:2:7"
																},
																"nativeSrc": "2904:30:7",
																"nodeType": "YulFunctionCall",
																"src": "2904:30:7"
															},
															"nativeSrc": "2901:50:7",
															"nodeType": "YulIf",
															"src": "2901:50:7"
														},
														{
															"nativeSrc": "2960:96:7",
															"nodeType": "YulVariableDeclaration",
															"src": "2960:96:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3028:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "3028:9:7"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "3039:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "3039:6:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3024:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3024:3:7"
																		},
																		"nativeSrc": "3024:22:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3024:22:7"
																	},
																	{
																		"name": "dataEnd",
																		"nativeSrc": "3048:7:7",
																		"nodeType": "YulIdentifier",
																		"src": "3048:7:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_array_bytes32_dyn_calldata",
																	"nativeSrc": "2986:37:7",
																	"nodeType": "YulIdentifier",
																	"src": "2986:37:7"
																},
																"nativeSrc": "2986:70:7",
																"nodeType": "YulFunctionCall",
																"src": "2986:70:7"
															},
															"variables": [
																{
																	"name": "value2_1",
																	"nativeSrc": "2964:8:7",
																	"nodeType": "YulTypedName",
																	"src": "2964:8:7",
																	"type": ""
																},
																{
																	"name": "value3_1",
																	"nativeSrc": "2974:8:7",
																	"nodeType": "YulTypedName",
																	"src": "2974:8:7",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3065:18:7",
															"nodeType": "YulAssignment",
															"src": "3065:18:7",
															"value": {
																"name": "value2_1",
																"nativeSrc": "3075:8:7",
																"nodeType": "YulIdentifier",
																"src": "3075:8:7"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "3065:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3065:6:7"
																}
															]
														},
														{
															"nativeSrc": "3092:18:7",
															"nodeType": "YulAssignment",
															"src": "3092:18:7",
															"value": {
																"name": "value3_1",
																"nativeSrc": "3102:8:7",
																"nodeType": "YulIdentifier",
																"src": "3102:8:7"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nativeSrc": "3092:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3092:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr",
												"nativeSrc": "2491:625:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2572:9:7",
														"nodeType": "YulTypedName",
														"src": "2572:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2583:7:7",
														"nodeType": "YulTypedName",
														"src": "2583:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2595:6:7",
														"nodeType": "YulTypedName",
														"src": "2595:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2603:6:7",
														"nodeType": "YulTypedName",
														"src": "2603:6:7",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "2611:6:7",
														"nodeType": "YulTypedName",
														"src": "2611:6:7",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "2619:6:7",
														"nodeType": "YulTypedName",
														"src": "2619:6:7",
														"type": ""
													}
												],
												"src": "2491:625:7"
											},
											{
												"body": {
													"nativeSrc": "3295:173:7",
													"nodeType": "YulBlock",
													"src": "3295:173:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3312:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3312:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3323:2:7",
																		"nodeType": "YulLiteral",
																		"src": "3323:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3305:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3305:6:7"
																},
																"nativeSrc": "3305:21:7",
																"nodeType": "YulFunctionCall",
																"src": "3305:21:7"
															},
															"nativeSrc": "3305:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "3305:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3346:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "3346:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3357:2:7",
																				"nodeType": "YulLiteral",
																				"src": "3357:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3342:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3342:3:7"
																		},
																		"nativeSrc": "3342:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3342:18:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3362:2:7",
																		"nodeType": "YulLiteral",
																		"src": "3362:2:7",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3335:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3335:6:7"
																},
																"nativeSrc": "3335:30:7",
																"nodeType": "YulFunctionCall",
																"src": "3335:30:7"
															},
															"nativeSrc": "3335:30:7",
															"nodeType": "YulExpressionStatement",
															"src": "3335:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3385:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "3385:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3396:2:7",
																				"nodeType": "YulLiteral",
																				"src": "3396:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3381:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3381:3:7"
																		},
																		"nativeSrc": "3381:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3381:18:7"
																	},
																	{
																		"hexValue": "546f6b656e2073686f756c646e2774206265207a65726f",
																		"kind": "string",
																		"nativeSrc": "3401:25:7",
																		"nodeType": "YulLiteral",
																		"src": "3401:25:7",
																		"type": "",
																		"value": "Token shouldn't be zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3374:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3374:6:7"
																},
																"nativeSrc": "3374:53:7",
																"nodeType": "YulFunctionCall",
																"src": "3374:53:7"
															},
															"nativeSrc": "3374:53:7",
															"nodeType": "YulExpressionStatement",
															"src": "3374:53:7"
														},
														{
															"nativeSrc": "3436:26:7",
															"nodeType": "YulAssignment",
															"src": "3436:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3448:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3448:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3459:2:7",
																		"nodeType": "YulLiteral",
																		"src": "3459:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3444:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3444:3:7"
																},
																"nativeSrc": "3444:18:7",
																"nodeType": "YulFunctionCall",
																"src": "3444:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3436:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "3436:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_61a85e5c7ff10d61e0d485a3a109c122858fc92abbf7d6216873950f0d5aedcd__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "3121:347:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3272:9:7",
														"nodeType": "YulTypedName",
														"src": "3272:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3286:4:7",
														"nodeType": "YulTypedName",
														"src": "3286:4:7",
														"type": ""
													}
												],
												"src": "3121:347:7"
											},
											{
												"body": {
													"nativeSrc": "3521:174:7",
													"nodeType": "YulBlock",
													"src": "3521:174:7",
													"statements": [
														{
															"nativeSrc": "3531:16:7",
															"nodeType": "YulAssignment",
															"src": "3531:16:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3542:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "3542:1:7"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "3545:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "3545:1:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3538:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3538:3:7"
																},
																"nativeSrc": "3538:9:7",
																"nodeType": "YulFunctionCall",
																"src": "3538:9:7"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "3531:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3531:3:7"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3578:111:7",
																"nodeType": "YulBlock",
																"src": "3578:111:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3599:1:7",
																					"nodeType": "YulLiteral",
																					"src": "3599:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "3606:3:7",
																							"nodeType": "YulLiteral",
																							"src": "3606:3:7",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "3611:10:7",
																							"nodeType": "YulLiteral",
																							"src": "3611:10:7",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "3602:3:7",
																						"nodeType": "YulIdentifier",
																						"src": "3602:3:7"
																					},
																					"nativeSrc": "3602:20:7",
																					"nodeType": "YulFunctionCall",
																					"src": "3602:20:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3592:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "3592:6:7"
																			},
																			"nativeSrc": "3592:31:7",
																			"nodeType": "YulFunctionCall",
																			"src": "3592:31:7"
																		},
																		"nativeSrc": "3592:31:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "3592:31:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3643:1:7",
																					"nodeType": "YulLiteral",
																					"src": "3643:1:7",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3646:4:7",
																					"nodeType": "YulLiteral",
																					"src": "3646:4:7",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3636:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "3636:6:7"
																			},
																			"nativeSrc": "3636:15:7",
																			"nodeType": "YulFunctionCall",
																			"src": "3636:15:7"
																		},
																		"nativeSrc": "3636:15:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "3636:15:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3671:1:7",
																					"nodeType": "YulLiteral",
																					"src": "3671:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3674:4:7",
																					"nodeType": "YulLiteral",
																					"src": "3674:4:7",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3664:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "3664:6:7"
																			},
																			"nativeSrc": "3664:15:7",
																			"nodeType": "YulFunctionCall",
																			"src": "3664:15:7"
																		},
																		"nativeSrc": "3664:15:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "3664:15:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3562:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "3562:1:7"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "3565:3:7",
																		"nodeType": "YulIdentifier",
																		"src": "3565:3:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3559:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "3559:2:7"
																},
																"nativeSrc": "3559:10:7",
																"nodeType": "YulFunctionCall",
																"src": "3559:10:7"
															},
															"nativeSrc": "3556:133:7",
															"nodeType": "YulIf",
															"src": "3556:133:7"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "3473:222:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "3504:1:7",
														"nodeType": "YulTypedName",
														"src": "3504:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "3507:1:7",
														"nodeType": "YulTypedName",
														"src": "3507:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "3513:3:7",
														"nodeType": "YulTypedName",
														"src": "3513:3:7",
														"type": ""
													}
												],
												"src": "3473:222:7"
											},
											{
												"body": {
													"nativeSrc": "3874:175:7",
													"nodeType": "YulBlock",
													"src": "3874:175:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3891:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3891:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3902:2:7",
																		"nodeType": "YulLiteral",
																		"src": "3902:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3884:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3884:6:7"
																},
																"nativeSrc": "3884:21:7",
																"nodeType": "YulFunctionCall",
																"src": "3884:21:7"
															},
															"nativeSrc": "3884:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "3884:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3925:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "3925:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3936:2:7",
																				"nodeType": "YulLiteral",
																				"src": "3936:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3921:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3921:3:7"
																		},
																		"nativeSrc": "3921:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3921:18:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3941:2:7",
																		"nodeType": "YulLiteral",
																		"src": "3941:2:7",
																		"type": "",
																		"value": "25"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3914:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3914:6:7"
																},
																"nativeSrc": "3914:30:7",
																"nodeType": "YulFunctionCall",
																"src": "3914:30:7"
															},
															"nativeSrc": "3914:30:7",
															"nodeType": "YulExpressionStatement",
															"src": "3914:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3964:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "3964:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3975:2:7",
																				"nodeType": "YulLiteral",
																				"src": "3975:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3960:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3960:3:7"
																		},
																		"nativeSrc": "3960:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3960:18:7"
																	},
																	{
																		"hexValue": "4974206973206e6f20706572696f6420746f20636c61696d21",
																		"kind": "string",
																		"nativeSrc": "3980:27:7",
																		"nodeType": "YulLiteral",
																		"src": "3980:27:7",
																		"type": "",
																		"value": "It is no period to claim!"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3953:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3953:6:7"
																},
																"nativeSrc": "3953:55:7",
																"nodeType": "YulFunctionCall",
																"src": "3953:55:7"
															},
															"nativeSrc": "3953:55:7",
															"nodeType": "YulExpressionStatement",
															"src": "3953:55:7"
														},
														{
															"nativeSrc": "4017:26:7",
															"nodeType": "YulAssignment",
															"src": "4017:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4029:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "4029:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4040:2:7",
																		"nodeType": "YulLiteral",
																		"src": "4040:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4025:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "4025:3:7"
																},
																"nativeSrc": "4025:18:7",
																"nodeType": "YulFunctionCall",
																"src": "4025:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4017:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "4017:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ef35312ab5edf5b6a3e679741e49a97912d1142319a2ff11ab578776f752b342__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "3700:349:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3851:9:7",
														"nodeType": "YulTypedName",
														"src": "3851:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3865:4:7",
														"nodeType": "YulTypedName",
														"src": "3865:4:7",
														"type": ""
													}
												],
												"src": "3700:349:7"
											},
											{
												"body": {
													"nativeSrc": "4228:165:7",
													"nodeType": "YulBlock",
													"src": "4228:165:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4245:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "4245:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4256:2:7",
																		"nodeType": "YulLiteral",
																		"src": "4256:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4238:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4238:6:7"
																},
																"nativeSrc": "4238:21:7",
																"nodeType": "YulFunctionCall",
																"src": "4238:21:7"
															},
															"nativeSrc": "4238:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "4238:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4279:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "4279:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4290:2:7",
																				"nodeType": "YulLiteral",
																				"src": "4290:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4275:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4275:3:7"
																		},
																		"nativeSrc": "4275:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4275:18:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4295:2:7",
																		"nodeType": "YulLiteral",
																		"src": "4295:2:7",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4268:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4268:6:7"
																},
																"nativeSrc": "4268:30:7",
																"nodeType": "YulFunctionCall",
																"src": "4268:30:7"
															},
															"nativeSrc": "4268:30:7",
															"nodeType": "YulExpressionStatement",
															"src": "4268:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4318:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "4318:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4329:2:7",
																				"nodeType": "YulLiteral",
																				"src": "4329:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4314:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4314:3:7"
																		},
																		"nativeSrc": "4314:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4314:18:7"
																	},
																	{
																		"hexValue": "416c726561647920636c61696d6564",
																		"kind": "string",
																		"nativeSrc": "4334:17:7",
																		"nodeType": "YulLiteral",
																		"src": "4334:17:7",
																		"type": "",
																		"value": "Already claimed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4307:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4307:6:7"
																},
																"nativeSrc": "4307:45:7",
																"nodeType": "YulFunctionCall",
																"src": "4307:45:7"
															},
															"nativeSrc": "4307:45:7",
															"nodeType": "YulExpressionStatement",
															"src": "4307:45:7"
														},
														{
															"nativeSrc": "4361:26:7",
															"nodeType": "YulAssignment",
															"src": "4361:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4373:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "4373:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4384:2:7",
																		"nodeType": "YulLiteral",
																		"src": "4384:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4369:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "4369:3:7"
																},
																"nativeSrc": "4369:18:7",
																"nodeType": "YulFunctionCall",
																"src": "4369:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4361:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "4361:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8d5f1075ee9cf123a11fed45e62459547c318d7703b4e3920694b01d6b8c6dcf__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "4054:339:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4205:9:7",
														"nodeType": "YulTypedName",
														"src": "4205:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4219:4:7",
														"nodeType": "YulTypedName",
														"src": "4219:4:7",
														"type": ""
													}
												],
												"src": "4054:339:7"
											},
											{
												"body": {
													"nativeSrc": "4545:147:7",
													"nodeType": "YulBlock",
													"src": "4545:147:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4562:3:7",
																		"nodeType": "YulIdentifier",
																		"src": "4562:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4575:2:7",
																						"nodeType": "YulLiteral",
																						"src": "4575:2:7",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value0",
																						"nativeSrc": "4579:6:7",
																						"nodeType": "YulIdentifier",
																						"src": "4579:6:7"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "4571:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "4571:3:7"
																				},
																				"nativeSrc": "4571:15:7",
																				"nodeType": "YulFunctionCall",
																				"src": "4571:15:7"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4592:26:7",
																						"nodeType": "YulLiteral",
																						"src": "4592:26:7",
																						"type": "",
																						"value": "0xffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4588:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "4588:3:7"
																				},
																				"nativeSrc": "4588:31:7",
																				"nodeType": "YulFunctionCall",
																				"src": "4588:31:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4567:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4567:3:7"
																		},
																		"nativeSrc": "4567:53:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4567:53:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4555:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4555:6:7"
																},
																"nativeSrc": "4555:66:7",
																"nodeType": "YulFunctionCall",
																"src": "4555:66:7"
															},
															"nativeSrc": "4555:66:7",
															"nodeType": "YulExpressionStatement",
															"src": "4555:66:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nativeSrc": "4641:3:7",
																				"nodeType": "YulIdentifier",
																				"src": "4641:3:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4646:2:7",
																				"nodeType": "YulLiteral",
																				"src": "4646:2:7",
																				"type": "",
																				"value": "20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4637:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4637:3:7"
																		},
																		"nativeSrc": "4637:12:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4637:12:7"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "4651:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "4651:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4630:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4630:6:7"
																},
																"nativeSrc": "4630:28:7",
																"nodeType": "YulFunctionCall",
																"src": "4630:28:7"
															},
															"nativeSrc": "4630:28:7",
															"nodeType": "YulExpressionStatement",
															"src": "4630:28:7"
														},
														{
															"nativeSrc": "4667:19:7",
															"nodeType": "YulAssignment",
															"src": "4667:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4678:3:7",
																		"nodeType": "YulIdentifier",
																		"src": "4678:3:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4683:2:7",
																		"nodeType": "YulLiteral",
																		"src": "4683:2:7",
																		"type": "",
																		"value": "52"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4674:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "4674:3:7"
																},
																"nativeSrc": "4674:12:7",
																"nodeType": "YulFunctionCall",
																"src": "4674:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "4667:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "4667:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed",
												"nativeSrc": "4398:294:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "4513:3:7",
														"nodeType": "YulTypedName",
														"src": "4513:3:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4518:6:7",
														"nodeType": "YulTypedName",
														"src": "4518:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4526:6:7",
														"nodeType": "YulTypedName",
														"src": "4526:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "4537:3:7",
														"nodeType": "YulTypedName",
														"src": "4537:3:7",
														"type": ""
													}
												],
												"src": "4398:294:7"
											},
											{
												"body": {
													"nativeSrc": "4871:163:7",
													"nodeType": "YulBlock",
													"src": "4871:163:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4888:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "4888:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4899:2:7",
																		"nodeType": "YulLiteral",
																		"src": "4899:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4881:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4881:6:7"
																},
																"nativeSrc": "4881:21:7",
																"nodeType": "YulFunctionCall",
																"src": "4881:21:7"
															},
															"nativeSrc": "4881:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "4881:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4922:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "4922:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4933:2:7",
																				"nodeType": "YulLiteral",
																				"src": "4933:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4918:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4918:3:7"
																		},
																		"nativeSrc": "4918:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4918:18:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4938:2:7",
																		"nodeType": "YulLiteral",
																		"src": "4938:2:7",
																		"type": "",
																		"value": "13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4911:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4911:6:7"
																},
																"nativeSrc": "4911:30:7",
																"nodeType": "YulFunctionCall",
																"src": "4911:30:7"
															},
															"nativeSrc": "4911:30:7",
															"nodeType": "YulExpressionStatement",
															"src": "4911:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4961:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "4961:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4972:2:7",
																				"nodeType": "YulLiteral",
																				"src": "4972:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4957:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4957:3:7"
																		},
																		"nativeSrc": "4957:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4957:18:7"
																	},
																	{
																		"hexValue": "496e76616c69642070726f6f66",
																		"kind": "string",
																		"nativeSrc": "4977:15:7",
																		"nodeType": "YulLiteral",
																		"src": "4977:15:7",
																		"type": "",
																		"value": "Invalid proof"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4950:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4950:6:7"
																},
																"nativeSrc": "4950:43:7",
																"nodeType": "YulFunctionCall",
																"src": "4950:43:7"
															},
															"nativeSrc": "4950:43:7",
															"nodeType": "YulExpressionStatement",
															"src": "4950:43:7"
														},
														{
															"nativeSrc": "5002:26:7",
															"nodeType": "YulAssignment",
															"src": "5002:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5014:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "5014:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5025:2:7",
																		"nodeType": "YulLiteral",
																		"src": "5025:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5010:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "5010:3:7"
																},
																"nativeSrc": "5010:18:7",
																"nodeType": "YulFunctionCall",
																"src": "5010:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5002:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "5002:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "4697:337:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4848:9:7",
														"nodeType": "YulTypedName",
														"src": "4848:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4862:4:7",
														"nodeType": "YulTypedName",
														"src": "4862:4:7",
														"type": ""
													}
												],
												"src": "4697:337:7"
											},
											{
												"body": {
													"nativeSrc": "5213:182:7",
													"nodeType": "YulBlock",
													"src": "5213:182:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5230:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "5230:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5241:2:7",
																		"nodeType": "YulLiteral",
																		"src": "5241:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5223:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "5223:6:7"
																},
																"nativeSrc": "5223:21:7",
																"nodeType": "YulFunctionCall",
																"src": "5223:21:7"
															},
															"nativeSrc": "5223:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "5223:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5264:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "5264:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5275:2:7",
																				"nodeType": "YulLiteral",
																				"src": "5275:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5260:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "5260:3:7"
																		},
																		"nativeSrc": "5260:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "5260:18:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5280:2:7",
																		"nodeType": "YulLiteral",
																		"src": "5280:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5253:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "5253:6:7"
																},
																"nativeSrc": "5253:30:7",
																"nodeType": "YulFunctionCall",
																"src": "5253:30:7"
															},
															"nativeSrc": "5253:30:7",
															"nodeType": "YulExpressionStatement",
															"src": "5253:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5303:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "5303:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5314:2:7",
																				"nodeType": "YulLiteral",
																				"src": "5314:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5299:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "5299:3:7"
																		},
																		"nativeSrc": "5299:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "5299:18:7"
																	},
																	{
																		"hexValue": "546f6b656e20616464726573732073686f756c646e2774206265207a65726f21",
																		"kind": "string",
																		"nativeSrc": "5319:34:7",
																		"nodeType": "YulLiteral",
																		"src": "5319:34:7",
																		"type": "",
																		"value": "Token address shouldn't be zero!"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5292:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "5292:6:7"
																},
																"nativeSrc": "5292:62:7",
																"nodeType": "YulFunctionCall",
																"src": "5292:62:7"
															},
															"nativeSrc": "5292:62:7",
															"nodeType": "YulExpressionStatement",
															"src": "5292:62:7"
														},
														{
															"nativeSrc": "5363:26:7",
															"nodeType": "YulAssignment",
															"src": "5363:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5375:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "5375:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5386:2:7",
																		"nodeType": "YulLiteral",
																		"src": "5386:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5371:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "5371:3:7"
																},
																"nativeSrc": "5371:18:7",
																"nodeType": "YulFunctionCall",
																"src": "5371:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5363:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "5363:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_23bc11b9652f987eff8045f5fbefd0a7a6e0feeed7ac640e905989decdc052c6__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "5039:356:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5190:9:7",
														"nodeType": "YulTypedName",
														"src": "5190:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5204:4:7",
														"nodeType": "YulTypedName",
														"src": "5204:4:7",
														"type": ""
													}
												],
												"src": "5039:356:7"
											},
											{
												"body": {
													"nativeSrc": "5481:103:7",
													"nodeType": "YulBlock",
													"src": "5481:103:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "5527:16:7",
																"nodeType": "YulBlock",
																"src": "5527:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5536:1:7",
																					"nodeType": "YulLiteral",
																					"src": "5536:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5539:1:7",
																					"nodeType": "YulLiteral",
																					"src": "5539:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "5529:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "5529:6:7"
																			},
																			"nativeSrc": "5529:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "5529:12:7"
																		},
																		"nativeSrc": "5529:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "5529:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5502:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "5502:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5511:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "5511:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5498:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "5498:3:7"
																		},
																		"nativeSrc": "5498:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "5498:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5523:2:7",
																		"nodeType": "YulLiteral",
																		"src": "5523:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5494:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "5494:3:7"
																},
																"nativeSrc": "5494:32:7",
																"nodeType": "YulFunctionCall",
																"src": "5494:32:7"
															},
															"nativeSrc": "5491:52:7",
															"nodeType": "YulIf",
															"src": "5491:52:7"
														},
														{
															"nativeSrc": "5552:26:7",
															"nodeType": "YulAssignment",
															"src": "5552:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5568:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "5568:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5562:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "5562:5:7"
																},
																"nativeSrc": "5562:16:7",
																"nodeType": "YulFunctionCall",
																"src": "5562:16:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "5552:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "5552:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nativeSrc": "5400:184:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5447:9:7",
														"nodeType": "YulTypedName",
														"src": "5447:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5458:7:7",
														"nodeType": "YulTypedName",
														"src": "5458:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5470:6:7",
														"nodeType": "YulTypedName",
														"src": "5470:6:7",
														"type": ""
													}
												],
												"src": "5400:184:7"
											},
											{
												"body": {
													"nativeSrc": "5763:171:7",
													"nodeType": "YulBlock",
													"src": "5763:171:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5780:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "5780:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5791:2:7",
																		"nodeType": "YulLiteral",
																		"src": "5791:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5773:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "5773:6:7"
																},
																"nativeSrc": "5773:21:7",
																"nodeType": "YulFunctionCall",
																"src": "5773:21:7"
															},
															"nativeSrc": "5773:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "5773:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5814:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "5814:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5825:2:7",
																				"nodeType": "YulLiteral",
																				"src": "5825:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5810:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "5810:3:7"
																		},
																		"nativeSrc": "5810:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "5810:18:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5830:2:7",
																		"nodeType": "YulLiteral",
																		"src": "5830:2:7",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5803:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "5803:6:7"
																},
																"nativeSrc": "5803:30:7",
																"nodeType": "YulFunctionCall",
																"src": "5803:30:7"
															},
															"nativeSrc": "5803:30:7",
															"nodeType": "YulExpressionStatement",
															"src": "5803:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5853:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "5853:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5864:2:7",
																				"nodeType": "YulLiteral",
																				"src": "5864:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5849:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "5849:3:7"
																		},
																		"nativeSrc": "5849:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "5849:18:7"
																	},
																	{
																		"hexValue": "496e73756666696369656e742042616c616e636521",
																		"kind": "string",
																		"nativeSrc": "5869:23:7",
																		"nodeType": "YulLiteral",
																		"src": "5869:23:7",
																		"type": "",
																		"value": "Insufficient Balance!"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5842:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "5842:6:7"
																},
																"nativeSrc": "5842:51:7",
																"nodeType": "YulFunctionCall",
																"src": "5842:51:7"
															},
															"nativeSrc": "5842:51:7",
															"nodeType": "YulExpressionStatement",
															"src": "5842:51:7"
														},
														{
															"nativeSrc": "5902:26:7",
															"nodeType": "YulAssignment",
															"src": "5902:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5914:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "5914:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5925:2:7",
																		"nodeType": "YulLiteral",
																		"src": "5925:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5910:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "5910:3:7"
																},
																"nativeSrc": "5910:18:7",
																"nodeType": "YulFunctionCall",
																"src": "5910:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5902:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "5902:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f6657e4d1cfe337fdb58cc2af2fa00dc813b20940f609425939a74aa165269ab__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "5589:345:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5740:9:7",
														"nodeType": "YulTypedName",
														"src": "5740:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5754:4:7",
														"nodeType": "YulTypedName",
														"src": "5754:4:7",
														"type": ""
													}
												],
												"src": "5589:345:7"
											},
											{
												"body": {
													"nativeSrc": "6068:145:7",
													"nodeType": "YulBlock",
													"src": "6068:145:7",
													"statements": [
														{
															"nativeSrc": "6078:26:7",
															"nodeType": "YulAssignment",
															"src": "6078:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6090:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "6090:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6101:2:7",
																		"nodeType": "YulLiteral",
																		"src": "6101:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6086:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "6086:3:7"
																},
																"nativeSrc": "6086:18:7",
																"nodeType": "YulFunctionCall",
																"src": "6086:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6078:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "6078:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6120:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "6120:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "6135:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "6135:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6151:3:7",
																								"nodeType": "YulLiteral",
																								"src": "6151:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6156:1:7",
																								"nodeType": "YulLiteral",
																								"src": "6156:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6147:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "6147:3:7"
																						},
																						"nativeSrc": "6147:11:7",
																						"nodeType": "YulFunctionCall",
																						"src": "6147:11:7"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6160:1:7",
																						"nodeType": "YulLiteral",
																						"src": "6160:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6143:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "6143:3:7"
																				},
																				"nativeSrc": "6143:19:7",
																				"nodeType": "YulFunctionCall",
																				"src": "6143:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6131:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "6131:3:7"
																		},
																		"nativeSrc": "6131:32:7",
																		"nodeType": "YulFunctionCall",
																		"src": "6131:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6113:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "6113:6:7"
																},
																"nativeSrc": "6113:51:7",
																"nodeType": "YulFunctionCall",
																"src": "6113:51:7"
															},
															"nativeSrc": "6113:51:7",
															"nodeType": "YulExpressionStatement",
															"src": "6113:51:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6184:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "6184:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6195:2:7",
																				"nodeType": "YulLiteral",
																				"src": "6195:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6180:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "6180:3:7"
																		},
																		"nativeSrc": "6180:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "6180:18:7"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "6200:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "6200:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6173:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "6173:6:7"
																},
																"nativeSrc": "6173:34:7",
																"nodeType": "YulFunctionCall",
																"src": "6173:34:7"
															},
															"nativeSrc": "6173:34:7",
															"nodeType": "YulExpressionStatement",
															"src": "6173:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "5939:274:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6029:9:7",
														"nodeType": "YulTypedName",
														"src": "6029:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6040:6:7",
														"nodeType": "YulTypedName",
														"src": "6040:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6048:6:7",
														"nodeType": "YulTypedName",
														"src": "6048:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6059:4:7",
														"nodeType": "YulTypedName",
														"src": "6059:4:7",
														"type": ""
													}
												],
												"src": "5939:274:7"
											},
											{
												"body": {
													"nativeSrc": "6296:199:7",
													"nodeType": "YulBlock",
													"src": "6296:199:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "6342:16:7",
																"nodeType": "YulBlock",
																"src": "6342:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "6351:1:7",
																					"nodeType": "YulLiteral",
																					"src": "6351:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6354:1:7",
																					"nodeType": "YulLiteral",
																					"src": "6354:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "6344:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "6344:6:7"
																			},
																			"nativeSrc": "6344:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "6344:12:7"
																		},
																		"nativeSrc": "6344:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "6344:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6317:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "6317:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "6326:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "6326:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "6313:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "6313:3:7"
																		},
																		"nativeSrc": "6313:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "6313:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6338:2:7",
																		"nodeType": "YulLiteral",
																		"src": "6338:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "6309:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "6309:3:7"
																},
																"nativeSrc": "6309:32:7",
																"nodeType": "YulFunctionCall",
																"src": "6309:32:7"
															},
															"nativeSrc": "6306:52:7",
															"nodeType": "YulIf",
															"src": "6306:52:7"
														},
														{
															"nativeSrc": "6367:29:7",
															"nodeType": "YulVariableDeclaration",
															"src": "6367:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6386:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "6386:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "6380:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "6380:5:7"
																},
																"nativeSrc": "6380:16:7",
																"nodeType": "YulFunctionCall",
																"src": "6380:16:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "6371:5:7",
																	"nodeType": "YulTypedName",
																	"src": "6371:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6449:16:7",
																"nodeType": "YulBlock",
																"src": "6449:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "6458:1:7",
																					"nodeType": "YulLiteral",
																					"src": "6458:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6461:1:7",
																					"nodeType": "YulLiteral",
																					"src": "6461:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "6451:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "6451:6:7"
																			},
																			"nativeSrc": "6451:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "6451:12:7"
																		},
																		"nativeSrc": "6451:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "6451:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6418:5:7",
																				"nodeType": "YulIdentifier",
																				"src": "6418:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nativeSrc": "6439:5:7",
																								"nodeType": "YulIdentifier",
																								"src": "6439:5:7"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nativeSrc": "6432:6:7",
																							"nodeType": "YulIdentifier",
																							"src": "6432:6:7"
																						},
																						"nativeSrc": "6432:13:7",
																						"nodeType": "YulFunctionCall",
																						"src": "6432:13:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "6425:6:7",
																					"nodeType": "YulIdentifier",
																					"src": "6425:6:7"
																				},
																				"nativeSrc": "6425:21:7",
																				"nodeType": "YulFunctionCall",
																				"src": "6425:21:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "6415:2:7",
																			"nodeType": "YulIdentifier",
																			"src": "6415:2:7"
																		},
																		"nativeSrc": "6415:32:7",
																		"nodeType": "YulFunctionCall",
																		"src": "6415:32:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "6408:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "6408:6:7"
																},
																"nativeSrc": "6408:40:7",
																"nodeType": "YulFunctionCall",
																"src": "6408:40:7"
															},
															"nativeSrc": "6405:60:7",
															"nodeType": "YulIf",
															"src": "6405:60:7"
														},
														{
															"nativeSrc": "6474:15:7",
															"nodeType": "YulAssignment",
															"src": "6474:15:7",
															"value": {
																"name": "value",
																"nativeSrc": "6484:5:7",
																"nodeType": "YulIdentifier",
																"src": "6484:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "6474:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "6474:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nativeSrc": "6218:277:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6262:9:7",
														"nodeType": "YulTypedName",
														"src": "6262:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "6273:7:7",
														"nodeType": "YulTypedName",
														"src": "6273:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "6285:6:7",
														"nodeType": "YulTypedName",
														"src": "6285:6:7",
														"type": ""
													}
												],
												"src": "6218:277:7"
											},
											{
												"body": {
													"nativeSrc": "6674:166:7",
													"nodeType": "YulBlock",
													"src": "6674:166:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6691:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "6691:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6702:2:7",
																		"nodeType": "YulLiteral",
																		"src": "6702:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6684:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "6684:6:7"
																},
																"nativeSrc": "6684:21:7",
																"nodeType": "YulFunctionCall",
																"src": "6684:21:7"
															},
															"nativeSrc": "6684:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "6684:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6725:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "6725:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6736:2:7",
																				"nodeType": "YulLiteral",
																				"src": "6736:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6721:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "6721:3:7"
																		},
																		"nativeSrc": "6721:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "6721:18:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6741:2:7",
																		"nodeType": "YulLiteral",
																		"src": "6741:2:7",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6714:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "6714:6:7"
																},
																"nativeSrc": "6714:30:7",
																"nodeType": "YulFunctionCall",
																"src": "6714:30:7"
															},
															"nativeSrc": "6714:30:7",
															"nodeType": "YulExpressionStatement",
															"src": "6714:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6764:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "6764:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6775:2:7",
																				"nodeType": "YulLiteral",
																				"src": "6775:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6760:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "6760:3:7"
																		},
																		"nativeSrc": "6760:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "6760:18:7"
																	},
																	{
																		"hexValue": "5061757361626c653a20706175736564",
																		"kind": "string",
																		"nativeSrc": "6780:18:7",
																		"nodeType": "YulLiteral",
																		"src": "6780:18:7",
																		"type": "",
																		"value": "Pausable: paused"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6753:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "6753:6:7"
																},
																"nativeSrc": "6753:46:7",
																"nodeType": "YulFunctionCall",
																"src": "6753:46:7"
															},
															"nativeSrc": "6753:46:7",
															"nodeType": "YulExpressionStatement",
															"src": "6753:46:7"
														},
														{
															"nativeSrc": "6808:26:7",
															"nodeType": "YulAssignment",
															"src": "6808:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6820:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "6820:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6831:2:7",
																		"nodeType": "YulLiteral",
																		"src": "6831:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6816:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "6816:3:7"
																},
																"nativeSrc": "6816:18:7",
																"nodeType": "YulFunctionCall",
																"src": "6816:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6808:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "6808:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "6500:340:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6651:9:7",
														"nodeType": "YulTypedName",
														"src": "6651:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6665:4:7",
														"nodeType": "YulTypedName",
														"src": "6665:4:7",
														"type": ""
													}
												],
												"src": "6500:340:7"
											},
											{
												"body": {
													"nativeSrc": "7019:181:7",
													"nodeType": "YulBlock",
													"src": "7019:181:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7036:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "7036:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7047:2:7",
																		"nodeType": "YulLiteral",
																		"src": "7047:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7029:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "7029:6:7"
																},
																"nativeSrc": "7029:21:7",
																"nodeType": "YulFunctionCall",
																"src": "7029:21:7"
															},
															"nativeSrc": "7029:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "7029:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7070:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "7070:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7081:2:7",
																				"nodeType": "YulLiteral",
																				"src": "7081:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7066:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "7066:3:7"
																		},
																		"nativeSrc": "7066:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "7066:18:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7086:2:7",
																		"nodeType": "YulLiteral",
																		"src": "7086:2:7",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7059:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "7059:6:7"
																},
																"nativeSrc": "7059:30:7",
																"nodeType": "YulFunctionCall",
																"src": "7059:30:7"
															},
															"nativeSrc": "7059:30:7",
															"nodeType": "YulExpressionStatement",
															"src": "7059:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7109:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "7109:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7120:2:7",
																				"nodeType": "YulLiteral",
																				"src": "7120:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7105:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "7105:3:7"
																		},
																		"nativeSrc": "7105:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "7105:18:7"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nativeSrc": "7125:33:7",
																		"nodeType": "YulLiteral",
																		"src": "7125:33:7",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7098:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "7098:6:7"
																},
																"nativeSrc": "7098:61:7",
																"nodeType": "YulFunctionCall",
																"src": "7098:61:7"
															},
															"nativeSrc": "7098:61:7",
															"nodeType": "YulExpressionStatement",
															"src": "7098:61:7"
														},
														{
															"nativeSrc": "7168:26:7",
															"nodeType": "YulAssignment",
															"src": "7168:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7180:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "7180:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7191:2:7",
																		"nodeType": "YulLiteral",
																		"src": "7191:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7176:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "7176:3:7"
																},
																"nativeSrc": "7176:18:7",
																"nodeType": "YulFunctionCall",
																"src": "7176:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7168:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "7168:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "6845:355:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6996:9:7",
														"nodeType": "YulTypedName",
														"src": "6996:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7010:4:7",
														"nodeType": "YulTypedName",
														"src": "7010:4:7",
														"type": ""
													}
												],
												"src": "6845:355:7"
											},
											{
												"body": {
													"nativeSrc": "7237:95:7",
													"nodeType": "YulBlock",
													"src": "7237:95:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "7254:1:7",
																		"nodeType": "YulLiteral",
																		"src": "7254:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "7261:3:7",
																				"nodeType": "YulLiteral",
																				"src": "7261:3:7",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7266:10:7",
																				"nodeType": "YulLiteral",
																				"src": "7266:10:7",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "7257:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "7257:3:7"
																		},
																		"nativeSrc": "7257:20:7",
																		"nodeType": "YulFunctionCall",
																		"src": "7257:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7247:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "7247:6:7"
																},
																"nativeSrc": "7247:31:7",
																"nodeType": "YulFunctionCall",
																"src": "7247:31:7"
															},
															"nativeSrc": "7247:31:7",
															"nodeType": "YulExpressionStatement",
															"src": "7247:31:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "7294:1:7",
																		"nodeType": "YulLiteral",
																		"src": "7294:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7297:4:7",
																		"nodeType": "YulLiteral",
																		"src": "7297:4:7",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7287:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "7287:6:7"
																},
																"nativeSrc": "7287:15:7",
																"nodeType": "YulFunctionCall",
																"src": "7287:15:7"
															},
															"nativeSrc": "7287:15:7",
															"nodeType": "YulExpressionStatement",
															"src": "7287:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "7318:1:7",
																		"nodeType": "YulLiteral",
																		"src": "7318:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7321:4:7",
																		"nodeType": "YulLiteral",
																		"src": "7321:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "7311:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "7311:6:7"
																},
																"nativeSrc": "7311:15:7",
																"nodeType": "YulFunctionCall",
																"src": "7311:15:7"
															},
															"nativeSrc": "7311:15:7",
															"nodeType": "YulExpressionStatement",
															"src": "7311:15:7"
														}
													]
												},
												"name": "panic_error_0x32",
												"nativeSrc": "7205:127:7",
												"nodeType": "YulFunctionDefinition",
												"src": "7205:127:7"
											},
											{
												"body": {
													"nativeSrc": "7511:170:7",
													"nodeType": "YulBlock",
													"src": "7511:170:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7528:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "7528:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7539:2:7",
																		"nodeType": "YulLiteral",
																		"src": "7539:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7521:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "7521:6:7"
																},
																"nativeSrc": "7521:21:7",
																"nodeType": "YulFunctionCall",
																"src": "7521:21:7"
															},
															"nativeSrc": "7521:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "7521:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7562:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "7562:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7573:2:7",
																				"nodeType": "YulLiteral",
																				"src": "7573:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7558:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "7558:3:7"
																		},
																		"nativeSrc": "7558:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "7558:18:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7578:2:7",
																		"nodeType": "YulLiteral",
																		"src": "7578:2:7",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7551:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "7551:6:7"
																},
																"nativeSrc": "7551:30:7",
																"nodeType": "YulFunctionCall",
																"src": "7551:30:7"
															},
															"nativeSrc": "7551:30:7",
															"nodeType": "YulExpressionStatement",
															"src": "7551:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7601:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "7601:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7612:2:7",
																				"nodeType": "YulLiteral",
																				"src": "7612:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7597:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "7597:3:7"
																		},
																		"nativeSrc": "7597:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "7597:18:7"
																	},
																	{
																		"hexValue": "5061757361626c653a206e6f7420706175736564",
																		"kind": "string",
																		"nativeSrc": "7617:22:7",
																		"nodeType": "YulLiteral",
																		"src": "7617:22:7",
																		"type": "",
																		"value": "Pausable: not paused"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7590:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "7590:6:7"
																},
																"nativeSrc": "7590:50:7",
																"nodeType": "YulFunctionCall",
																"src": "7590:50:7"
															},
															"nativeSrc": "7590:50:7",
															"nodeType": "YulExpressionStatement",
															"src": "7590:50:7"
														},
														{
															"nativeSrc": "7649:26:7",
															"nodeType": "YulAssignment",
															"src": "7649:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7661:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "7661:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7672:2:7",
																		"nodeType": "YulLiteral",
																		"src": "7672:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7657:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "7657:3:7"
																},
																"nativeSrc": "7657:18:7",
																"nodeType": "YulFunctionCall",
																"src": "7657:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7649:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "7649:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "7337:344:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7488:9:7",
														"nodeType": "YulTypedName",
														"src": "7488:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7502:4:7",
														"nodeType": "YulTypedName",
														"src": "7502:4:7",
														"type": ""
													}
												],
												"src": "7337:344:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_array_bytes32_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_stringliteral_61a85e5c7ff10d61e0d485a3a109c122858fc92abbf7d6216873950f0d5aedcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Token shouldn't be zero\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_ef35312ab5edf5b6a3e679741e49a97912d1142319a2ff11ab578776f752b342__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"It is no period to claim!\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8d5f1075ee9cf123a11fed45e62459547c318d7703b4e3920694b01d6b8c6dcf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Already claimed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Invalid proof\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_23bc11b9652f987eff8045f5fbefd0a7a6e0feeed7ac640e905989decdc052c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Token address shouldn't be zero!\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_f6657e4d1cfe337fdb58cc2af2fa00dc813b20940f609425939a74aa165269ab__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Insufficient Balance!\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b506004361061013d575f3560e01c80637cb64759116100b4578063b6cd5d1a11610079578063b6cd5d1a1461025a578063c27f7e2614610262578063c884ef831461026a578063de805da71461028c578063f2fde38b14610294578063fc0c546a146102a7575f80fd5b80637cb64759146102035780637cc6cb7a146102165780638456cb591461022a5780638da5cb5b14610232578063a0074c6714610247575f80fd5b8063490395271161010557806349039527146101965780635c975abb1461019f5780635e4f3a9c146101b55780636038efad146101bd57806361d027b3146101d0578063715018a6146101fb575f80fd5b8063144fa6d7146101415780632eb4a7ab146101565780632f52ebb7146101725780633f4ba83a14610185578063428e75651461018d575b5f80fd5b61015461014f366004610bde565b6102ba565b005b61015f60025481565b6040519081526020015b60405180910390f35b610154610180366004610c3f565b61033f565b6101546106bf565b61015f60055481565b61015f60065481565b5f5460ff165b6040519015158152602001610169565b6101546106d1565b6101546101cb366004610c87565b6106ec565b6004546101e3906001600160a01b031681565b6040516001600160a01b039091168152602001610169565b6101546106f9565b610154610211366004610c87565b61070a565b6004546101a590600160a01b900460ff1681565b610154610717565b5f5461010090046001600160a01b03166101e3565b6101a5610255366004610c9e565b610727565b6101546107b3565b6101a56107d4565b6101a5610278366004610bde565b60076020525f908152604090205460ff1681565b610154610811565b6101546102a2366004610bde565b610901565b6003546101e3906001600160a01b031681565b6102c261093e565b6001600160a01b03811661031d5760405162461bcd60e51b815260206004820152601760248201527f546f6b656e2073686f756c646e2774206265207a65726f00000000000000000060448201526064015b60405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610347610970565b61034f6109b5565b600454600160a01b900460ff1680156103845750600554421015801561038457506006546005546103809190610cf4565b4211155b6103d05760405162461bcd60e51b815260206004820152601960248201527f4974206973206e6f20706572696f6420746f20636c61696d21000000000000006044820152606401610314565b335f9081526007602052604090205460ff16156104215760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606401610314565b6040516bffffffffffffffffffffffff193360601b166020820152603481018490525f906054016040516020818303038152906040528051906020012090506104a08383808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506002549150849050610a0e565b6104dc5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610314565b6003546001600160a01b03166105345760405162461bcd60e51b815260206004820181905260248201527f546f6b656e20616464726573732073686f756c646e2774206265207a65726f216044820152606401610314565b6003546040516370a0823160e01b815230600482015285916001600160a01b0316906370a0823190602401602060405180830381865afa15801561057a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061059e9190610d13565b116105e35760405162461bcd60e51b8152602060048201526015602482015274496e73756666696369656e742042616c616e63652160581b6044820152606401610314565b831561065d5760035460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b039091169063a9059cbb906044016020604051808303815f875af1158015610637573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061065b9190610d2a565b505b335f8181526007602052604090819020805460ff19166001179055517fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a906106a89087815260200190565b60405180910390a2506106ba60018055565b505050565b6106c761093e565b6106cf610a23565b565b6106d961093e565b6004805460ff60a01b191690555f600555565b6106f461093e565b600655565b61070161093e565b6106cf5f610a74565b61071261093e565b600255565b61071f61093e565b6106cf610acc565b6040516bffffffffffffffffffffffff19606086901b166020820152603481018490525f9081906054016040516020818303038152906040528051906020012090506107a98484808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506002549150849050610a0e565b9695505050505050565b6107bb61093e565b6004805460ff60a01b1916600160a01b17905542600555565b6004545f90600160a01b900460ff1680156107fe5750426006546005546107fb9190610cf4565b10155b801561080c57506005544210155b905090565b61081961093e565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116905f9082906370a0823190602401602060405180830381865afa158015610863573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108879190610d13565b6004805460405163a9059cbb60e01b81526001600160a01b0391821692810192909252602482018390529192509083169063a9059cbb906044016020604051808303815f875af11580156108dd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106ba9190610d2a565b61090961093e565b6001600160a01b03811661093257604051631e4fbdf760e01b81525f6004820152602401610314565b61093b81610a74565b50565b5f546001600160a01b036101009091041633146106cf5760405163118cdaa760e01b8152336004820152602401610314565b5f5460ff16156106cf5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610314565b600260015403610a075760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610314565b6002600155565b5f82610a1a8584610b08565b14949350505050565b610a2b610b4c565b5f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b5f80546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b610ad4610970565b5f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a573390565b5f81815b8451811015610b4257610b3882868381518110610b2b57610b2b610d49565b6020026020010151610b94565b9150600101610b0c565b5090505b92915050565b5f5460ff166106cf5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610314565b5f818310610bae575f828152602084905260409020610bbc565b5f8381526020839052604090205b9392505050565b80356001600160a01b0381168114610bd9575f80fd5b919050565b5f60208284031215610bee575f80fd5b610bbc82610bc3565b5f8083601f840112610c07575f80fd5b50813567ffffffffffffffff811115610c1e575f80fd5b6020830191508360208260051b8501011115610c38575f80fd5b9250929050565b5f805f60408486031215610c51575f80fd5b83359250602084013567ffffffffffffffff811115610c6e575f80fd5b610c7a86828701610bf7565b9497909650939450505050565b5f60208284031215610c97575f80fd5b5035919050565b5f805f8060608587031215610cb1575f80fd5b610cba85610bc3565b935060208501359250604085013567ffffffffffffffff811115610cdc575f80fd5b610ce887828801610bf7565b95989497509550505050565b80820180821115610b4657634e487b7160e01b5f52601160045260245ffd5b5f60208284031215610d23575f80fd5b5051919050565b5f60208284031215610d3a575f80fd5b81518015158114610bbc575f80fd5b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220b24f23ab3eeb44dd50a9499034daaff673fe0a3fc42196c3c5307a18f603014864736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x13D JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7CB64759 GT PUSH2 0xB4 JUMPI DUP1 PUSH4 0xB6CD5D1A GT PUSH2 0x79 JUMPI DUP1 PUSH4 0xB6CD5D1A EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xC27F7E26 EQ PUSH2 0x262 JUMPI DUP1 PUSH4 0xC884EF83 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0xDE805DA7 EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x294 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x2A7 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x203 JUMPI DUP1 PUSH4 0x7CC6CB7A EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0xA0074C67 EQ PUSH2 0x247 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x49039527 GT PUSH2 0x105 JUMPI DUP1 PUSH4 0x49039527 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x5E4F3A9C EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x6038EFAD EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x61D027B3 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1FB JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x144FA6D7 EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x2F52EBB7 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x428E7565 EQ PUSH2 0x18D JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x154 PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0xBDE JUMP JUMPDEST PUSH2 0x2BA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15F PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x154 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0xC3F JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST PUSH2 0x154 PUSH2 0x6BF JUMP JUMPDEST PUSH2 0x15F PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15F PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0xFF AND JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x169 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x6D1 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x1CB CALLDATASIZE PUSH1 0x4 PUSH2 0xC87 JUMP JUMPDEST PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x1E3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x169 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x6F9 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0xC87 JUMP JUMPDEST PUSH2 0x70A JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x1A5 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x717 JUMP JUMPDEST PUSH0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x255 CALLDATASIZE PUSH1 0x4 PUSH2 0xC9E JUMP JUMPDEST PUSH2 0x727 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x7B3 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x7D4 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0xBDE JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x811 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x2A2 CALLDATASIZE PUSH1 0x4 PUSH2 0xBDE JUMP JUMPDEST PUSH2 0x901 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x1E3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2C2 PUSH2 0x93E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x31D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E2073686F756C646E2774206265207A65726F000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x347 PUSH2 0x970 JUMP JUMPDEST PUSH2 0x34F PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x384 JUMPI POP PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 0x384 JUMPI POP PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD PUSH2 0x380 SWAP2 SWAP1 PUSH2 0xCF4 JUMP JUMPDEST TIMESTAMP GT ISZERO JUMPDEST PUSH2 0x3D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4974206973206E6F20706572696F6420746F20636C61696D2100000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x421 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x105B1C9958591E4818DB185A5B5959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP5 SWAP1 MSTORE PUSH0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x4A0 DUP4 DUP4 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x2 SLOAD SWAP2 POP DUP5 SWAP1 POP PUSH2 0xA0E JUMP JUMPDEST PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x24B73B30B634B210383937B7B3 PUSH1 0x99 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x534 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E20616464726573732073686F756C646E2774206265207A65726F21 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP6 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x57A JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x59E SWAP2 SWAP1 PUSH2 0xD13 JUMP JUMPDEST GT PUSH2 0x5E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x496E73756666696369656E742042616C616E636521 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x65D JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x637 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x65B SWAP2 SWAP1 PUSH2 0xD2A JUMP JUMPDEST POP JUMPDEST CALLER PUSH0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xD8138F8A3F377C5259CA548E70E4C2DE94F129F5A11036A15B69513CBA2B426A SWAP1 PUSH2 0x6A8 SWAP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x6BA PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x93E JUMP JUMPDEST PUSH2 0x6CF PUSH2 0xA23 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6D9 PUSH2 0x93E JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH0 PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH2 0x6F4 PUSH2 0x93E JUMP JUMPDEST PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH2 0x701 PUSH2 0x93E JUMP JUMPDEST PUSH2 0x6CF PUSH0 PUSH2 0xA74 JUMP JUMPDEST PUSH2 0x712 PUSH2 0x93E JUMP JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH2 0x71F PUSH2 0x93E JUMP JUMPDEST PUSH2 0x6CF PUSH2 0xACC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP5 SWAP1 MSTORE PUSH0 SWAP1 DUP2 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x7A9 DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x2 SLOAD SWAP2 POP DUP5 SWAP1 POP PUSH2 0xA0E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7BB PUSH2 0x93E JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE TIMESTAMP PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x7FE JUMPI POP TIMESTAMP PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD PUSH2 0x7FB SWAP2 SWAP1 PUSH2 0xCF4 JUMP JUMPDEST LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x80C JUMPI POP PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x819 PUSH2 0x93E JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH0 SWAP1 DUP3 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x863 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x887 SWAP2 SWAP1 PUSH2 0xD13 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP SWAP1 DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8DD JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6BA SWAP2 SWAP1 PUSH2 0xD2A JUMP JUMPDEST PUSH2 0x909 PUSH2 0x93E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x932 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x314 JUMP JUMPDEST PUSH2 0x93B DUP2 PUSH2 0xA74 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x6CF JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x314 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH0 DUP3 PUSH2 0xA1A DUP6 DUP5 PUSH2 0xB08 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xA2B PUSH2 0xB4C JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH2 0x100 DUP2 DUP2 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT DUP6 AND OR DUP6 SSTORE PUSH1 0x40 MLOAD SWAP4 DIV SWAP2 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH2 0xAD4 PUSH2 0x970 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xA57 CALLER SWAP1 JUMP JUMPDEST PUSH0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xB42 JUMPI PUSH2 0xB38 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB2B JUMPI PUSH2 0xB2B PUSH2 0xD49 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xB94 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xB0C JUMP JUMPDEST POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0xFF AND PUSH2 0x6CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x314 JUMP JUMPDEST PUSH0 DUP2 DUP4 LT PUSH2 0xBAE JUMPI PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xBBC JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBD9 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBEE JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xBBC DUP3 PUSH2 0xBC3 JUMP JUMPDEST PUSH0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC07 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC1E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xC38 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC51 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC6E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xC7A DUP7 DUP3 DUP8 ADD PUSH2 0xBF7 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC97 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xCB1 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xCBA DUP6 PUSH2 0xBC3 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCDC JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xCE8 DUP8 DUP3 DUP9 ADD PUSH2 0xBF7 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xB46 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD23 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD3A JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xBBC JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 0x4F 0x23 0xAB RETURNDATACOPY 0xEB PREVRANDAO 0xDD POP 0xA9 BLOBHASH SWAP1 CALLVALUE 0xDA 0xAF 0xF6 PUSH20 0xFE0A3FC42196C3C5307A18F603014864736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "356:3320:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1354:150;;;;;;:::i;:::-;;:::i;:::-;;427:25;;;;;;;;;529::7;;;517:2;502:18;427:25:6;;;;;;;;2188:895;;;;;;:::i;:::-;;:::i;3376:63::-;;;:::i;543:33::-;;;;;;582:36;;;;;;1615:84:1;1662:4;1685:7;;;1615:84;;;1840:14:7;;1833:22;1815:41;;1803:2;1788:18;1615:84:1;1675:187:7;1648:114:6;;;:::i;1768:122::-;;;;;;:::i;:::-;;:::i;485:23::-;;;;;-1:-1:-1;;;;;485:23:6;;;;;;-1:-1:-1;;;;;2262:32:7;;;2244:51;;2232:2;2217:18;485:23:6;2098:203:7;2293:101:0;;;:::i;1244:104:6:-;;;;;;:::i;:::-;;:::i;515:22::-;;;;;-1:-1:-1;;;515:22:6;;;;;;3311:59;;;:::i;1638:85:0:-;1684:7;1710:6;;;;-1:-1:-1;;;;;1710:6:0;1638:85;;1896:286:6;;;;;;:::i;:::-;;:::i;1510:132::-;;;:::i;3445:229::-;;;:::i;625:39::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;3089:216;;;:::i;2543:215:0:-;;;;;;:::i;:::-;;:::i;459:20:6:-;;;;;-1:-1:-1;;;;;459:20:6;;;1354:150;1531:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;1425:20:6;::::1;1417:56;;;::::0;-1:-1:-1;;;1417:56:6;;3323:2:7;1417:56:6::1;::::0;::::1;3305:21:7::0;3362:2;3342:18;;;3335:30;3401:25;3381:18;;;3374:53;3444:18;;1417:56:6::1;;;;;;;;;1483:5;:14:::0;;-1:-1:-1;;;;;;1483:14:6::1;-1:-1:-1::0;;;;;1483:14:6;;;::::1;::::0;;;::::1;::::0;;1354:150::o;2188:895::-;1239:19:1;:17;:19::i;:::-;2261:21:2::1;:19;:21::i;:::-;792:10:6::2;::::0;-1:-1:-1;;;792:10:6;::::2;;;:134:::0;::::2;;;;826:18;;807:15;:37;;:118;;;;;904:21;;883:18;;:42;;;;:::i;:::-;864:15;:61;;807:118;771:206;;;::::0;-1:-1:-1;;;771:206:6;;3902:2:7;771:206:6::2;::::0;::::2;3884:21:7::0;3941:2;3921:18;;;3914:30;3980:27;3960:18;;;3953:55;4025:18;;771:206:6::2;3700:349:7::0;771:206:6::2;2365:10:::3;2357:19;::::0;;;:7:::3;:19;::::0;;;;;::::3;;2356:20;2348:48;;;::::0;-1:-1:-1;;;2348:48:6;;4256:2:7;2348:48:6::3;::::0;::::3;4238:21:7::0;4295:2;4275:18;;;4268:30;-1:-1:-1;;;4314:18:7;;;4307:45;4369:18;;2348:48:6::3;4054:339:7::0;2348:48:6::3;2467:37;::::0;-1:-1:-1;;2484:10:6::3;4575:2:7::0;4571:15;4567:53;2467:37:6::3;::::0;::::3;4555:66:7::0;4637:12;;;4630:28;;;2442:12:6::3;::::0;4674::7;;2467:37:6::3;;;;;;;;;;;;2457:48;;;;;;2442:63;;2536:50;2555:12;;2536:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::3;::::0;;;;-1:-1:-1;;2569:10:6::3;::::0;;-1:-1:-1;2581:4:6;;-1:-1:-1;2536:18:6::3;:50::i;:::-;2515:110;;;::::0;-1:-1:-1;;;2515:110:6;;4899:2:7;2515:110:6::3;::::0;::::3;4881:21:7::0;4938:2;4918:18;;;4911:30;-1:-1:-1;;;4957:18:7;;;4950:43;5010:18;;2515:110:6::3;4697:337:7::0;2515:110:6::3;2644:5;::::0;-1:-1:-1;;;;;2644:5:6::3;2636:64;;;::::0;-1:-1:-1;;;2636:64:6;;5241:2:7;2636:64:6::3;::::0;::::3;5223:21:7::0;;;5260:18;;;5253:30;5319:34;5299:18;;;5292:62;5371:18;;2636:64:6::3;5039:356:7::0;2636:64:6::3;2763:5;::::0;2756:38:::3;::::0;-1:-1:-1;;;2756:38:6;;2788:4:::3;2756:38;::::0;::::3;2244:51:7::0;2797:7:6;;-1:-1:-1;;;;;2763:5:6::3;::::0;2756:23:::3;::::0;2217:18:7;;2756:38:6::3;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;2735:116;;;::::0;-1:-1:-1;;;2735:116:6;;5791:2:7;2735:116:6::3;::::0;::::3;5773:21:7::0;5830:2;5810:18;;;5803:30;-1:-1:-1;;;5849:18:7;;;5842:51;5910:18;;2735:116:6::3;5589:345:7::0;2735:116:6::3;2865:11:::0;;2861:85:::3;;2899:5;::::0;2892:43:::3;::::0;-1:-1:-1;;;2892:43:6;;2915:10:::3;2892:43;::::0;::::3;6113:51:7::0;6180:18;;;6173:34;;;-1:-1:-1;;;;;2899:5:6;;::::3;::::0;2892:22:::3;::::0;6086:18:7;;2892:43:6::3;;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2861:85;3014:10;3006:19;::::0;;;:7:::3;:19;::::0;;;;;;:26;;-1:-1:-1;;3006:26:6::3;3028:4;3006:26;::::0;;3048:28;::::3;::::0;::::3;::::0;3068:7;529:25:7;;517:2;502:18;;383:177;3048:28:6::3;;;;;;;;2329:754;2303:20:2::1;1716:1:::0;2809:22;;2629:209;2303:20:::1;2188:895:6::0;;;:::o;3376:63::-;1531:13:0;:11;:13::i;:::-;3422:10:6::1;:8;:10::i;:::-;3376:63::o:0;1648:114::-;1531:13:0;:11;:13::i;:::-;1705:10:6::1;:18:::0;;-1:-1:-1;;;;1705:18:6::1;::::0;;1718:5:::1;1733:18;:22:::0;1648:114::o;1768:122::-;1531:13:0;:11;:13::i;:::-;1850:21:6::1;:33:::0;1768:122::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;1244:104:6:-:0;1531:13:0;:11;:13::i;:::-;1317:10:6::1;:24:::0;1244:104::o;3311:59::-;1531:13:0;:11;:13::i;:::-;3355:8:6::1;:6;:8::i;1896:286::-:0;2075:32;;-1:-1:-1;;4575:2:7;4571:15;;;4567:53;2075:32:6;;;4555:66:7;4637:12;;;4630:28;;;2034:4:6;;;;4674:12:7;;2075:32:6;;;;;;;;;;;;2065:43;;;;;;2050:58;;2125:50;2144:12;;2125:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2158:10:6;;;-1:-1:-1;2170:4:6;;-1:-1:-1;2125:18:6;:50::i;:::-;2118:57;1896:286;-1:-1:-1;;;;;;1896:286:6:o;1510:132::-;1531:13:0;:11;:13::i;:::-;1572:10:6::1;:17:::0;;-1:-1:-1;;;;1572:17:6::1;-1:-1:-1::0;;;1572:17:6::1;::::0;;1620:15:::1;1599:18;:36:::0;1510:132::o;3445:229::-;3533:10;;3498:4;;-1:-1:-1;;;3533:10:6;;;;:79;;;;;3596:15;3570:21;;3549:18;;:42;;;;:::i;:::-;3548:63;;3533:79;:134;;;;;3648:18;;3629:15;:37;;3533:134;3514:153;;3445:229;:::o;3089:216::-;1531:13:0;:11;:13::i;:::-;3181:5:6::1;::::0;3215:35:::1;::::0;-1:-1:-1;;;3215:35:6;;3244:4:::1;3215:35;::::0;::::1;2244:51:7::0;-1:-1:-1;;;;;3181:5:6;;::::1;::::0;3154:17:::1;::::0;3181:5;;3215:20:::1;::::0;2217:18:7;;3215:35:6::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3280:8;::::0;;3260:38:::1;::::0;-1:-1:-1;;;3260:38:6;;-1:-1:-1;;;;;3280:8:6;;::::1;3260:38:::0;;::::1;6113:51:7::0;;;;6180:18;;;6173:34;;;3197:53:6;;-1:-1:-1;3260:19:6;;::::1;::::0;::::1;::::0;6086:18:7;;3260:38:6::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2543:215:0:-:0;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;2244:51:7::0;2217:18;;2672:31:0::1;2098:203:7::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;;;;;735:10:4;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:4;1901:40:0;;;2244:51:7;2217:18;;1901:40:0;2098:203:7;1767:106:1;1662:4;1685:7;;;1836:9;1828:38;;;;-1:-1:-1;;;1828:38:1;;6702:2:7;1828:38:1;;;6684:21:7;6741:2;6721:18;;;6714:30;-1:-1:-1;;;6760:18:7;;;6753:46;6816:18;;1828:38:1;6500:340:7;2336:287:2;1759:1;2468:7;;:19;2460:63;;;;-1:-1:-1;;;2460:63:2;;7047:2:7;2460:63:2;;;7029:21:7;7086:2;7066:18;;;7059:30;7125:33;7105:18;;;7098:61;7176:18;;2460:63:2;6845:355:7;2460:63:2;1759:1;2598:7;:18;2336:287::o;1265:154:5:-;1356:4;1408;1379:25;1392:5;1399:4;1379:12;:25::i;:::-;:33;;1265:154;-1:-1:-1;;;;1265:154:5:o;2433:117:1:-;1486:16;:14;:16::i;:::-;2501:5:::1;2491:15:::0;;-1:-1:-1;;2491:15:1::1;::::0;;2521:22:::1;735:10:4::0;2530:12:1::1;2521:22;::::0;-1:-1:-1;;;;;2262:32:7;;;2244:51;;2232:2;2217:18;2521:22:1::1;;;;;;;2433:117::o:0;2912:187:0:-;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;3004:6;3020:17;;;-1:-1:-1;;;;;;3020:17:0;;;;;3052:40;;3004:6;;;;;;;3020:17;;3004:6;;3052:40;;;2975:124;2912:187;:::o;2186:115:1:-;1239:19;:17;:19::i;:::-;2245:7:::1;:14:::0;;-1:-1:-1;;2245:14:1::1;2255:4;2245:14;::::0;;2274:20:::1;2281:12;735:10:4::0;;656:96;1967:290:5;2050:7;2092:4;2050:7;2106:116;2130:5;:12;2126:1;:16;2106:116;;;2178:33;2188:12;2202:5;2208:1;2202:8;;;;;;;;:::i;:::-;;;;;;;2178:9;:33::i;:::-;2163:48;-1:-1:-1;2144:3:5;;2106:116;;;-1:-1:-1;2238:12:5;-1:-1:-1;1967:290:5;;;;;:::o;1945:106:1:-;1662:4;1685:7;;;2003:41;;;;-1:-1:-1;;;2003:41:1;;7539:2:7;2003:41:1;;;7521:21:7;7578:2;7558:18;;;7551:30;-1:-1:-1;;;7597:18:7;;;7590:50;7657:18;;2003:41:1;7337:344:7;9229:147:5;9292:7;9322:1;9318;:5;:51;;9564:13;9655:15;;;9690:4;9683:15;;;9736:4;9720:21;;9318:51;;;9564:13;9655:15;;;9690:4;9683:15;;;9736:4;9720:21;;9326:20;9311:58;9229:147;-1:-1:-1;;;9229:147:5:o;14:173:7:-;82:20;;-1:-1:-1;;;;;131:31:7;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;565:367::-;628:8;638:6;692:3;685:4;677:6;673:17;669:27;659:55;;710:1;707;700:12;659:55;-1:-1:-1;733:20:7;;776:18;765:30;;762:50;;;808:1;805;798:12;762:50;845:4;837:6;833:17;821:29;;905:3;898:4;888:6;885:1;881:14;873:6;869:27;865:38;862:47;859:67;;;922:1;919;912:12;859:67;565:367;;;;;:::o;937:551::-;1032:6;1040;1048;1101:2;1089:9;1080:7;1076:23;1072:32;1069:52;;;1117:1;1114;1107:12;1069:52;1162:23;;;-1:-1:-1;1260:2:7;1245:18;;1232:32;1287:18;1276:30;;1273:50;;;1319:1;1316;1309:12;1273:50;1358:70;1420:7;1411:6;1400:9;1396:22;1358:70;:::i;:::-;937:551;;1447:8;;-1:-1:-1;1332:96:7;;-1:-1:-1;;;;937:551:7:o;1867:226::-;1926:6;1979:2;1967:9;1958:7;1954:23;1950:32;1947:52;;;1995:1;1992;1985:12;1947:52;-1:-1:-1;2040:23:7;;1867:226;-1:-1:-1;1867:226:7:o;2491:625::-;2595:6;2603;2611;2619;2672:2;2660:9;2651:7;2647:23;2643:32;2640:52;;;2688:1;2685;2678:12;2640:52;2711:29;2730:9;2711:29;:::i;:::-;2701:39;-1:-1:-1;2809:2:7;2794:18;;2781:32;;-1:-1:-1;2888:2:7;2873:18;;2860:32;2915:18;2904:30;;2901:50;;;2947:1;2944;2937:12;2901:50;2986:70;3048:7;3039:6;3028:9;3024:22;2986:70;:::i;:::-;2491:625;;;;-1:-1:-1;3075:8:7;-1:-1:-1;;;;2491:625:7:o;3473:222::-;3538:9;;;3559:10;;;3556:133;;;3611:10;3606:3;3602:20;3599:1;3592:31;3646:4;3643:1;3636:15;3674:4;3671:1;3664:15;5400:184;5470:6;5523:2;5511:9;5502:7;5498:23;5494:32;5491:52;;;5539:1;5536;5529:12;5491:52;-1:-1:-1;5562:16:7;;5400:184;-1:-1:-1;5400:184:7:o;6218:277::-;6285:6;6338:2;6326:9;6317:7;6313:23;6309:32;6306:52;;;6354:1;6351;6344:12;6306:52;6386:9;6380:16;6439:5;6432:13;6425:21;6418:5;6415:32;6405:60;;6461:1;6458;6451:12;7205:127;7266:10;7261:3;7257:20;7254:1;7247:31;7297:4;7294:1;7287:15;7321:4;7318:1;7311:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "695000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"checkClaimingRound()": "8833",
								"claim(uint256,bytes32[])": "infinite",
								"claimed(address)": "2594",
								"claimingRoundDuration()": "2306",
								"endClaimingRound()": "31616",
								"isClaiming()": "2371",
								"merkleRoot()": "2329",
								"owner()": "2429",
								"pause()": "infinite",
								"paused()": "2336",
								"renounceOwnership()": "infinite",
								"setClaimingRoundDuration(uint256)": "24588",
								"setMerkleRoot(bytes32)": "24522",
								"setStartClaimingRound()": "48683",
								"setToken(address)": "26805",
								"startClaimingRound()": "2395",
								"token()": "2468",
								"transferOwnership(address)": "28475",
								"treasury()": "2447",
								"unClaimedTokenToTreasury()": "infinite",
								"unpause()": "infinite",
								"verifyUser(address,uint256,bytes32[])": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 356,
									"end": 3676,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 356,
									"end": 3676,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 356,
									"end": 3676,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "CODESIZE",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1001,
									"end": 1238,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "tag",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1006,
									"end": 1011,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 996,
									"end": 1011,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 996,
									"end": 1011,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 996,
									"end": 1011,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 996,
									"end": 1011,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 996,
									"end": 1011,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 1056,
									"end": 1066,
									"name": "CALLER",
									"source": 6
								},
								{
									"begin": 1056,
									"end": 1066,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1E4FBDF7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1350,
									"end": 1351,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 640,
									"end": 691,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 613,
									"end": 631,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 613,
									"end": 631,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "tag",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 1392,
									"end": 1404,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1373,
									"end": 1405,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "tag",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1078,
									"end": 1086,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1078,
									"end": 1098,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1078,
									"end": 1098,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": 1132,
									"end": 1141,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 6,
									"value": "93A80"
								},
								{
									"begin": 1108,
									"end": 1129,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 1108,
									"end": 1141,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1161,
									"end": 1179,
									"name": "AND",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1078,
									"end": 1098,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1078,
									"end": 1098,
									"modifierDepth": 1,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1161,
									"end": 1179,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 1161,
									"end": 1179,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1161,
									"end": 1179,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1189,
									"end": 1214,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "17"
								},
								{
									"begin": 1207,
									"end": 1213,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1189,
									"end": 1206,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "18"
								},
								{
									"begin": 1189,
									"end": 1214,
									"jumpType": "[in]",
									"modifierDepth": 1,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1189,
									"end": 1214,
									"modifierDepth": 1,
									"name": "tag",
									"source": 6,
									"value": "17"
								},
								{
									"begin": 1189,
									"end": 1214,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1224,
									"end": 1231,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "19"
								},
								{
									"begin": 1224,
									"end": 1229,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1224,
									"end": 1231,
									"jumpType": "[in]",
									"modifierDepth": 1,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1224,
									"end": 1231,
									"modifierDepth": 1,
									"name": "tag",
									"source": 6,
									"value": "19"
								},
								{
									"begin": 1224,
									"end": 1231,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1001,
									"end": 1238,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 356,
									"end": 3676,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "59"
								},
								{
									"begin": 356,
									"end": 3676,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "tag",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "100"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2975,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 2543,
									"end": 2758,
									"name": "tag",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 2543,
									"end": 2758,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1531,
									"end": 1544,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 1531,
									"end": 1542,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "25"
								},
								{
									"begin": 1531,
									"end": 1544,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1531,
									"end": 1544,
									"name": "tag",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 1531,
									"end": 1544,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2627,
									"end": 2649,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2627,
									"end": 2649,
									"modifierDepth": 1,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2623,
									"end": 2714,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "27"
								},
								{
									"begin": 2623,
									"end": 2714,
									"modifierDepth": 1,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 2672,
									"end": 2703,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2672,
									"end": 2703,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1E4FBDF7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 2672,
									"end": 2703,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2672,
									"end": 2703,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 2700,
									"end": 2701,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2672,
									"end": 2703,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 2672,
									"end": 2703,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2672,
									"end": 2703,
									"modifierDepth": 1,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 640,
									"end": 691,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 613,
									"end": 631,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 613,
									"end": 631,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 2672,
									"end": 2703,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 494,
									"end": 697,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 2623,
									"end": 2714,
									"modifierDepth": 1,
									"name": "tag",
									"source": 0,
									"value": "27"
								},
								{
									"begin": 2623,
									"end": 2714,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2723,
									"end": 2751,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "29"
								},
								{
									"begin": 2742,
									"end": 2750,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2723,
									"end": 2741,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 2723,
									"end": 2751,
									"jumpType": "[in]",
									"modifierDepth": 1,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 2723,
									"end": 2751,
									"modifierDepth": 1,
									"name": "tag",
									"source": 0,
									"value": "29"
								},
								{
									"begin": 2723,
									"end": 2751,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2543,
									"end": 2758,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2543,
									"end": 2758,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3311,
									"end": 3370,
									"name": "tag",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 3311,
									"end": 3370,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1531,
									"end": 1544,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "31"
								},
								{
									"begin": 1531,
									"end": 1542,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "25"
								},
								{
									"begin": 1531,
									"end": 1544,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1531,
									"end": 1544,
									"name": "tag",
									"source": 0,
									"value": "31"
								},
								{
									"begin": 1531,
									"end": 1544,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3355,
									"end": 3363,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "33"
								},
								{
									"begin": 3355,
									"end": 3361,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "34"
								},
								{
									"begin": 3355,
									"end": 3363,
									"jumpType": "[in]",
									"modifierDepth": 1,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 3355,
									"end": 3363,
									"modifierDepth": 1,
									"name": "tag",
									"source": 6,
									"value": "33"
								},
								{
									"begin": 3355,
									"end": 3363,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 3311,
									"end": 3370,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1796,
									"end": 1958,
									"name": "tag",
									"source": 0,
									"value": "25"
								},
								{
									"begin": 1796,
									"end": 1958,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1684,
									"end": 1691,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1710,
									"end": 1716,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1710,
									"end": 1716,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 1710,
									"end": 1716,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1710,
									"end": 1716,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1710,
									"end": 1716,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 1710,
									"end": 1716,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 735,
									"end": 745,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 1855,
									"end": 1878,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 1851,
									"end": 1952,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "33"
								},
								{
									"begin": 1851,
									"end": 1952,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1901,
									"end": 1941,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1901,
									"end": 1941,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "118CDAA7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1901,
									"end": 1941,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1901,
									"end": 1941,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 735,
									"end": 745,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 1901,
									"end": 1941,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1901,
									"end": 1941,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1901,
									"end": 1941,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 640,
									"end": 691,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 613,
									"end": 631,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 613,
									"end": 631,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1901,
									"end": 1941,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 494,
									"end": 697,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 2186,
									"end": 2301,
									"name": "tag",
									"source": 1,
									"value": "34"
								},
								{
									"begin": 2186,
									"end": 2301,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1239,
									"end": 1258,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "44"
								},
								{
									"begin": 1239,
									"end": 1256,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "45"
								},
								{
									"begin": 1239,
									"end": 1258,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 1239,
									"end": 1258,
									"name": "tag",
									"source": 1,
									"value": "44"
								},
								{
									"begin": 1239,
									"end": 1258,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2245,
									"end": 2252,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2245,
									"end": 2259,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 2245,
									"end": 2259,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2245,
									"end": 2259,
									"modifierDepth": 1,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 2255,
									"end": 2259,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 2245,
									"end": 2259,
									"modifierDepth": 1,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 2245,
									"end": 2259,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2245,
									"end": 2259,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 2274,
									"end": 2294,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 1,
									"value": "62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
								},
								{
									"begin": 2281,
									"end": 2293,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "47"
								},
								{
									"begin": 735,
									"end": 745,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 735,
									"end": 745,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 656,
									"end": 752,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 2281,
									"end": 2293,
									"modifierDepth": 1,
									"name": "tag",
									"source": 1,
									"value": "47"
								},
								{
									"begin": 2281,
									"end": 2293,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2274,
									"end": 2294,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 2274,
									"end": 2294,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 658,
									"end": 690,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 658,
									"end": 690,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 658,
									"end": 690,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 640,
									"end": 691,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 640,
									"end": 691,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 628,
									"end": 630,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 613,
									"end": 631,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 2274,
									"end": 2294,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 2274,
									"end": 2294,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 2274,
									"end": 2294,
									"modifierDepth": 1,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 2274,
									"end": 2294,
									"modifierDepth": 1,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2274,
									"end": 2294,
									"modifierDepth": 1,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 2274,
									"end": 2294,
									"modifierDepth": 1,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2274,
									"end": 2294,
									"modifierDepth": 1,
									"name": "LOG1",
									"source": 1
								},
								{
									"begin": 2186,
									"end": 2301,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 1767,
									"end": 1873,
									"name": "tag",
									"source": 1,
									"value": "45"
								},
								{
									"begin": 1767,
									"end": 1873,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1662,
									"end": 1666,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1685,
									"end": 1692,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 1685,
									"end": 1692,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 1685,
									"end": 1692,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 1836,
									"end": 1845,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 1828,
									"end": 1866,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "33"
								},
								{
									"begin": 1828,
									"end": 1866,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1828,
									"end": 1866,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1828,
									"end": 1866,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1828,
									"end": 1866,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1828,
									"end": 1866,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 904,
									"end": 906,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 1828,
									"end": 1866,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 1828,
									"end": 1866,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1828,
									"end": 1866,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 886,
									"end": 907,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 943,
									"end": 945,
									"name": "PUSH",
									"source": 7,
									"value": "10"
								},
								{
									"begin": 923,
									"end": 941,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 923,
									"end": 941,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 923,
									"end": 941,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 916,
									"end": 946,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "14185D5CD8589B194E881C185D5CD959"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "82"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 962,
									"end": 980,
									"name": "PUSH",
									"source": 7,
									"value": "44"
								},
								{
									"begin": 962,
									"end": 980,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 962,
									"end": 980,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 955,
									"end": 1001,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1018,
									"end": 1036,
									"name": "PUSH",
									"source": 7,
									"value": "64"
								},
								{
									"begin": 1018,
									"end": 1036,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1828,
									"end": 1866,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 702,
									"end": 1042,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 14,
									"end": 191,
									"name": "tag",
									"source": 7,
									"value": "58"
								},
								{
									"begin": 14,
									"end": 191,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 93,
									"end": 106,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 93,
									"end": 106,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 135,
									"end": 166,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 135,
									"end": 166,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 125,
									"end": 167,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 125,
									"end": 167,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 115,
									"end": 185,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "61"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 181,
									"end": 182,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 178,
									"end": 179,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 171,
									"end": 183,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 115,
									"end": 185,
									"name": "tag",
									"source": 7,
									"value": "61"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 14,
									"end": 191,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 14,
									"end": 191,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 196,
									"end": 489,
									"name": "tag",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 196,
									"end": 489,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 275,
									"end": 281,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 283,
									"end": 289,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 336,
									"end": 338,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 324,
									"end": 333,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 315,
									"end": 322,
									"name": "DUP6",
									"source": 7
								},
								{
									"begin": 311,
									"end": 334,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 307,
									"end": 339,
									"name": "SLT",
									"source": 7
								},
								{
									"begin": 304,
									"end": 356,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 304,
									"end": 356,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "63"
								},
								{
									"begin": 304,
									"end": 356,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 352,
									"end": 353,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 349,
									"end": 350,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 342,
									"end": 354,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 304,
									"end": 356,
									"name": "tag",
									"source": 7,
									"value": "63"
								},
								{
									"begin": 304,
									"end": 356,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 375,
									"end": 415,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "64"
								},
								{
									"begin": 405,
									"end": 414,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 375,
									"end": 415,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "58"
								},
								{
									"begin": 375,
									"end": 415,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 375,
									"end": 415,
									"name": "tag",
									"source": 7,
									"value": "64"
								},
								{
									"begin": 375,
									"end": 415,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 365,
									"end": 415,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 365,
									"end": 415,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 434,
									"end": 483,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "65"
								},
								{
									"begin": 479,
									"end": 481,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 468,
									"end": 477,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 464,
									"end": 482,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 434,
									"end": 483,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "58"
								},
								{
									"begin": 434,
									"end": 483,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 434,
									"end": 483,
									"name": "tag",
									"source": 7,
									"value": "65"
								},
								{
									"begin": 434,
									"end": 483,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 424,
									"end": 483,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 424,
									"end": 483,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 196,
									"end": 489,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 196,
									"end": 489,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 196,
									"end": 489,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 196,
									"end": 489,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 196,
									"end": 489,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 196,
									"end": 489,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 702,
									"end": 1042,
									"name": "tag",
									"source": 7,
									"value": "59"
								},
								{
									"begin": 702,
									"end": 1042,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 356,
									"end": 3676,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 356,
									"end": 3676,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 356,
									"end": 3676,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 356,
									"end": 3676,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 356,
									"end": 3676,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 356,
									"end": 3676,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 356,
									"end": 3676,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b24f23ab3eeb44dd50a9499034daaff673fe0a3fc42196c3c5307a18f603014864736f6c634300081a0033",
									".code": [
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "7CB64759"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "B6CD5D1A"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "B6CD5D1A"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "C27F7E26"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "C884EF83"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "DE805DA7"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "F2FDE38B"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "FC0C546A"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "tag",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "7CB64759"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "7CC6CB7A"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "8456CB59"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "8DA5CB5B"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "A0074C67"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "49039527"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "49039527"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "5C975ABB"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "5E4F3A9C"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "6038EFAD"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "61D027B3"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "tag",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "144FA6D7"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "2EB4A7AB"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "2F52EBB7"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "3F4BA83A"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "428E7565"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 356,
											"end": 3676,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 1354,
											"end": 1504,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1354,
											"end": 1504,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "tag",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 427,
											"end": 452,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 427,
											"end": 452,
											"name": "tag",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 529,
											"end": 554,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 529,
											"end": 554,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 529,
											"end": 554,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 427,
											"end": 452,
											"name": "tag",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 427,
											"end": 452,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 2188,
											"end": 3083,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "tag",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 2188,
											"end": 3083,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3376,
											"end": 3439,
											"name": "tag",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 3376,
											"end": 3439,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3376,
											"end": 3439,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 3376,
											"end": 3439,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 3376,
											"end": 3439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 543,
											"end": 576,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 543,
											"end": 576,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 543,
											"end": 576,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 543,
											"end": 576,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 543,
											"end": 576,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 543,
											"end": 576,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 543,
											"end": 576,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 582,
											"end": 618,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 582,
											"end": 618,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 582,
											"end": 618,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 582,
											"end": 618,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 582,
											"end": 618,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 582,
											"end": 618,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 582,
											"end": 618,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1615,
											"end": 1699,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 1615,
											"end": 1699,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1662,
											"end": 1666,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1685,
											"end": 1692,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1685,
											"end": 1692,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 1685,
											"end": 1692,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1615,
											"end": 1699,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 1615,
											"end": 1699,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1615,
											"end": 1699,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1615,
											"end": 1699,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1840,
											"end": 1854,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1840,
											"end": 1854,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1833,
											"end": 1855,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1815,
											"end": 1856,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1815,
											"end": 1856,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1788,
											"end": 1806,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1615,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 1675,
											"end": 1862,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1648,
											"end": 1762,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 1648,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1648,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 1648,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 1648,
											"end": 1762,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1768,
											"end": 1890,
											"name": "tag",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 1768,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1768,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 1768,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 1768,
											"end": 1890,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1768,
											"end": 1890,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1768,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 1768,
											"end": 1890,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1768,
											"end": 1890,
											"name": "tag",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 1768,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1768,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 1768,
											"end": 1890,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 485,
											"end": 508,
											"name": "tag",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 485,
											"end": 508,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 485,
											"end": 508,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 485,
											"end": 508,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 485,
											"end": 508,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 485,
											"end": 508,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 485,
											"end": 508,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 485,
											"end": 508,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 485,
											"end": 508,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 485,
											"end": 508,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 485,
											"end": 508,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 485,
											"end": 508,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 485,
											"end": 508,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2262,
											"end": 2294,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2262,
											"end": 2294,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2262,
											"end": 2294,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2244,
											"end": 2295,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2244,
											"end": 2295,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2232,
											"end": 2234,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 485,
											"end": 508,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 2098,
											"end": 2301,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1244,
											"end": 1348,
											"name": "tag",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 1244,
											"end": 1348,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1244,
											"end": 1348,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 1244,
											"end": 1348,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 1244,
											"end": 1348,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1244,
											"end": 1348,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1244,
											"end": 1348,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 1244,
											"end": 1348,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1244,
											"end": 1348,
											"name": "tag",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 1244,
											"end": 1348,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1244,
											"end": 1348,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 1244,
											"end": 1348,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 515,
											"end": 537,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 515,
											"end": 537,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 515,
											"end": 537,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 515,
											"end": 537,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 515,
											"end": 537,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 515,
											"end": 537,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 515,
											"end": 537,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 515,
											"end": 537,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 515,
											"end": 537,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 515,
											"end": 537,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 515,
											"end": 537,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 515,
											"end": 537,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3311,
											"end": 3370,
											"name": "tag",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 3311,
											"end": 3370,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3311,
											"end": 3370,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 3311,
											"end": 3370,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 3311,
											"end": 3370,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 1896,
											"end": 2182,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "tag",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1896,
											"end": 2182,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1510,
											"end": 1642,
											"name": "tag",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 1510,
											"end": 1642,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1510,
											"end": 1642,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 1510,
											"end": 1642,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 1510,
											"end": 1642,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3445,
											"end": 3674,
											"name": "tag",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3445,
											"end": 3674,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3445,
											"end": 3674,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 3445,
											"end": 3674,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 3445,
											"end": 3674,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "tag",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 625,
											"end": 664,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 625,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 625,
											"end": 664,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 625,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 625,
											"end": 664,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "tag",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 625,
											"end": 664,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 625,
											"end": 664,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 625,
											"end": 664,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 625,
											"end": 664,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 625,
											"end": 664,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 625,
											"end": 664,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 625,
											"end": 664,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3089,
											"end": 3305,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 3089,
											"end": 3305,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3089,
											"end": 3305,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 3089,
											"end": 3305,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 3089,
											"end": 3305,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 459,
											"end": 479,
											"name": "tag",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 479,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 459,
											"end": 479,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 459,
											"end": 479,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 459,
											"end": 479,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 459,
											"end": 479,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 479,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 459,
											"end": 479,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 459,
											"end": 479,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "tag",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1354,
											"end": 1504,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1425,
											"end": 1445,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1425,
											"end": 1445,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1417,
											"end": 1473,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1417,
											"end": 1473,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1473,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3323,
											"end": 3325,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1417,
											"end": 1473,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3305,
											"end": 3326,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3362,
											"end": 3364,
											"name": "PUSH",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 3342,
											"end": 3360,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3342,
											"end": 3360,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3342,
											"end": 3360,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3335,
											"end": 3365,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3401,
											"end": 3426,
											"name": "PUSH",
											"source": 7,
											"value": "546F6B656E2073686F756C646E2774206265207A65726F000000000000000000"
										},
										{
											"begin": 3381,
											"end": 3399,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3381,
											"end": 3399,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3381,
											"end": 3399,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3374,
											"end": 3427,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3444,
											"end": 3462,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3444,
											"end": 3462,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 1417,
											"end": 1473,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1488,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1483,
											"end": 1497,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1497,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1483,
											"end": 1497,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1483,
											"end": 1497,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1497,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1497,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1497,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1497,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1497,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1497,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1497,
											"modifierDepth": 1,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1497,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1497,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1354,
											"end": 1504,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "tag",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1239,
											"end": 1258,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 1239,
											"end": 1256,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 1239,
											"end": 1258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1239,
											"end": 1258,
											"name": "tag",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 1239,
											"end": 1258,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2261,
											"end": 2282,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 2261,
											"end": 2280,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 2261,
											"end": 2282,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2261,
											"end": 2282,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 2261,
											"end": 2282,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 792,
											"end": 802,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 792,
											"end": 802,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 792,
											"end": 802,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 792,
											"end": 802,
											"modifierDepth": 2,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 792,
											"end": 802,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 792,
											"end": 802,
											"modifierDepth": 2,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 792,
											"end": 926,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 792,
											"end": 926,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 792,
											"end": 926,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 792,
											"end": 926,
											"modifierDepth": 2,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 792,
											"end": 926,
											"modifierDepth": 2,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 826,
											"end": 844,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 826,
											"end": 844,
											"modifierDepth": 2,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 807,
											"end": 822,
											"modifierDepth": 2,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 807,
											"end": 844,
											"modifierDepth": 2,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 807,
											"end": 844,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 807,
											"end": 925,
											"modifierDepth": 2,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 807,
											"end": 925,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 807,
											"end": 925,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 807,
											"end": 925,
											"modifierDepth": 2,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 807,
											"end": 925,
											"modifierDepth": 2,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 904,
											"end": 925,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 904,
											"end": 925,
											"modifierDepth": 2,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 883,
											"end": 901,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 883,
											"end": 901,
											"modifierDepth": 2,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 883,
											"end": 925,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 883,
											"end": 925,
											"modifierDepth": 2,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 883,
											"end": 925,
											"modifierDepth": 2,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 883,
											"end": 925,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 883,
											"end": 925,
											"jumpType": "[in]",
											"modifierDepth": 2,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 883,
											"end": 925,
											"modifierDepth": 2,
											"name": "tag",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 883,
											"end": 925,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 864,
											"end": 879,
											"modifierDepth": 2,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 864,
											"end": 925,
											"modifierDepth": 2,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 864,
											"end": 925,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 807,
											"end": 925,
											"modifierDepth": 2,
											"name": "tag",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 807,
											"end": 925,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 771,
											"end": 977,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 771,
											"end": 977,
											"modifierDepth": 2,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 771,
											"end": 977,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 771,
											"end": 977,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 771,
											"end": 977,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 771,
											"end": 977,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3902,
											"end": 3904,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 771,
											"end": 977,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 771,
											"end": 977,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 771,
											"end": 977,
											"modifierDepth": 2,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3884,
											"end": 3905,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3941,
											"end": 3943,
											"name": "PUSH",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 3921,
											"end": 3939,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3921,
											"end": 3939,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3921,
											"end": 3939,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3914,
											"end": 3944,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3980,
											"end": 4007,
											"name": "PUSH",
											"source": 7,
											"value": "4974206973206E6F20706572696F6420746F20636C61696D2100000000000000"
										},
										{
											"begin": 3960,
											"end": 3978,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3960,
											"end": 3978,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3960,
											"end": 3978,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3953,
											"end": 4008,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4025,
											"end": 4043,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4025,
											"end": 4043,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 771,
											"end": 977,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 3700,
											"end": 4049,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 771,
											"end": 977,
											"modifierDepth": 2,
											"name": "tag",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 771,
											"end": 977,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2365,
											"end": 2375,
											"modifierDepth": 3,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 2357,
											"end": 2376,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2376,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2357,
											"end": 2376,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2357,
											"end": 2376,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2357,
											"end": 2364,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 2357,
											"end": 2376,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2357,
											"end": 2376,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2357,
											"end": 2376,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2357,
											"end": 2376,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2357,
											"end": 2376,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2357,
											"end": 2376,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2357,
											"end": 2376,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 2357,
											"end": 2376,
											"modifierDepth": 3,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2356,
											"end": 2376,
											"modifierDepth": 3,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2348,
											"end": 2396,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 2348,
											"end": 2396,
											"modifierDepth": 3,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2348,
											"end": 2396,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2348,
											"end": 2396,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2348,
											"end": 2396,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2348,
											"end": 2396,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4256,
											"end": 4258,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2396,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2348,
											"end": 2396,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2348,
											"end": 2396,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4238,
											"end": 4259,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4295,
											"end": 4297,
											"name": "PUSH",
											"source": 7,
											"value": "F"
										},
										{
											"begin": 4275,
											"end": 4293,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4275,
											"end": 4293,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4275,
											"end": 4293,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4268,
											"end": 4298,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "105B1C9958591E4818DB185A5B5959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4314,
											"end": 4332,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4314,
											"end": 4332,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4314,
											"end": 4332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4307,
											"end": 4352,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4369,
											"end": 4387,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4369,
											"end": 4387,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2348,
											"end": 2396,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 4054,
											"end": 4393,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2348,
											"end": 2396,
											"modifierDepth": 3,
											"name": "tag",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 2348,
											"end": 2396,
											"modifierDepth": 3,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2467,
											"end": 2504,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2484,
											"end": 2494,
											"modifierDepth": 3,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4575,
											"end": 4577,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 4571,
											"end": 4586,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 4567,
											"end": 4620,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2467,
											"end": 2504,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4555,
											"end": 4621,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4637,
											"end": 4649,
											"name": "PUSH",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 4637,
											"end": 4649,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4637,
											"end": 4649,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4630,
											"end": 4658,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4630,
											"end": 4658,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4630,
											"end": 4658,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2442,
											"end": 2454,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2442,
											"end": 2454,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4674,
											"end": 4686,
											"name": "PUSH",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 4674,
											"end": 4686,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2467,
											"end": 2504,
											"modifierDepth": 3,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2457,
											"end": 2505,
											"modifierDepth": 3,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2457,
											"end": 2505,
											"modifierDepth": 3,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2457,
											"end": 2505,
											"modifierDepth": 3,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2457,
											"end": 2505,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2457,
											"end": 2505,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2457,
											"end": 2505,
											"modifierDepth": 3,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2442,
											"end": 2505,
											"modifierDepth": 3,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2442,
											"end": 2505,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 2555,
											"end": 2567,
											"modifierDepth": 3,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2555,
											"end": 2567,
											"modifierDepth": 3,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "CALLDATACOPY",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2536,
											"end": 2586,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2569,
											"end": 2579,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 2569,
											"end": 2579,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2569,
											"end": 2579,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2581,
											"end": 2585,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2581,
											"end": 2585,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2536,
											"end": 2554,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 2536,
											"end": 2586,
											"jumpType": "[in]",
											"modifierDepth": 3,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "tag",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 2536,
											"end": 2586,
											"modifierDepth": 3,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2625,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 2515,
											"end": 2625,
											"modifierDepth": 3,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2625,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2515,
											"end": 2625,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2515,
											"end": 2625,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2625,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4899,
											"end": 4901,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2515,
											"end": 2625,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2515,
											"end": 2625,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2625,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4881,
											"end": 4902,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4938,
											"end": 4940,
											"name": "PUSH",
											"source": 7,
											"value": "D"
										},
										{
											"begin": 4918,
											"end": 4936,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4918,
											"end": 4936,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4918,
											"end": 4936,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4911,
											"end": 4941,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "24B73B30B634B210383937B7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "99"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4957,
											"end": 4975,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4957,
											"end": 4975,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4957,
											"end": 4975,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4950,
											"end": 4993,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5010,
											"end": 5028,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5010,
											"end": 5028,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2515,
											"end": 2625,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 4697,
											"end": 5034,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2515,
											"end": 2625,
											"modifierDepth": 3,
											"name": "tag",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 2515,
											"end": 2625,
											"modifierDepth": 3,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2644,
											"end": 2649,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 2644,
											"end": 2649,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2644,
											"end": 2649,
											"modifierDepth": 3,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2636,
											"end": 2700,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 2636,
											"end": 2700,
											"modifierDepth": 3,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2636,
											"end": 2700,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2636,
											"end": 2700,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2636,
											"end": 2700,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2636,
											"end": 2700,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5241,
											"end": 5243,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2636,
											"end": 2700,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2636,
											"end": 2700,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2636,
											"end": 2700,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5223,
											"end": 5244,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5223,
											"end": 5244,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5223,
											"end": 5244,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5260,
											"end": 5278,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 5260,
											"end": 5278,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5260,
											"end": 5278,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5253,
											"end": 5283,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5319,
											"end": 5353,
											"name": "PUSH",
											"source": 7,
											"value": "546F6B656E20616464726573732073686F756C646E2774206265207A65726F21"
										},
										{
											"begin": 5299,
											"end": 5317,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5299,
											"end": 5317,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5299,
											"end": 5317,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5292,
											"end": 5354,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5371,
											"end": 5389,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5371,
											"end": 5389,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2700,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 5039,
											"end": 5395,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2700,
											"modifierDepth": 3,
											"name": "tag",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 2636,
											"end": 2700,
											"modifierDepth": 3,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2763,
											"end": 2768,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 2763,
											"end": 2768,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2756,
											"end": 2794,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2756,
											"end": 2794,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2788,
											"end": 2792,
											"modifierDepth": 3,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2756,
											"end": 2794,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2244,
											"end": 2295,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2797,
											"end": 2804,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2797,
											"end": 2804,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2763,
											"end": 2768,
											"modifierDepth": 3,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2763,
											"end": 2768,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2779,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "70A08231"
										},
										{
											"begin": 2756,
											"end": 2779,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "STATICCALL",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2756,
											"end": 2794,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "tag",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 2756,
											"end": 2794,
											"jumpType": "[in]",
											"modifierDepth": 3,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "tag",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 2756,
											"end": 2794,
											"modifierDepth": 3,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2756,
											"end": 2804,
											"modifierDepth": 3,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2735,
											"end": 2851,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 2735,
											"end": 2851,
											"modifierDepth": 3,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2735,
											"end": 2851,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2735,
											"end": 2851,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2735,
											"end": 2851,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2735,
											"end": 2851,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5791,
											"end": 5793,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2735,
											"end": 2851,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2735,
											"end": 2851,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2735,
											"end": 2851,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5773,
											"end": 5794,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5830,
											"end": 5832,
											"name": "PUSH",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 5810,
											"end": 5828,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 5810,
											"end": 5828,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5810,
											"end": 5828,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5803,
											"end": 5833,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E73756666696369656E742042616C616E636521"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "58"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5849,
											"end": 5867,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5849,
											"end": 5867,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5849,
											"end": 5867,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5842,
											"end": 5893,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5910,
											"end": 5928,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5910,
											"end": 5928,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2735,
											"end": 2851,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 5589,
											"end": 5934,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2735,
											"end": 2851,
											"modifierDepth": 3,
											"name": "tag",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 2735,
											"end": 2851,
											"modifierDepth": 3,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2865,
											"end": 2876,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2865,
											"end": 2876,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2861,
											"end": 2946,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 2861,
											"end": 2946,
											"modifierDepth": 3,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2899,
											"end": 2904,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 2899,
											"end": 2904,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2892,
											"end": 2935,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2892,
											"end": 2935,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2915,
											"end": 2925,
											"modifierDepth": 3,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2892,
											"end": 2935,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6113,
											"end": 6164,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6180,
											"end": 6198,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6180,
											"end": 6198,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6180,
											"end": 6198,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6173,
											"end": 6207,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 6173,
											"end": 6207,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6173,
											"end": 6207,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2899,
											"end": 2904,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2899,
											"end": 2904,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2899,
											"end": 2904,
											"modifierDepth": 3,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2899,
											"end": 2904,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2914,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 2892,
											"end": 2914,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6086,
											"end": 6104,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6086,
											"end": 6104,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2892,
											"end": 2935,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "tag",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 2892,
											"end": 2935,
											"jumpType": "[in]",
											"modifierDepth": 3,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "tag",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2892,
											"end": 2935,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2861,
											"end": 2946,
											"modifierDepth": 3,
											"name": "tag",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 2861,
											"end": 2946,
											"modifierDepth": 3,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3014,
											"end": 3024,
											"modifierDepth": 3,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 3006,
											"end": 3025,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3006,
											"end": 3025,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3006,
											"end": 3025,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3006,
											"end": 3025,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3006,
											"end": 3013,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 3006,
											"end": 3025,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3006,
											"end": 3025,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3006,
											"end": 3025,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3006,
											"end": 3025,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3006,
											"end": 3025,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3006,
											"end": 3025,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3006,
											"end": 3025,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3006,
											"end": 3032,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3006,
											"end": 3032,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3006,
											"end": 3032,
											"modifierDepth": 3,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3028,
											"end": 3032,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3006,
											"end": 3032,
											"modifierDepth": 3,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 3006,
											"end": 3032,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3006,
											"end": 3032,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3048,
											"end": 3076,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3048,
											"end": 3076,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "D8138F8A3F377C5259CA548E70E4C2DE94F129F5A11036A15B69513CBA2B426A"
										},
										{
											"begin": 3048,
											"end": 3076,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3048,
											"end": 3076,
											"modifierDepth": 3,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 3048,
											"end": 3076,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3068,
											"end": 3075,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 529,
											"end": 554,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 529,
											"end": 554,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 502,
											"end": 520,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 383,
											"end": 560,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3048,
											"end": 3076,
											"modifierDepth": 3,
											"name": "tag",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 3048,
											"end": 3076,
											"modifierDepth": 3,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3048,
											"end": 3076,
											"modifierDepth": 3,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3048,
											"end": 3076,
											"modifierDepth": 3,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3048,
											"end": 3076,
											"modifierDepth": 3,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3048,
											"end": 3076,
											"modifierDepth": 3,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3048,
											"end": 3076,
											"modifierDepth": 3,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3048,
											"end": 3076,
											"modifierDepth": 3,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3048,
											"end": 3076,
											"modifierDepth": 3,
											"name": "LOG2",
											"source": 6
										},
										{
											"begin": 2329,
											"end": 3083,
											"modifierDepth": 3,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2303,
											"end": 2323,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 1716,
											"end": 1717,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2629,
											"end": 2838,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2303,
											"end": 2323,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 2303,
											"end": 2323,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2188,
											"end": 3083,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2188,
											"end": 3083,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3376,
											"end": 3439,
											"name": "tag",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 3376,
											"end": 3439,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3422,
											"end": 3432,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 3422,
											"end": 3430,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 3422,
											"end": 3432,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3422,
											"end": 3432,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 3422,
											"end": 3432,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3376,
											"end": 3439,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1648,
											"end": 1762,
											"name": "tag",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 1648,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1705,
											"end": 1715,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1705,
											"end": 1723,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1723,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1705,
											"end": 1723,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1723,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1723,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1718,
											"end": 1723,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1733,
											"end": 1751,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1733,
											"end": 1755,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1648,
											"end": 1762,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1768,
											"end": 1890,
											"name": "tag",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 1768,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1850,
											"end": 1871,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 1850,
											"end": 1883,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1768,
											"end": 1890,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 2384,
											"end": 2385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 2357,
											"end": 2387,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1244,
											"end": 1348,
											"name": "tag",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 1244,
											"end": 1348,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1317,
											"end": 1327,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1317,
											"end": 1341,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1244,
											"end": 1348,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3311,
											"end": 3370,
											"name": "tag",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 3311,
											"end": 3370,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3355,
											"end": 3363,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 3355,
											"end": 3361,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "176"
										},
										{
											"begin": 3355,
											"end": 3363,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "tag",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4575,
											"end": 4577,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 4571,
											"end": 4586,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 4571,
											"end": 4586,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4571,
											"end": 4586,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 4567,
											"end": 4620,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4555,
											"end": 4621,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4637,
											"end": 4649,
											"name": "PUSH",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 4637,
											"end": 4649,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4637,
											"end": 4649,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4630,
											"end": 4658,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4630,
											"end": 4658,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4630,
											"end": 4658,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2038,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2034,
											"end": 2038,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2034,
											"end": 2038,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2034,
											"end": 2038,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4674,
											"end": 4686,
											"name": "PUSH",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 4674,
											"end": 4686,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2075,
											"end": 2107,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2065,
											"end": 2108,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2065,
											"end": 2108,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2065,
											"end": 2108,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2065,
											"end": 2108,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2065,
											"end": 2108,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2065,
											"end": 2108,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2050,
											"end": 2108,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2050,
											"end": 2108,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "CALLDATACOPY",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2158,
											"end": 2168,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 2158,
											"end": 2168,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2158,
											"end": 2168,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2170,
											"end": 2174,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2170,
											"end": 2174,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2125,
											"end": 2143,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 2125,
											"end": 2175,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "tag",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 2125,
											"end": 2175,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2118,
											"end": 2175,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": 1896,
											"end": 2182,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1896,
											"end": 2182,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1510,
											"end": 1642,
											"name": "tag",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 1510,
											"end": 1642,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1572,
											"end": 1582,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1572,
											"end": 1589,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1589,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1572,
											"end": 1589,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1572,
											"end": 1589,
											"modifierDepth": 1,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1589,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1589,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1620,
											"end": 1635,
											"modifierDepth": 1,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 1599,
											"end": 1617,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1599,
											"end": 1635,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1510,
											"end": 1642,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3445,
											"end": 3674,
											"name": "tag",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 3445,
											"end": 3674,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3543,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3533,
											"end": 3543,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3498,
											"end": 3502,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3498,
											"end": 3502,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3533,
											"end": 3543,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3543,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3543,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3533,
											"end": 3543,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3612,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3612,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3612,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 3533,
											"end": 3612,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3612,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3611,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 3570,
											"end": 3591,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 3570,
											"end": 3591,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3549,
											"end": 3567,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 3549,
											"end": 3567,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3549,
											"end": 3591,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 3549,
											"end": 3591,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3549,
											"end": 3591,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3549,
											"end": 3591,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 3549,
											"end": 3591,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3549,
											"end": 3591,
											"name": "tag",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 3549,
											"end": 3591,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3548,
											"end": 3611,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 3548,
											"end": 3611,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3612,
											"name": "tag",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 3533,
											"end": 3612,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3667,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3667,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3667,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 3533,
											"end": 3667,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3667,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3648,
											"end": 3666,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 3648,
											"end": 3666,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3629,
											"end": 3644,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 3629,
											"end": 3666,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 3629,
											"end": 3666,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3533,
											"end": 3667,
											"name": "tag",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 3533,
											"end": 3667,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3514,
											"end": 3667,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3514,
											"end": 3667,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3445,
											"end": 3674,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3445,
											"end": 3674,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3089,
											"end": 3305,
											"name": "tag",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 3089,
											"end": 3305,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3181,
											"end": 3186,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 3181,
											"end": 3186,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3215,
											"end": 3250,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3215,
											"end": 3250,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3244,
											"end": 3248,
											"modifierDepth": 1,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3215,
											"end": 3250,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2244,
											"end": 2295,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3181,
											"end": 3186,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3181,
											"end": 3186,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3181,
											"end": 3186,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3181,
											"end": 3186,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3154,
											"end": 3171,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3154,
											"end": 3171,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3181,
											"end": 3186,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3181,
											"end": 3186,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3235,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "70A08231"
										},
										{
											"begin": 3215,
											"end": 3235,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "STATICCALL",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3215,
											"end": 3250,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 3215,
											"end": 3250,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 3215,
											"end": 3250,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3280,
											"end": 3288,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3280,
											"end": 3288,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3280,
											"end": 3288,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3260,
											"end": 3298,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3260,
											"end": 3298,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3280,
											"end": 3288,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3280,
											"end": 3288,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3280,
											"end": 3288,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6113,
											"end": 6164,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6113,
											"end": 6164,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6113,
											"end": 6164,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6113,
											"end": 6164,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6180,
											"end": 6198,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6180,
											"end": 6198,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6180,
											"end": 6198,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6173,
											"end": 6207,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6173,
											"end": 6207,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6173,
											"end": 6207,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3197,
											"end": 3250,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3197,
											"end": 3250,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3260,
											"end": 3279,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3279,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3279,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3279,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3279,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 3260,
											"end": 3279,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6086,
											"end": 6104,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6086,
											"end": 6104,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3260,
											"end": 3298,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3260,
											"end": 3298,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 3260,
											"end": 3298,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2700,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2295,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 2098,
											"end": 2301,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 2742,
											"end": 2750,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 2723,
											"end": 2751,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2295,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 2098,
											"end": 2301,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1767,
											"end": 1873,
											"name": "tag",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 1767,
											"end": 1873,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1662,
											"end": 1666,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1685,
											"end": 1692,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1685,
											"end": 1692,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 1685,
											"end": 1692,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1836,
											"end": 1845,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1828,
											"end": 1866,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "155"
										},
										{
											"begin": 1828,
											"end": 1866,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1828,
											"end": 1866,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1828,
											"end": 1866,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1828,
											"end": 1866,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1828,
											"end": 1866,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6702,
											"end": 6704,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1828,
											"end": 1866,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1828,
											"end": 1866,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1828,
											"end": 1866,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6684,
											"end": 6705,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6741,
											"end": 6743,
											"name": "PUSH",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 6721,
											"end": 6739,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6721,
											"end": 6739,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6721,
											"end": 6739,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6714,
											"end": 6744,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "14185D5CD8589B194E881C185D5CD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "82"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6760,
											"end": 6778,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6760,
											"end": 6778,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6760,
											"end": 6778,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6753,
											"end": 6799,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6816,
											"end": 6834,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6816,
											"end": 6834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1828,
											"end": 1866,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 6500,
											"end": 6840,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "218"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7047,
											"end": 7049,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7029,
											"end": 7050,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7086,
											"end": 7088,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 7066,
											"end": 7084,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 7066,
											"end": 7084,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7066,
											"end": 7084,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7059,
											"end": 7089,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7125,
											"end": 7158,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 7105,
											"end": 7123,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 7105,
											"end": 7123,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7105,
											"end": 7123,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7098,
											"end": 7159,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7176,
											"end": 7194,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 7176,
											"end": 7194,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 6845,
											"end": 7200,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "tag",
											"source": 2,
											"value": "218"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2598,
											"end": 2605,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2598,
											"end": 2616,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2336,
											"end": 2623,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1265,
											"end": 1419,
											"name": "tag",
											"source": 5,
											"value": "127"
										},
										{
											"begin": 1265,
											"end": 1419,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1356,
											"end": 1360,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1408,
											"end": 1412,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1379,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "222"
										},
										{
											"begin": 1392,
											"end": 1397,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1399,
											"end": 1403,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1379,
											"end": 1391,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "223"
										},
										{
											"begin": 1379,
											"end": 1404,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1379,
											"end": 1404,
											"name": "tag",
											"source": 5,
											"value": "222"
										},
										{
											"begin": 1379,
											"end": 1404,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1379,
											"end": 1412,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1379,
											"end": 1412,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 1265,
											"end": 1419,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1265,
											"end": 1419,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2433,
											"end": 2550,
											"name": "tag",
											"source": 1,
											"value": "156"
										},
										{
											"begin": 2433,
											"end": 2550,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1486,
											"end": 1502,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "226"
										},
										{
											"begin": 1486,
											"end": 1500,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "227"
										},
										{
											"begin": 1486,
											"end": 1502,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1486,
											"end": 1502,
											"name": "tag",
											"source": 1,
											"value": "226"
										},
										{
											"begin": 1486,
											"end": 1502,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2501,
											"end": 2506,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2491,
											"end": 2506,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2491,
											"end": 2506,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2491,
											"end": 2506,
											"modifierDepth": 1,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2491,
											"end": 2506,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2491,
											"end": 2506,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2521,
											"end": 2543,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 2530,
											"end": 2542,
											"modifierDepth": 1,
											"name": "tag",
											"source": 1,
											"value": "229"
										},
										{
											"begin": 2530,
											"end": 2542,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2521,
											"end": 2543,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2521,
											"end": 2543,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2262,
											"end": 2294,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2262,
											"end": 2294,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2262,
											"end": 2294,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2244,
											"end": 2295,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2244,
											"end": 2295,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2232,
											"end": 2234,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2217,
											"end": 2235,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2521,
											"end": 2543,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2521,
											"end": 2543,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2521,
											"end": 2543,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2521,
											"end": 2543,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2521,
											"end": 2543,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2521,
											"end": 2543,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2521,
											"end": 2543,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 2433,
											"end": 2550,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "100"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2975,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2186,
											"end": 2301,
											"name": "tag",
											"source": 1,
											"value": "176"
										},
										{
											"begin": 2186,
											"end": 2301,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1239,
											"end": 1258,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "233"
										},
										{
											"begin": 1239,
											"end": 1256,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 1239,
											"end": 1258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1239,
											"end": 1258,
											"name": "tag",
											"source": 1,
											"value": "233"
										},
										{
											"begin": 1239,
											"end": 1258,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2245,
											"end": 2252,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2245,
											"end": 2259,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2245,
											"end": 2259,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2245,
											"end": 2259,
											"modifierDepth": 1,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2255,
											"end": 2259,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2245,
											"end": 2259,
											"modifierDepth": 1,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 2245,
											"end": 2259,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2245,
											"end": 2259,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2274,
											"end": 2294,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
										},
										{
											"begin": 2281,
											"end": 2293,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "229"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 656,
											"end": 752,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1967,
											"end": 2257,
											"name": "tag",
											"source": 5,
											"value": "223"
										},
										{
											"begin": 1967,
											"end": 2257,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2050,
											"end": 2057,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2092,
											"end": 2096,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2050,
											"end": 2057,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2106,
											"end": 2222,
											"name": "tag",
											"source": 5,
											"value": "239"
										},
										{
											"begin": 2106,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2130,
											"end": 2135,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2130,
											"end": 2142,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2126,
											"end": 2127,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2126,
											"end": 2142,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 2106,
											"end": 2222,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2106,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 2106,
											"end": 2222,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2178,
											"end": 2211,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 2188,
											"end": 2200,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2207,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 2208,
											"end": 2209,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "245"
										},
										{
											"begin": 2202,
											"end": 2210,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "tag",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2210,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2178,
											"end": 2187,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 2178,
											"end": 2211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2178,
											"end": 2211,
											"name": "tag",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 2178,
											"end": 2211,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2163,
											"end": 2211,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2144,
											"end": 2147,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2144,
											"end": 2147,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2106,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "239"
										},
										{
											"begin": 2106,
											"end": 2222,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2106,
											"end": 2222,
											"name": "tag",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 2106,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2238,
											"end": 2250,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1967,
											"end": 2257,
											"name": "tag",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 1967,
											"end": 2257,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1967,
											"end": 2257,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1967,
											"end": 2257,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1967,
											"end": 2257,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1967,
											"end": 2257,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1967,
											"end": 2257,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1945,
											"end": 2051,
											"name": "tag",
											"source": 1,
											"value": "227"
										},
										{
											"begin": 1945,
											"end": 2051,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1662,
											"end": 1666,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1685,
											"end": 1692,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1685,
											"end": 1692,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 1685,
											"end": 1692,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2003,
											"end": 2044,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "155"
										},
										{
											"begin": 2003,
											"end": 2044,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2003,
											"end": 2044,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2003,
											"end": 2044,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2003,
											"end": 2044,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2003,
											"end": 2044,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7539,
											"end": 7541,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2003,
											"end": 2044,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2003,
											"end": 2044,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2003,
											"end": 2044,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7521,
											"end": 7542,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7578,
											"end": 7580,
											"name": "PUSH",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 7558,
											"end": 7576,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 7558,
											"end": 7576,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7558,
											"end": 7576,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7551,
											"end": 7581,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "14185D5CD8589B194E881B9BDD081C185D5CD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "62"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7597,
											"end": 7615,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 7597,
											"end": 7615,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7597,
											"end": 7615,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7590,
											"end": 7640,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7657,
											"end": 7675,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 7657,
											"end": 7675,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2003,
											"end": 2044,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 7337,
											"end": 7681,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9229,
											"end": 9376,
											"name": "tag",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 9229,
											"end": 9376,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9292,
											"end": 9299,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 9322,
											"end": 9323,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9318,
											"end": 9319,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9318,
											"end": 9323,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 9318,
											"end": 9369,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "253"
										},
										{
											"begin": 9318,
											"end": 9369,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 9564,
											"end": 9577,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 9655,
											"end": 9670,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 9655,
											"end": 9670,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9655,
											"end": 9670,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9690,
											"end": 9694,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 9683,
											"end": 9698,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 9683,
											"end": 9698,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9683,
											"end": 9698,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9736,
											"end": 9740,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9720,
											"end": 9741,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9720,
											"end": 9741,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 9318,
											"end": 9369,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "257"
										},
										{
											"begin": 9318,
											"end": 9369,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9318,
											"end": 9369,
											"name": "tag",
											"source": 5,
											"value": "253"
										},
										{
											"begin": 9318,
											"end": 9369,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9564,
											"end": 9577,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 9655,
											"end": 9670,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9655,
											"end": 9670,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9655,
											"end": 9670,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9690,
											"end": 9694,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 9683,
											"end": 9698,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9683,
											"end": 9698,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9683,
											"end": 9698,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9736,
											"end": 9740,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9720,
											"end": 9741,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9720,
											"end": 9741,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 9326,
											"end": 9346,
											"name": "tag",
											"source": 5,
											"value": "257"
										},
										{
											"begin": 9326,
											"end": 9346,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9311,
											"end": 9369,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 9229,
											"end": 9376,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9229,
											"end": 9376,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 7,
											"value": "259"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 111,
											"end": 181,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 111,
											"end": 181,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 111,
											"end": 181,
											"name": "tag",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 111,
											"end": 181,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14,
											"end": 187,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 14,
											"end": 187,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 14,
											"end": 187,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 187,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 192,
											"end": 378,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 192,
											"end": 378,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 272,
											"end": 324,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 272,
											"end": 324,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "265"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 272,
											"end": 324,
											"name": "tag",
											"source": 7,
											"value": "265"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 362,
											"end": 371,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "259"
										},
										{
											"begin": 343,
											"end": 372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 565,
											"end": 932,
											"name": "tag",
											"source": 7,
											"value": "260"
										},
										{
											"begin": 565,
											"end": 932,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 628,
											"end": 636,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 638,
											"end": 644,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 692,
											"end": 695,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 685,
											"end": 689,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 677,
											"end": 683,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 673,
											"end": 690,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 669,
											"end": 696,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 659,
											"end": 714,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 659,
											"end": 714,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 710,
											"end": 711,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 708,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 700,
											"end": 712,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 659,
											"end": 714,
											"name": "tag",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 659,
											"end": 714,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 733,
											"end": 753,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 733,
											"end": 753,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 776,
											"end": 794,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 765,
											"end": 795,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 765,
											"end": 795,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 762,
											"end": 812,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 762,
											"end": 812,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "270"
										},
										{
											"begin": 762,
											"end": 812,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 808,
											"end": 809,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 805,
											"end": 806,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 798,
											"end": 810,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 762,
											"end": 812,
											"name": "tag",
											"source": 7,
											"value": "270"
										},
										{
											"begin": 762,
											"end": 812,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 845,
											"end": 849,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 837,
											"end": 843,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 833,
											"end": 850,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 821,
											"end": 850,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 821,
											"end": 850,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 905,
											"end": 908,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 898,
											"end": 902,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 888,
											"end": 894,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 885,
											"end": 886,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 881,
											"end": 895,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 873,
											"end": 879,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 869,
											"end": 896,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 865,
											"end": 903,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 862,
											"end": 909,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 859,
											"end": 926,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 859,
											"end": 926,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "271"
										},
										{
											"begin": 859,
											"end": 926,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 922,
											"end": 923,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 919,
											"end": 920,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 912,
											"end": 924,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 859,
											"end": 926,
											"name": "tag",
											"source": 7,
											"value": "271"
										},
										{
											"begin": 859,
											"end": 926,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 565,
											"end": 932,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 565,
											"end": 932,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 565,
											"end": 932,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 565,
											"end": 932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 565,
											"end": 932,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 565,
											"end": 932,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 937,
											"end": 1488,
											"name": "tag",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 937,
											"end": 1488,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1032,
											"end": 1038,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1040,
											"end": 1046,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1048,
											"end": 1054,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1101,
											"end": 1103,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1089,
											"end": 1098,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1080,
											"end": 1087,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1076,
											"end": 1099,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1069,
											"end": 1121,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1069,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "273"
										},
										{
											"begin": 1069,
											"end": 1121,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1117,
											"end": 1118,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1114,
											"end": 1115,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1107,
											"end": 1119,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1069,
											"end": 1121,
											"name": "tag",
											"source": 7,
											"value": "273"
										},
										{
											"begin": 1069,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1162,
											"end": 1185,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1162,
											"end": 1185,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1162,
											"end": 1185,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1260,
											"end": 1262,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1245,
											"end": 1263,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1245,
											"end": 1263,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1232,
											"end": 1264,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1287,
											"end": 1305,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1276,
											"end": 1306,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1276,
											"end": 1306,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1273,
											"end": 1323,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1273,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "274"
										},
										{
											"begin": 1273,
											"end": 1323,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1319,
											"end": 1320,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1316,
											"end": 1317,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1309,
											"end": 1321,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1273,
											"end": 1323,
											"name": "tag",
											"source": 7,
											"value": "274"
										},
										{
											"begin": 1273,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1358,
											"end": 1428,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 1420,
											"end": 1427,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1411,
											"end": 1417,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1400,
											"end": 1409,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 1396,
											"end": 1418,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1358,
											"end": 1428,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "260"
										},
										{
											"begin": 1358,
											"end": 1428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1358,
											"end": 1428,
											"name": "tag",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 1358,
											"end": 1428,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 937,
											"end": 1488,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 937,
											"end": 1488,
											"name": "SWAP8",
											"source": 7
										},
										{
											"begin": 1447,
											"end": 1455,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1447,
											"end": 1455,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1332,
											"end": 1428,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1332,
											"end": 1428,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 937,
											"end": 1488,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1867,
											"end": 2093,
											"name": "tag",
											"source": 7,
											"value": "57"
										},
										{
											"begin": 1867,
											"end": 2093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1926,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1979,
											"end": 1981,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1967,
											"end": 1976,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1958,
											"end": 1965,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1977,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1950,
											"end": 1982,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1947,
											"end": 1999,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1947,
											"end": 1999,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 1947,
											"end": 1999,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1995,
											"end": 1996,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1992,
											"end": 1993,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1985,
											"end": 1997,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1947,
											"end": 1999,
											"name": "tag",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 1947,
											"end": 1999,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2040,
											"end": 2063,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2063,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1867,
											"end": 2093,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1867,
											"end": 2093,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 3116,
											"name": "tag",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 2491,
											"end": 3116,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2601,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2603,
											"end": 2609,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2611,
											"end": 2617,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2619,
											"end": 2625,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2672,
											"end": 2674,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2660,
											"end": 2669,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 2658,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 2647,
											"end": 2670,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2643,
											"end": 2675,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 2640,
											"end": 2692,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2640,
											"end": 2692,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 2640,
											"end": 2692,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2689,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2685,
											"end": 2686,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2678,
											"end": 2690,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2640,
											"end": 2692,
											"name": "tag",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 2640,
											"end": 2692,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2711,
											"end": 2740,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "285"
										},
										{
											"begin": 2730,
											"end": 2739,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2711,
											"end": 2740,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "259"
										},
										{
											"begin": 2711,
											"end": 2740,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2711,
											"end": 2740,
											"name": "tag",
											"source": 7,
											"value": "285"
										},
										{
											"begin": 2711,
											"end": 2740,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2701,
											"end": 2740,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2809,
											"end": 2811,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2812,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2794,
											"end": 2812,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2781,
											"end": 2813,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2781,
											"end": 2813,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2888,
											"end": 2890,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2873,
											"end": 2891,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2873,
											"end": 2891,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2860,
											"end": 2892,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2915,
											"end": 2933,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2904,
											"end": 2934,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2904,
											"end": 2934,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2901,
											"end": 2951,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2901,
											"end": 2951,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 2901,
											"end": 2951,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2947,
											"end": 2948,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2944,
											"end": 2945,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2937,
											"end": 2949,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2901,
											"end": 2951,
											"name": "tag",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 2901,
											"end": 2951,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2986,
											"end": 3056,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "287"
										},
										{
											"begin": 3048,
											"end": 3055,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 3039,
											"end": 3045,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3028,
											"end": 3037,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 3024,
											"end": 3046,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2986,
											"end": 3056,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "260"
										},
										{
											"begin": 2986,
											"end": 3056,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2986,
											"end": 3056,
											"name": "tag",
											"source": 7,
											"value": "287"
										},
										{
											"begin": 2986,
											"end": 3056,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 3116,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 3116,
											"name": "SWAP9",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 3116,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 3116,
											"name": "SWAP8",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3075,
											"end": 3083,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2491,
											"end": 3116,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3473,
											"end": 3695,
											"name": "tag",
											"source": 7,
											"value": "116"
										},
										{
											"begin": 3473,
											"end": 3695,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3538,
											"end": 3547,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3538,
											"end": 3547,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3538,
											"end": 3547,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3559,
											"end": 3569,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3559,
											"end": 3569,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3559,
											"end": 3569,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3556,
											"end": 3689,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3556,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "238"
										},
										{
											"begin": 3556,
											"end": 3689,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3611,
											"end": 3621,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 3606,
											"end": 3609,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 3602,
											"end": 3622,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 3599,
											"end": 3600,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3592,
											"end": 3623,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3646,
											"end": 3650,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 3643,
											"end": 3644,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3636,
											"end": 3651,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3674,
											"end": 3678,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3671,
											"end": 3672,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3664,
											"end": 3679,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5400,
											"end": 5584,
											"name": "tag",
											"source": 7,
											"value": "138"
										},
										{
											"begin": 5400,
											"end": 5584,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5470,
											"end": 5476,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5523,
											"end": 5525,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5511,
											"end": 5520,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5502,
											"end": 5509,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5498,
											"end": 5521,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5494,
											"end": 5526,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 5491,
											"end": 5543,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5491,
											"end": 5543,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "297"
										},
										{
											"begin": 5491,
											"end": 5543,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5539,
											"end": 5540,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5536,
											"end": 5537,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5529,
											"end": 5541,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5491,
											"end": 5543,
											"name": "tag",
											"source": 7,
											"value": "297"
										},
										{
											"begin": 5491,
											"end": 5543,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5562,
											"end": 5578,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5562,
											"end": 5578,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5400,
											"end": 5584,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5400,
											"end": 5584,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6218,
											"end": 6495,
											"name": "tag",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 6218,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6285,
											"end": 6291,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6338,
											"end": 6340,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6326,
											"end": 6335,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6317,
											"end": 6324,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6313,
											"end": 6336,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6309,
											"end": 6341,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 6306,
											"end": 6358,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6306,
											"end": 6358,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "301"
										},
										{
											"begin": 6306,
											"end": 6358,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6354,
											"end": 6355,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6351,
											"end": 6352,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6344,
											"end": 6356,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6306,
											"end": 6358,
											"name": "tag",
											"source": 7,
											"value": "301"
										},
										{
											"begin": 6306,
											"end": 6358,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6386,
											"end": 6395,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6380,
											"end": 6396,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6439,
											"end": 6444,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6432,
											"end": 6445,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6425,
											"end": 6446,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6418,
											"end": 6423,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6415,
											"end": 6447,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 6405,
											"end": 6465,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 6405,
											"end": 6465,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6461,
											"end": 6462,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6458,
											"end": 6459,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6451,
											"end": 6463,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 7205,
											"end": 7332,
											"name": "tag",
											"source": 7,
											"value": "245"
										},
										{
											"begin": 7205,
											"end": 7332,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7266,
											"end": 7276,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 7261,
											"end": 7264,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 7257,
											"end": 7277,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 7254,
											"end": 7255,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7247,
											"end": 7278,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7297,
											"end": 7301,
											"name": "PUSH",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 7294,
											"end": 7295,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7287,
											"end": 7302,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7321,
											"end": 7325,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 7318,
											"end": 7319,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7311,
											"end": 7326,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/security/Pausable.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"SmartContractsInterview/MerkleDistribution.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"checkClaimingRound()": "c27f7e26",
							"claim(uint256,bytes32[])": "2f52ebb7",
							"claimed(address)": "c884ef83",
							"claimingRoundDuration()": "49039527",
							"endClaimingRound()": "5e4f3a9c",
							"isClaiming()": "7cc6cb7a",
							"merkleRoot()": "2eb4a7ab",
							"owner()": "8da5cb5b",
							"pause()": "8456cb59",
							"paused()": "5c975abb",
							"renounceOwnership()": "715018a6",
							"setClaimingRoundDuration(uint256)": "6038efad",
							"setMerkleRoot(bytes32)": "7cb64759",
							"setStartClaimingRound()": "b6cd5d1a",
							"setToken(address)": "144fa6d7",
							"startClaimingRound()": "428e7565",
							"token()": "fc0c546a",
							"transferOwnership(address)": "f2fde38b",
							"treasury()": "61d027b3",
							"unClaimedTokenToTreasury()": "de805da7",
							"unpause()": "3f4ba83a",
							"verifyUser(address,uint256,bytes32[])": "a0074c67"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkClaimingRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingRoundDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endClaimingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaiming\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setClaimingRoundDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStartClaimingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startClaimingRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unClaimedTokenToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartContractsInterview/MerkleDistribution.sol\":\"MerkleDistributor\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/security/Pausable.sol\":{\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ddabb16009cd17eaca3143feadf450ac13e72919ebe2ca50e00f61cb78bc004\",\"dweb:/ipfs/QmSPwPxX7d6TTWakN5jy5wsaGkS1y9TW8fuhGSraMkLk2B\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5d3d47d35af4373743a559ea4b9b7ecfe4bab6f0703f410c1e59959b7966ac\",\"dweb:/ipfs/QmTHdoghh4WLu4yURjGEgRk162pcwwdsG52MPGa12GqnGR\"]},\"SmartContractsInterview/MerkleDistribution.sol\":{\"keccak256\":\"0xbe4cdcfe05d86007632bfd882c2764997f3c71900331f6fabb2f10a203a18ba9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1482ac9f10bf2a679e83c11eb247c58e5bbea800c1edd67f753461b66f5a39ef\",\"dweb:/ipfs/QmYJmmmuuhoj6UmpNrhhMQompnzxCzQsAtw3Ct6G5Xn9Hy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 165,
								"contract": "SmartContractsInterview/MerkleDistribution.sol:MerkleDistributor",
								"label": "_paused",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 8,
								"contract": "SmartContractsInterview/MerkleDistribution.sol:MerkleDistributor",
								"label": "_owner",
								"offset": 1,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 266,
								"contract": "SmartContractsInterview/MerkleDistribution.sol:MerkleDistributor",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 980,
								"contract": "SmartContractsInterview/MerkleDistribution.sol:MerkleDistributor",
								"label": "merkleRoot",
								"offset": 0,
								"slot": "2",
								"type": "t_bytes32"
							},
							{
								"astId": 982,
								"contract": "SmartContractsInterview/MerkleDistribution.sol:MerkleDistributor",
								"label": "token",
								"offset": 0,
								"slot": "3",
								"type": "t_address"
							},
							{
								"astId": 984,
								"contract": "SmartContractsInterview/MerkleDistribution.sol:MerkleDistributor",
								"label": "treasury",
								"offset": 0,
								"slot": "4",
								"type": "t_address"
							},
							{
								"astId": 986,
								"contract": "SmartContractsInterview/MerkleDistribution.sol:MerkleDistributor",
								"label": "isClaiming",
								"offset": 20,
								"slot": "4",
								"type": "t_bool"
							},
							{
								"astId": 988,
								"contract": "SmartContractsInterview/MerkleDistribution.sol:MerkleDistributor",
								"label": "startClaimingRound",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 990,
								"contract": "SmartContractsInterview/MerkleDistribution.sol:MerkleDistributor",
								"label": "claimingRoundDuration",
								"offset": 0,
								"slot": "6",
								"type": "t_uint256"
							},
							{
								"astId": 994,
								"contract": "SmartContractsInterview/MerkleDistribution.sol:MerkleDistributor",
								"label": "claimed",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							428
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 429,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 428,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 428,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								428
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 410,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 410,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/Pausable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/Pausable.sol",
					"exportedSymbols": {
						"Context": [
							428
						],
						"Pausable": [
							255
						]
					},
					"id": 256,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 150,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 256,
							"sourceUnit": 429,
							"src": "130:30:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 152,
										"name": "Context",
										"nameLocations": [
											"632:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 428,
										"src": "632:7:1"
									},
									"id": 153,
									"nodeType": "InheritanceSpecifier",
									"src": "632:7:1"
								}
							],
							"canonicalName": "Pausable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 151,
								"nodeType": "StructuredDocumentation",
								"src": "162:439:1",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 255,
							"linearizedBaseContracts": [
								255,
								428
							],
							"name": "Pausable",
							"nameLocation": "620:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "646:73:1",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"eventSelector": "62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258",
									"id": 158,
									"name": "Paused",
									"nameLocation": "730:6:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "745:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "737:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "737:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "736:17:1"
									},
									"src": "724:30:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "760:70:1",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"eventSelector": "5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa",
									"id": 163,
									"name": "Unpaused",
									"nameLocation": "841:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "858:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "850:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "850:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:17:1"
									},
									"src": "835:32:1"
								},
								{
									"constant": false,
									"id": 165,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "886:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 255,
									"src": "873:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 164,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "873:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 173,
										"nodeType": "Block",
										"src": "986:32:1",
										"statements": [
											{
												"expression": {
													"id": 171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 169,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "996:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 170,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1006:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "996:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 172,
												"nodeType": "ExpressionStatement",
												"src": "996:15:1"
											}
										]
									},
									"documentation": {
										"id": 166,
										"nodeType": "StructuredDocumentation",
										"src": "900:67:1",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 174,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "983:2:1"
									},
									"returnParameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "986:0:1"
									},
									"scope": 255,
									"src": "972:46:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 181,
										"nodeType": "Block",
										"src": "1229:47:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 177,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 211,
														"src": "1239:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1239:19:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 179,
												"nodeType": "ExpressionStatement",
												"src": "1239:19:1"
											},
											{
												"id": 180,
												"nodeType": "PlaceholderStatement",
												"src": "1268:1:1"
											}
										]
									},
									"documentation": {
										"id": 175,
										"nodeType": "StructuredDocumentation",
										"src": "1024:175:1",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 182,
									"name": "whenNotPaused",
									"nameLocation": "1213:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1226:2:1"
									},
									"src": "1204:72:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 189,
										"nodeType": "Block",
										"src": "1476:44:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 185,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 222,
														"src": "1486:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1486:16:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 187,
												"nodeType": "ExpressionStatement",
												"src": "1486:16:1"
											},
											{
												"id": 188,
												"nodeType": "PlaceholderStatement",
												"src": "1512:1:1"
											}
										]
									},
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "1282:167:1",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 190,
									"name": "whenPaused",
									"nameLocation": "1463:10:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1473:2:1"
									},
									"src": "1454:66:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 198,
										"nodeType": "Block",
										"src": "1668:31:1",
										"statements": [
											{
												"expression": {
													"id": 196,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 165,
													"src": "1685:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 195,
												"id": 197,
												"nodeType": "Return",
												"src": "1678:14:1"
											}
										]
									},
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "1526:84:1",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 199,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "1624:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1630:2:1"
									},
									"returnParameters": {
										"id": 195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "1662:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 193,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1662:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1661:6:1"
									},
									"scope": 255,
									"src": "1615:84:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 210,
										"nodeType": "Block",
										"src": "1818:55:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 206,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1836:9:1",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 204,
																	"name": "paused",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 199,
																	"src": "1837:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																		"typeString": "function () view returns (bool)"
																	}
																},
																"id": 205,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1837:8:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a20706175736564",
															"id": 207,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1847:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															},
															"value": "Pausable: paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															}
														],
														"id": 203,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1828:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1828:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 209,
												"nodeType": "ExpressionStatement",
												"src": "1828:38:1"
											}
										]
									},
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "1705:57:1",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 211,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "1776:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:1"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1818:0:1"
									},
									"scope": 255,
									"src": "1767:106:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 221,
										"nodeType": "Block",
										"src": "1993:58:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 216,
																"name": "paused",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 199,
																"src": "2011:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 217,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2011:8:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a206e6f7420706175736564",
															"id": 218,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2021:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															},
															"value": "Pausable: not paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															}
														],
														"id": 215,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2003:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2003:41:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 220,
												"nodeType": "ExpressionStatement",
												"src": "2003:41:1"
											}
										]
									},
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "1879:61:1",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 222,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "1954:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1968:2:1"
									},
									"returnParameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1993:0:1"
									},
									"scope": 255,
									"src": "1945:106:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 237,
										"nodeType": "Block",
										"src": "2235:66:1",
										"statements": [
											{
												"expression": {
													"id": 230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 228,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "2245:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 229,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2255:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2245:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 231,
												"nodeType": "ExpressionStatement",
												"src": "2245:14:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 233,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 410,
																"src": "2281:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 234,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2281:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 232,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 158,
														"src": "2274:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2274:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 236,
												"nodeType": "EmitStatement",
												"src": "2269:25:1"
											}
										]
									},
									"documentation": {
										"id": 223,
										"nodeType": "StructuredDocumentation",
										"src": "2057:124:1",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 238,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 226,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 225,
												"name": "whenNotPaused",
												"nameLocations": [
													"2221:13:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 182,
												"src": "2221:13:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2221:13:1"
										}
									],
									"name": "_pause",
									"nameLocation": "2195:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2201:2:1"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2235:0:1"
									},
									"scope": 255,
									"src": "2186:115:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 253,
										"nodeType": "Block",
										"src": "2481:69:1",
										"statements": [
											{
												"expression": {
													"id": 246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 244,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "2491:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 245,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2501:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2491:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 247,
												"nodeType": "ExpressionStatement",
												"src": "2491:15:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 249,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 410,
																"src": "2530:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2530:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 248,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 163,
														"src": "2521:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2521:22:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 252,
												"nodeType": "EmitStatement",
												"src": "2516:27:1"
											}
										]
									},
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "2307:121:1",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 254,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 242,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 241,
												"name": "whenPaused",
												"nameLocations": [
													"2470:10:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 190,
												"src": "2470:10:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2470:10:1"
										}
									],
									"name": "_unpause",
									"nameLocation": "2442:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2450:2:1"
									},
									"returnParameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2481:0:1"
									},
									"scope": 255,
									"src": "2433:117:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 256,
							"src": "602:1950:1",
							"usedErrors": [],
							"usedEvents": [
								158,
								163
							]
						}
					],
					"src": "105:2448:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							320
						]
					},
					"id": 321,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 257,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 258,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:2",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 320,
							"linearizedBaseContracts": [
								320
							],
							"name": "ReentrancyGuard",
							"nameLocation": "906:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 261,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1701:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 320,
									"src": "1676:41:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 259,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 260,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 264,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1748:8:2",
									"nodeType": "VariableDeclaration",
									"scope": 320,
									"src": "1723:37:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 262,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 263,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 266,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1783:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 320,
									"src": "1767:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 265,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 273,
										"nodeType": "Block",
										"src": "1811:39:2",
										"statements": [
											{
												"expression": {
													"id": 271,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 269,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 266,
														"src": "1821:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 270,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 261,
														"src": "1831:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 272,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:2"
											}
										]
									},
									"id": 274,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:2"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:2"
									},
									"scope": 320,
									"src": "1797:53:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 284,
										"nodeType": "Block",
										"src": "2251:79:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 277,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 300,
														"src": "2261:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 279,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:2"
											},
											{
												"id": 280,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 281,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "2303:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 282,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 283,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:2"
											}
										]
									},
									"documentation": {
										"id": 275,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:2",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 285,
									"name": "nonReentrant",
									"nameLocation": "2236:12:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 276,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:2"
									},
									"src": "2227:103:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 299,
										"nodeType": "Block",
										"src": "2375:248:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 291,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 289,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 266,
																"src": "2468:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 290,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 264,
																"src": "2479:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 292,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 288,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2460:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 294,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:2"
											},
											{
												"expression": {
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 295,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 266,
														"src": "2598:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 296,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "2608:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 298,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:2"
											}
										]
									},
									"id": 300,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2345:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:2"
									},
									"returnParameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:2"
									},
									"scope": 320,
									"src": "2336:287:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 307,
										"nodeType": "Block",
										"src": "2667:171:2",
										"statements": [
											{
												"expression": {
													"id": 305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 303,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 266,
														"src": "2809:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 304,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 261,
														"src": "2819:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 306,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:2"
											}
										]
									},
									"id": 308,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2638:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:2"
									},
									"returnParameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:2"
									},
									"scope": 320,
									"src": "2629:209:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 318,
										"nodeType": "Block",
										"src": "3081:43:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 314,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 266,
														"src": "3098:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 315,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "3109:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3098:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 313,
												"id": 317,
												"nodeType": "Return",
												"src": "3091:26:2"
											}
										]
									},
									"documentation": {
										"id": 309,
										"nodeType": "StructuredDocumentation",
										"src": "2844:168:2",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 319,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3026:23:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3049:2:2"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "3075:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 311,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3075:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3074:6:2"
									},
									"scope": 320,
									"src": "3017:107:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 321,
							"src": "888:2238:2",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "112:3015:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							398
						]
					},
					"id": 399,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 322,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 323,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 398,
							"linearizedBaseContracts": [
								398
							],
							"name": "IERC20",
							"nameLocation": "213:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 324,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 332,
									"name": "Transfer",
									"nameLocation": "395:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 326,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "404:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 325,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 328,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "426:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 330,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "446:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:3"
									},
									"src": "389:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 333,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 341,
									"name": "Approval",
									"nameLocation": "626:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "635:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 334,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 337,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "658:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 339,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "683:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 338,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:3"
									},
									"src": "620:78:3"
								},
								{
									"documentation": {
										"id": 342,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:3",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 347,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:3"
									},
									"returnParameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "820:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 344,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:3"
									},
									"scope": 398,
									"src": "774:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 348,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:3",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 355,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "930:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 349,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:3"
									},
									"returnParameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "970:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 352,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:3"
									},
									"scope": 398,
									"src": "911:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 356,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:3",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 365,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "1221:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 357,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "1233:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 359,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:3"
									},
									"returnParameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "1266:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 362,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:3"
									},
									"scope": 398,
									"src": "1203:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 375,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "1566:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "1581:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:3"
									},
									"returnParameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 373,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "1621:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 372,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:3"
									},
									"scope": 398,
									"src": "1547:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 376,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:3",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 385,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "2325:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 377,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 380,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "2342:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 379,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:3"
									},
									"returnParameters": {
										"id": 384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 383,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "2375:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 382,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:3"
									},
									"scope": 398,
									"src": "2308:73:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 386,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 397,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "2711:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "2725:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "2737:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:3"
									},
									"returnParameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "2770:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 394,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:3"
									},
									"scope": 398,
									"src": "2689:87:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 399,
							"src": "203:2575:3",
							"usedErrors": [],
							"usedEvents": [
								332,
								341
							]
						}
					],
					"src": "106:2673:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							428
						]
					},
					"id": 429,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 400,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 401,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 428,
							"linearizedBaseContracts": [
								428
							],
							"name": "Context",
							"nameLocation": "642:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 409,
										"nodeType": "Block",
										"src": "718:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 406,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:4",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 405,
												"id": 408,
												"nodeType": "Return",
												"src": "728:17:4"
											}
										]
									},
									"id": 410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 402,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:4"
									},
									"returnParameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "709:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:4"
									},
									"scope": 428,
									"src": "656:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 418,
										"nodeType": "Block",
										"src": "825:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 415,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:4",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 414,
												"id": 417,
												"nodeType": "Return",
												"src": "835:15:4"
											}
										]
									},
									"id": 419,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:4"
									},
									"returnParameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "809:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 412,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:4"
									},
									"scope": 428,
									"src": "758:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 426,
										"nodeType": "Block",
										"src": "935:25:4",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 424,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:4",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 423,
												"id": 425,
												"nodeType": "Return",
												"src": "945:8:4"
											}
										]
									},
									"id": 427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 420,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:4"
									},
									"returnParameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "926:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 421,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:4"
									},
									"scope": 428,
									"src": "863:97:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 429,
							"src": "624:338:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
					"exportedSymbols": {
						"MerkleProof": [
							965
						]
					},
					"id": 966,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 430,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleProof",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 431,
								"nodeType": "StructuredDocumentation",
								"src": "144:658:5",
								"text": " @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box."
							},
							"fullyImplemented": true,
							"id": 965,
							"linearizedBaseContracts": [
								965
							],
							"name": "MerkleProof",
							"nameLocation": "811:11:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 432,
										"nodeType": "StructuredDocumentation",
										"src": "829:60:5",
										"text": "@dev The multiproof provided is not valid."
									},
									"errorSelector": "35140492",
									"id": 434,
									"name": "MerkleProofInvalidMultiproof",
									"nameLocation": "900:28:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "928:2:5"
									},
									"src": "894:37:5"
								},
								{
									"body": {
										"id": 454,
										"nodeType": "Block",
										"src": "1362:57:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 448,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 438,
																"src": "1392:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 449,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 442,
																"src": "1399:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 447,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 516,
															"src": "1379:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32) pure returns (bytes32)"
															}
														},
														"id": 450,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1379:25:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 451,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "1408:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1379:33:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 446,
												"id": 453,
												"nodeType": "Return",
												"src": "1372:40:5"
											}
										]
									},
									"documentation": {
										"id": 435,
										"nodeType": "StructuredDocumentation",
										"src": "937:323:5",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."
									},
									"id": 455,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "1274:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1298:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "1281:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 436,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1281:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 437,
													"nodeType": "ArrayTypeName",
													"src": "1281:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 440,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "1313:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "1305:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 439,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1305:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1327:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "1319:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 441,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1319:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1280:52:5"
									},
									"returnParameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "1356:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 444,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1356:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1355:6:5"
									},
									"scope": 965,
									"src": "1265:154:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 475,
										"nodeType": "Block",
										"src": "1589:65:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 469,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 459,
																"src": "1627:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 470,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 463,
																"src": "1634:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 468,
															"name": "processProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 556,
															"src": "1606:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bytes32) pure returns (bytes32)"
															}
														},
														"id": 471,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1606:33:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 472,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 461,
														"src": "1643:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1606:41:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 467,
												"id": 474,
												"nodeType": "Return",
												"src": "1599:48:5"
											}
										]
									},
									"documentation": {
										"id": 456,
										"nodeType": "StructuredDocumentation",
										"src": "1425:52:5",
										"text": " @dev Calldata version of {verify}"
									},
									"id": 476,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCalldata",
									"nameLocation": "1491:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 459,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1525:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "1506:24:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 457,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1506:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 458,
													"nodeType": "ArrayTypeName",
													"src": "1506:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "1540:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "1532:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 460,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1532:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1554:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "1546:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 462,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1546:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1505:54:5"
									},
									"returnParameters": {
										"id": 467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "1583:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 465,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1583:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1582:6:5"
									},
									"scope": 965,
									"src": "1482:172:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 515,
										"nodeType": "Block",
										"src": "2059:198:5",
										"statements": [
											{
												"assignments": [
													488
												],
												"declarations": [
													{
														"constant": false,
														"id": 488,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "2077:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 515,
														"src": "2069:20:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 487,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2069:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 490,
												"initialValue": {
													"id": 489,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 482,
													"src": "2092:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2069:27:5"
											},
											{
												"body": {
													"id": 511,
													"nodeType": "Block",
													"src": "2149:73:5",
													"statements": [
														{
															"expression": {
																"id": 509,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 502,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 488,
																	"src": "2163:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 504,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 488,
																			"src": "2188:12:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 505,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 480,
																				"src": "2202:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																					"typeString": "bytes32[] memory"
																				}
																			},
																			"id": 507,
																			"indexExpression": {
																				"id": 506,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 492,
																				"src": "2208:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2202:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 503,
																		"name": "_hashPair",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 952,
																		"src": "2178:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 508,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2178:33:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "2163:48:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 510,
															"nodeType": "ExpressionStatement",
															"src": "2163:48:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 495,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 492,
														"src": "2126:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 496,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 480,
															"src": "2130:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 497,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2136:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2130:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2126:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 512,
												"initializationExpression": {
													"assignments": [
														492
													],
													"declarations": [
														{
															"constant": false,
															"id": 492,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2119:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 512,
															"src": "2111:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 491,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2111:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 494,
													"initialValue": {
														"hexValue": "30",
														"id": 493,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2123:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2111:13:5"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 500,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "2144:3:5",
														"subExpression": {
															"id": 499,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 492,
															"src": "2144:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 501,
													"nodeType": "ExpressionStatement",
													"src": "2144:3:5"
												},
												"nodeType": "ForStatement",
												"src": "2106:116:5"
											},
											{
												"expression": {
													"id": 513,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 488,
													"src": "2238:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 486,
												"id": 514,
												"nodeType": "Return",
												"src": "2231:19:5"
											}
										]
									},
									"documentation": {
										"id": 477,
										"nodeType": "StructuredDocumentation",
										"src": "1660:302:5",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted."
									},
									"id": 516,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "1976:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "2006:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "1989:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 478,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1989:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 479,
													"nodeType": "ArrayTypeName",
													"src": "1989:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "2021:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "2013:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 481,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2013:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1988:38:5"
									},
									"returnParameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "2050:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 484,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2050:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2049:9:5"
									},
									"scope": 965,
									"src": "1967:290:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 555,
										"nodeType": "Block",
										"src": "2428:198:5",
										"statements": [
											{
												"assignments": [
													528
												],
												"declarations": [
													{
														"constant": false,
														"id": 528,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "2446:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 555,
														"src": "2438:20:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 527,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2438:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 530,
												"initialValue": {
													"id": 529,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 522,
													"src": "2461:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2438:27:5"
											},
											{
												"body": {
													"id": 551,
													"nodeType": "Block",
													"src": "2518:73:5",
													"statements": [
														{
															"expression": {
																"id": 549,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 542,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 528,
																	"src": "2532:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 544,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 528,
																			"src": "2557:12:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 545,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 520,
																				"src": "2571:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																					"typeString": "bytes32[] calldata"
																				}
																			},
																			"id": 547,
																			"indexExpression": {
																				"id": 546,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 532,
																				"src": "2577:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2571:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 543,
																		"name": "_hashPair",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 952,
																		"src": "2547:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 548,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2547:33:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "2532:48:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 550,
															"nodeType": "ExpressionStatement",
															"src": "2532:48:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 538,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 535,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 532,
														"src": "2495:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 536,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 520,
															"src": "2499:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															}
														},
														"id": 537,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2505:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2499:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2495:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 552,
												"initializationExpression": {
													"assignments": [
														532
													],
													"declarations": [
														{
															"constant": false,
															"id": 532,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2488:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 552,
															"src": "2480:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 531,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2480:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 534,
													"initialValue": {
														"hexValue": "30",
														"id": 533,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2492:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2480:13:5"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 540,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "2513:3:5",
														"subExpression": {
															"id": 539,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "2513:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 541,
													"nodeType": "ExpressionStatement",
													"src": "2513:3:5"
												},
												"nodeType": "ForStatement",
												"src": "2475:116:5"
											},
											{
												"expression": {
													"id": 553,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 528,
													"src": "2607:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 526,
												"id": 554,
												"nodeType": "Return",
												"src": "2600:19:5"
											}
										]
									},
									"documentation": {
										"id": 517,
										"nodeType": "StructuredDocumentation",
										"src": "2263:58:5",
										"text": " @dev Calldata version of {processProof}"
									},
									"id": 556,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProofCalldata",
									"nameLocation": "2335:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "2375:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "2356:24:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 518,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2356:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 519,
													"nodeType": "ArrayTypeName",
													"src": "2356:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "2390:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "2382:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 521,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2382:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2355:40:5"
									},
									"returnParameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "2419:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 524,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2419:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2418:9:5"
									},
									"scope": 965,
									"src": "2326:300:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 581,
										"nodeType": "Block",
										"src": "3131:76:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 574,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 560,
																"src": "3166:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 575,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 563,
																"src": "3173:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																}
															},
															{
																"id": 576,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 568,
																"src": "3185:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															],
															"id": 573,
															"name": "processMultiProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 768,
															"src": "3148:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"
															}
														},
														"id": 577,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3148:44:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 578,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 565,
														"src": "3196:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3148:52:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 572,
												"id": 580,
												"nodeType": "Return",
												"src": "3141:59:5"
											}
										]
									},
									"documentation": {
										"id": 557,
										"nodeType": "StructuredDocumentation",
										"src": "2632:312:5",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details."
									},
									"id": 582,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerify",
									"nameLocation": "2958:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 569,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "3001:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "2984:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 558,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2984:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 559,
													"nodeType": "ArrayTypeName",
													"src": "2984:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "3030:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "3016:24:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 561,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "3016:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 562,
													"nodeType": "ArrayTypeName",
													"src": "3016:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "3058:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "3050:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 564,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3050:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "3089:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "3072:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 566,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "3072:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 567,
													"nodeType": "ArrayTypeName",
													"src": "3072:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2974:127:5"
									},
									"returnParameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "3125:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 570,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3125:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3124:6:5"
									},
									"scope": 965,
									"src": "2949:258:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 607,
										"nodeType": "Block",
										"src": "3574:84:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 600,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 586,
																"src": "3617:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 601,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 589,
																"src": "3624:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																}
															},
															{
																"id": 602,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 594,
																"src": "3636:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															],
															"id": 599,
															"name": "processMultiProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 928,
															"src": "3591:25:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"
															}
														},
														"id": 603,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3591:52:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 604,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 591,
														"src": "3647:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3591:60:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 598,
												"id": 606,
												"nodeType": "Return",
												"src": "3584:67:5"
											}
										]
									},
									"documentation": {
										"id": 583,
										"nodeType": "StructuredDocumentation",
										"src": "3213:162:5",
										"text": " @dev Calldata version of {multiProofVerify}\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details."
									},
									"id": 608,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerifyCalldata",
									"nameLocation": "3389:24:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "3442:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "3423:24:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 584,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "3423:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 585,
													"nodeType": "ArrayTypeName",
													"src": "3423:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "3473:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "3457:26:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 587,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "3457:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 588,
													"nodeType": "ArrayTypeName",
													"src": "3457:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "3501:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "3493:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 590,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3493:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "3532:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "3515:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 592,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "3515:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 593,
													"nodeType": "ArrayTypeName",
													"src": "3515:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3413:131:5"
									},
									"returnParameters": {
										"id": 598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 597,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "3568:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 596,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3568:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3567:6:5"
									},
									"scope": 965,
									"src": "3380:278:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 767,
										"nodeType": "Block",
										"src": "4574:2107:5",
										"statements": [
											{
												"assignments": [
													624
												],
												"declarations": [
													{
														"constant": false,
														"id": 624,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "4966:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 767,
														"src": "4958:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 623,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4958:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 627,
												"initialValue": {
													"expression": {
														"id": 625,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 618,
														"src": "4978:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4985:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "4978:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4958:33:5"
											},
											{
												"assignments": [
													629
												],
												"declarations": [
													{
														"constant": false,
														"id": 629,
														"mutability": "mutable",
														"name": "proofLen",
														"nameLocation": "5009:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 767,
														"src": "5001:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 628,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5001:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 632,
												"initialValue": {
													"expression": {
														"id": 630,
														"name": "proof",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 612,
														"src": "5020:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5026:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "5020:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5001:31:5"
											},
											{
												"assignments": [
													634
												],
												"declarations": [
													{
														"constant": false,
														"id": 634,
														"mutability": "mutable",
														"name": "totalHashes",
														"nameLocation": "5050:11:5",
														"nodeType": "VariableDeclaration",
														"scope": 767,
														"src": "5042:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 633,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5042:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 637,
												"initialValue": {
													"expression": {
														"id": 635,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 615,
														"src": "5064:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
															"typeString": "bool[] memory"
														}
													},
													"id": 636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5075:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "5064:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5042:39:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 640,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 638,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 624,
															"src": "5129:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"id": 639,
															"name": "proofLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "5141:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5129:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 643,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 641,
															"name": "totalHashes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 634,
															"src": "5153:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 642,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5167:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "5153:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5129:39:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 649,
												"nodeType": "IfStatement",
												"src": "5125:107:5",
												"trueBody": {
													"id": 648,
													"nodeType": "Block",
													"src": "5170:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 645,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 434,
																	"src": "5191:28:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 646,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5191:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 647,
															"nodeType": "RevertStatement",
															"src": "5184:37:5"
														}
													]
												}
											},
											{
												"assignments": [
													654
												],
												"declarations": [
													{
														"constant": false,
														"id": 654,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "5493:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 767,
														"src": "5476:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 652,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "5476:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 653,
															"nodeType": "ArrayTypeName",
															"src": "5476:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 660,
												"initialValue": {
													"arguments": [
														{
															"id": 658,
															"name": "totalHashes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 634,
															"src": "5516:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 657,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "5502:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 655,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "5506:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 656,
															"nodeType": "ArrayTypeName",
															"src": "5506:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5502:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5476:52:5"
											},
											{
												"assignments": [
													662
												],
												"declarations": [
													{
														"constant": false,
														"id": 662,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "5546:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 767,
														"src": "5538:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 661,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5538:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 664,
												"initialValue": {
													"hexValue": "30",
													"id": 663,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5556:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5538:19:5"
											},
											{
												"assignments": [
													666
												],
												"declarations": [
													{
														"constant": false,
														"id": 666,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "5575:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 767,
														"src": "5567:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 665,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5567:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 668,
												"initialValue": {
													"hexValue": "30",
													"id": 667,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5585:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5567:19:5"
											},
											{
												"assignments": [
													670
												],
												"declarations": [
													{
														"constant": false,
														"id": 670,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "5604:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 767,
														"src": "5596:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 669,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5596:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 672,
												"initialValue": {
													"hexValue": "30",
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5615:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5596:20:5"
											},
											{
												"body": {
													"id": 731,
													"nodeType": "Block",
													"src": "6034:292:5",
													"statements": [
														{
															"assignments": [
																684
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 684,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "6056:1:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 731,
																	"src": "6048:9:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 683,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "6048:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 697,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 685,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 662,
																		"src": "6060:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 686,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 624,
																		"src": "6070:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6060:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 692,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 654,
																		"src": "6102:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 695,
																	"indexExpression": {
																		"id": 694,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "6109:9:5",
																		"subExpression": {
																			"id": 693,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 666,
																			"src": "6109:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6102:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 696,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "6060:59:5",
																"trueExpression": {
																	"baseExpression": {
																		"id": 688,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 618,
																		"src": "6082:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 691,
																	"indexExpression": {
																		"id": 690,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "6089:9:5",
																		"subExpression": {
																			"id": 689,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 662,
																			"src": "6089:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6082:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6048:71:5"
														},
														{
															"assignments": [
																699
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 699,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "6141:1:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 731,
																	"src": "6133:9:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 698,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "6133:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 721,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 700,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 615,
																		"src": "6145:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																			"typeString": "bool[] memory"
																		}
																	},
																	"id": 702,
																	"indexExpression": {
																		"id": 701,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 674,
																		"src": "6156:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6145:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 716,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 612,
																		"src": "6257:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 719,
																	"indexExpression": {
																		"id": 718,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "6263:10:5",
																		"subExpression": {
																			"id": 717,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 670,
																			"src": "6263:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6257:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 720,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "6145:129:5",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 705,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 703,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 662,
																					"src": "6178:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 704,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 624,
																					"src": "6188:9:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "6178:19:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 710,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 654,
																					"src": "6220:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 713,
																				"indexExpression": {
																					"id": 712,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "6227:9:5",
																					"subExpression": {
																						"id": 711,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 666,
																						"src": "6227:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "6220:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 714,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "6178:59:5",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 706,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 618,
																					"src": "6200:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 709,
																				"indexExpression": {
																					"id": 708,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "6207:9:5",
																					"subExpression": {
																						"id": 707,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 662,
																						"src": "6207:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "6200:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 715,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6177:61:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6133:141:5"
														},
														{
															"expression": {
																"id": 729,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 722,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 654,
																		"src": "6288:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 724,
																	"indexExpression": {
																		"id": 723,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 674,
																		"src": "6295:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "6288:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 726,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 684,
																			"src": "6310:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 727,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 699,
																			"src": "6313:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 725,
																		"name": "_hashPair",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 952,
																		"src": "6300:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 728,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6300:15:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "6288:27:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 730,
															"nodeType": "ExpressionStatement",
															"src": "6288:27:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 677,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 674,
														"src": "6012:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 678,
														"name": "totalHashes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 634,
														"src": "6016:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6012:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 732,
												"initializationExpression": {
													"assignments": [
														674
													],
													"declarations": [
														{
															"constant": false,
															"id": 674,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "6005:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 732,
															"src": "5997:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 673,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "5997:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 676,
													"initialValue": {
														"hexValue": "30",
														"id": 675,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6009:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "5997:13:5"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 681,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "6029:3:5",
														"subExpression": {
															"id": 680,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 674,
															"src": "6029:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 682,
													"nodeType": "ExpressionStatement",
													"src": "6029:3:5"
												},
												"nodeType": "ForStatement",
												"src": "5992:334:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 733,
														"name": "totalHashes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 634,
														"src": "6340:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 734,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6354:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6340:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 754,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 752,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 624,
															"src": "6573:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 753,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6585:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "6573:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 764,
														"nodeType": "Block",
														"src": "6635:40:5",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 760,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 612,
																		"src": "6656:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 762,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 761,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6662:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6656:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 622,
																"id": 763,
																"nodeType": "Return",
																"src": "6649:15:5"
															}
														]
													},
													"id": 765,
													"nodeType": "IfStatement",
													"src": "6569:106:5",
													"trueBody": {
														"id": 759,
														"nodeType": "Block",
														"src": "6588:41:5",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 755,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 618,
																		"src": "6609:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 757,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 756,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6616:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6609:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 622,
																"id": 758,
																"nodeType": "Return",
																"src": "6602:16:5"
															}
														]
													}
												},
												"id": 766,
												"nodeType": "IfStatement",
												"src": "6336:339:5",
												"trueBody": {
													"id": 751,
													"nodeType": "Block",
													"src": "6357:206:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 738,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 736,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 670,
																	"src": "6375:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"id": 737,
																	"name": "proofLen",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 629,
																	"src": "6387:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6375:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 743,
															"nodeType": "IfStatement",
															"src": "6371:96:5",
															"trueBody": {
																"id": 742,
																"nodeType": "Block",
																"src": "6397:70:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 739,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 434,
																				"src": "6422:28:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 740,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6422:30:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 741,
																		"nodeType": "RevertStatement",
																		"src": "6415:37:5"
																	}
																]
															}
														},
														{
															"id": 750,
															"nodeType": "UncheckedBlock",
															"src": "6480:73:5",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 744,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 654,
																			"src": "6515:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 748,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 747,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 745,
																				"name": "totalHashes",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 634,
																				"src": "6522:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 746,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6536:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "6522:15:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6515:23:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 622,
																	"id": 749,
																	"nodeType": "Return",
																	"src": "6508:30:5"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 609,
										"nodeType": "StructuredDocumentation",
										"src": "3664:730:5",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer)."
									},
									"id": 768,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProof",
									"nameLocation": "4408:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "4452:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "4435:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 610,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "4435:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 611,
													"nodeType": "ArrayTypeName",
													"src": "4435:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "4481:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "4467:24:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 613,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "4467:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 614,
													"nodeType": "ArrayTypeName",
													"src": "4467:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "4518:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "4501:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 616,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "4501:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 617,
													"nodeType": "ArrayTypeName",
													"src": "4501:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4425:105:5"
									},
									"returnParameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "4562:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "4554:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 620,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4554:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4553:20:5"
									},
									"scope": 965,
									"src": "4399:2282:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 927,
										"nodeType": "Block",
										"src": "7043:2107:5",
										"statements": [
											{
												"assignments": [
													784
												],
												"declarations": [
													{
														"constant": false,
														"id": 784,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "7435:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 927,
														"src": "7427:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 783,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7427:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 787,
												"initialValue": {
													"expression": {
														"id": 785,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 778,
														"src": "7447:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7454:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "7447:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7427:33:5"
											},
											{
												"assignments": [
													789
												],
												"declarations": [
													{
														"constant": false,
														"id": 789,
														"mutability": "mutable",
														"name": "proofLen",
														"nameLocation": "7478:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 927,
														"src": "7470:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 788,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7470:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 792,
												"initialValue": {
													"expression": {
														"id": 790,
														"name": "proof",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 772,
														"src": "7489:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
															"typeString": "bytes32[] calldata"
														}
													},
													"id": 791,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7495:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "7489:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7470:31:5"
											},
											{
												"assignments": [
													794
												],
												"declarations": [
													{
														"constant": false,
														"id": 794,
														"mutability": "mutable",
														"name": "totalHashes",
														"nameLocation": "7519:11:5",
														"nodeType": "VariableDeclaration",
														"scope": 927,
														"src": "7511:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 793,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7511:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 797,
												"initialValue": {
													"expression": {
														"id": 795,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 775,
														"src": "7533:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
															"typeString": "bool[] calldata"
														}
													},
													"id": 796,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7544:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "7533:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7511:39:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 804,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 800,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 798,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 784,
															"src": "7598:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"id": 799,
															"name": "proofLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 789,
															"src": "7610:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "7598:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 803,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 801,
															"name": "totalHashes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 794,
															"src": "7622:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 802,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7636:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "7622:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7598:39:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 809,
												"nodeType": "IfStatement",
												"src": "7594:107:5",
												"trueBody": {
													"id": 808,
													"nodeType": "Block",
													"src": "7639:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 805,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 434,
																	"src": "7660:28:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 806,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7660:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 807,
															"nodeType": "RevertStatement",
															"src": "7653:37:5"
														}
													]
												}
											},
											{
												"assignments": [
													814
												],
												"declarations": [
													{
														"constant": false,
														"id": 814,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "7962:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 927,
														"src": "7945:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 812,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "7945:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 813,
															"nodeType": "ArrayTypeName",
															"src": "7945:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 820,
												"initialValue": {
													"arguments": [
														{
															"id": 818,
															"name": "totalHashes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 794,
															"src": "7985:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 817,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "7971:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 815,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "7975:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 816,
															"nodeType": "ArrayTypeName",
															"src": "7975:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7971:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7945:52:5"
											},
											{
												"assignments": [
													822
												],
												"declarations": [
													{
														"constant": false,
														"id": 822,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "8015:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 927,
														"src": "8007:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 821,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8007:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 824,
												"initialValue": {
													"hexValue": "30",
													"id": 823,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8025:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8007:19:5"
											},
											{
												"assignments": [
													826
												],
												"declarations": [
													{
														"constant": false,
														"id": 826,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "8044:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 927,
														"src": "8036:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 825,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8036:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 828,
												"initialValue": {
													"hexValue": "30",
													"id": 827,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8054:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8036:19:5"
											},
											{
												"assignments": [
													830
												],
												"declarations": [
													{
														"constant": false,
														"id": 830,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "8073:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 927,
														"src": "8065:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 829,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8065:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 832,
												"initialValue": {
													"hexValue": "30",
													"id": 831,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8084:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8065:20:5"
											},
											{
												"body": {
													"id": 891,
													"nodeType": "Block",
													"src": "8503:292:5",
													"statements": [
														{
															"assignments": [
																844
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 844,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "8525:1:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 891,
																	"src": "8517:9:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 843,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "8517:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 857,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 847,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 845,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 822,
																		"src": "8529:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 846,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 784,
																		"src": "8539:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "8529:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 852,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 814,
																		"src": "8571:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 855,
																	"indexExpression": {
																		"id": 854,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "8578:9:5",
																		"subExpression": {
																			"id": 853,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 826,
																			"src": "8578:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "8571:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 856,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "8529:59:5",
																"trueExpression": {
																	"baseExpression": {
																		"id": 848,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 778,
																		"src": "8551:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 851,
																	"indexExpression": {
																		"id": 850,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "8558:9:5",
																		"subExpression": {
																			"id": 849,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 822,
																			"src": "8558:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "8551:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "8517:71:5"
														},
														{
															"assignments": [
																859
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 859,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "8610:1:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 891,
																	"src": "8602:9:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 858,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "8602:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 881,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 860,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 775,
																		"src": "8614:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																			"typeString": "bool[] calldata"
																		}
																	},
																	"id": 862,
																	"indexExpression": {
																		"id": 861,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 834,
																		"src": "8625:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "8614:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 876,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 772,
																		"src": "8726:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 879,
																	"indexExpression": {
																		"id": 878,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "8732:10:5",
																		"subExpression": {
																			"id": 877,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 830,
																			"src": "8732:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "8726:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 880,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "8614:129:5",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 865,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 863,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 822,
																					"src": "8647:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 864,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 784,
																					"src": "8657:9:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8647:19:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 870,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 814,
																					"src": "8689:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 873,
																				"indexExpression": {
																					"id": 872,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "8696:9:5",
																					"subExpression": {
																						"id": 871,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 826,
																						"src": "8696:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "8689:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 874,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "8647:59:5",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 866,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 778,
																					"src": "8669:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 869,
																				"indexExpression": {
																					"id": 868,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "8676:9:5",
																					"subExpression": {
																						"id": 867,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 822,
																						"src": "8676:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "8669:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 875,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8646:61:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "8602:141:5"
														},
														{
															"expression": {
																"id": 889,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 882,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 814,
																		"src": "8757:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 884,
																	"indexExpression": {
																		"id": 883,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 834,
																		"src": "8764:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "8757:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 886,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 844,
																			"src": "8779:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 887,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 859,
																			"src": "8782:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 885,
																		"name": "_hashPair",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 952,
																		"src": "8769:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 888,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8769:15:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "8757:27:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 890,
															"nodeType": "ExpressionStatement",
															"src": "8757:27:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 839,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 837,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 834,
														"src": "8481:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 838,
														"name": "totalHashes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 794,
														"src": "8485:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8481:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 892,
												"initializationExpression": {
													"assignments": [
														834
													],
													"declarations": [
														{
															"constant": false,
															"id": 834,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "8474:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 892,
															"src": "8466:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 833,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "8466:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 836,
													"initialValue": {
														"hexValue": "30",
														"id": 835,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8478:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "8466:13:5"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 841,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "8498:3:5",
														"subExpression": {
															"id": 840,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 834,
															"src": "8498:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 842,
													"nodeType": "ExpressionStatement",
													"src": "8498:3:5"
												},
												"nodeType": "ForStatement",
												"src": "8461:334:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 895,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 893,
														"name": "totalHashes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 794,
														"src": "8809:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 894,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8823:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8809:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 914,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 912,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 784,
															"src": "9042:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 913,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9054:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "9042:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 924,
														"nodeType": "Block",
														"src": "9104:40:5",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 920,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 772,
																		"src": "9125:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 922,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 921,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9131:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "9125:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 782,
																"id": 923,
																"nodeType": "Return",
																"src": "9118:15:5"
															}
														]
													},
													"id": 925,
													"nodeType": "IfStatement",
													"src": "9038:106:5",
													"trueBody": {
														"id": 919,
														"nodeType": "Block",
														"src": "9057:41:5",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 915,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 778,
																		"src": "9078:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 917,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 916,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9085:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "9078:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 782,
																"id": 918,
																"nodeType": "Return",
																"src": "9071:16:5"
															}
														]
													}
												},
												"id": 926,
												"nodeType": "IfStatement",
												"src": "8805:339:5",
												"trueBody": {
													"id": 911,
													"nodeType": "Block",
													"src": "8826:206:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 898,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 896,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 830,
																	"src": "8844:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"id": 897,
																	"name": "proofLen",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 789,
																	"src": "8856:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8844:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 903,
															"nodeType": "IfStatement",
															"src": "8840:96:5",
															"trueBody": {
																"id": 902,
																"nodeType": "Block",
																"src": "8866:70:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 899,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 434,
																				"src": "8891:28:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 900,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8891:30:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 901,
																		"nodeType": "RevertStatement",
																		"src": "8884:37:5"
																	}
																]
															}
														},
														{
															"id": 910,
															"nodeType": "UncheckedBlock",
															"src": "8949:73:5",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 904,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 814,
																			"src": "8984:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 908,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 907,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 905,
																				"name": "totalHashes",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 794,
																				"src": "8991:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 906,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9005:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "8991:15:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "8984:23:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 782,
																	"id": 909,
																	"nodeType": "Return",
																	"src": "8977:30:5"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 769,
										"nodeType": "StructuredDocumentation",
										"src": "6687:164:5",
										"text": " @dev Calldata version of {processMultiProof}.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details."
									},
									"id": 928,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProofCalldata",
									"nameLocation": "6865:25:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 779,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "6919:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "6900:24:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 770,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6900:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 771,
													"nodeType": "ArrayTypeName",
													"src": "6900:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "6950:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "6934:26:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 773,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "6934:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 774,
													"nodeType": "ArrayTypeName",
													"src": "6934:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 778,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "6987:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "6970:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 776,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6970:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 777,
													"nodeType": "ArrayTypeName",
													"src": "6970:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6890:109:5"
									},
									"returnParameters": {
										"id": 782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "7031:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "7023:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 780,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7023:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7022:20:5"
									},
									"scope": 965,
									"src": "6856:2294:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 951,
										"nodeType": "Block",
										"src": "9301:75:5",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 940,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 938,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 931,
															"src": "9318:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 939,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 933,
															"src": "9322:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "9318:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 946,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 933,
																"src": "9364:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 947,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 931,
																"src": "9367:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 945,
															"name": "_efficientHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 964,
															"src": "9349:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
															}
														},
														"id": 948,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9349:20:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "9318:51:5",
													"trueExpression": {
														"arguments": [
															{
																"id": 942,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 931,
																"src": "9341:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 943,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 933,
																"src": "9344:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 941,
															"name": "_efficientHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 964,
															"src": "9326:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
															}
														},
														"id": 944,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9326:20:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 937,
												"id": 950,
												"nodeType": "Return",
												"src": "9311:58:5"
											}
										]
									},
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "9156:68:5",
										"text": " @dev Sorts the pair (a, b) and hashes the result."
									},
									"id": 952,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashPair",
									"nameLocation": "9238:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "9256:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "9248:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 930,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9248:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "9267:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "9259:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 932,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9259:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9247:22:5"
									},
									"returnParameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "9292:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 935,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9292:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9291:9:5"
									},
									"scope": 965,
									"src": "9229:147:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 963,
										"nodeType": "Block",
										"src": "9579:178:5",
										"statements": [
											{
												"AST": {
													"nativeSrc": "9641:110:5",
													"nodeType": "YulBlock",
													"src": "9641:110:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9662:4:5",
																		"nodeType": "YulLiteral",
																		"src": "9662:4:5",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"name": "a",
																		"nativeSrc": "9668:1:5",
																		"nodeType": "YulIdentifier",
																		"src": "9668:1:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9655:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "9655:6:5"
																},
																"nativeSrc": "9655:15:5",
																"nodeType": "YulFunctionCall",
																"src": "9655:15:5"
															},
															"nativeSrc": "9655:15:5",
															"nodeType": "YulExpressionStatement",
															"src": "9655:15:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9690:4:5",
																		"nodeType": "YulLiteral",
																		"src": "9690:4:5",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"name": "b",
																		"nativeSrc": "9696:1:5",
																		"nodeType": "YulIdentifier",
																		"src": "9696:1:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9683:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "9683:6:5"
																},
																"nativeSrc": "9683:15:5",
																"nodeType": "YulFunctionCall",
																"src": "9683:15:5"
															},
															"nativeSrc": "9683:15:5",
															"nodeType": "YulExpressionStatement",
															"src": "9683:15:5"
														},
														{
															"nativeSrc": "9711:30:5",
															"nodeType": "YulAssignment",
															"src": "9711:30:5",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9730:4:5",
																		"nodeType": "YulLiteral",
																		"src": "9730:4:5",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9736:4:5",
																		"nodeType": "YulLiteral",
																		"src": "9736:4:5",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "9720:9:5",
																	"nodeType": "YulIdentifier",
																	"src": "9720:9:5"
																},
																"nativeSrc": "9720:21:5",
																"nodeType": "YulFunctionCall",
																"src": "9720:21:5"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "9711:5:5",
																	"nodeType": "YulIdentifier",
																	"src": "9711:5:5"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 955,
														"isOffset": false,
														"isSlot": false,
														"src": "9668:1:5",
														"valueSize": 1
													},
													{
														"declaration": 957,
														"isOffset": false,
														"isSlot": false,
														"src": "9696:1:5",
														"valueSize": 1
													},
													{
														"declaration": 960,
														"isOffset": false,
														"isSlot": false,
														"src": "9711:5:5",
														"valueSize": 1
													}
												],
												"id": 962,
												"nodeType": "InlineAssembly",
												"src": "9632:119:5"
											}
										]
									},
									"documentation": {
										"id": 953,
										"nodeType": "StructuredDocumentation",
										"src": "9382:109:5",
										"text": " @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."
									},
									"id": 964,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_efficientHash",
									"nameLocation": "9505:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "9528:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 964,
												"src": "9520:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 954,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9520:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 957,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "9539:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 964,
												"src": "9531:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 956,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9531:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9519:22:5"
									},
									"returnParameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9572:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 964,
												"src": "9564:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 959,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9564:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9563:15:5"
									},
									"scope": 965,
									"src": "9496:261:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 966,
							"src": "803:8956:5",
							"usedErrors": [
								434
							],
							"usedEvents": []
						}
					],
					"src": "118:9642:5"
				},
				"id": 5
			},
			"SmartContractsInterview/MerkleDistribution.sol": {
				"ast": {
					"absolutePath": "SmartContractsInterview/MerkleDistribution.sol",
					"exportedSymbols": {
						"Context": [
							428
						],
						"IERC20": [
							398
						],
						"MerkleDistributor": [
							1329
						],
						"MerkleProof": [
							965
						],
						"Ownable": [
							147
						],
						"Pausable": [
							255
						],
						"ReentrancyGuard": [
							320
						]
					},
					"id": 1330,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 967,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 968,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1330,
							"sourceUnit": 148,
							"src": "57:52:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 969,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1330,
							"sourceUnit": 399,
							"src": "110:56:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 970,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1330,
							"sourceUnit": 321,
							"src": "167:62:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/Pausable.sol",
							"file": "@openzeppelin/contracts/security/Pausable.sol",
							"id": 971,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1330,
							"sourceUnit": 256,
							"src": "230:55:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"id": 972,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1330,
							"sourceUnit": 966,
							"src": "286:68:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 973,
										"name": "Pausable",
										"nameLocations": [
											"386:8:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 255,
										"src": "386:8:6"
									},
									"id": 974,
									"nodeType": "InheritanceSpecifier",
									"src": "386:8:6"
								},
								{
									"baseName": {
										"id": 975,
										"name": "Ownable",
										"nameLocations": [
											"396:7:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "396:7:6"
									},
									"id": 976,
									"nodeType": "InheritanceSpecifier",
									"src": "396:7:6"
								},
								{
									"baseName": {
										"id": 977,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"405:15:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 320,
										"src": "405:15:6"
									},
									"id": 978,
									"nodeType": "InheritanceSpecifier",
									"src": "405:15:6"
								}
							],
							"canonicalName": "MerkleDistributor",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1329,
							"linearizedBaseContracts": [
								1329,
								320,
								147,
								255,
								428
							],
							"name": "MerkleDistributor",
							"nameLocation": "365:17:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "2eb4a7ab",
									"id": 980,
									"mutability": "mutable",
									"name": "merkleRoot",
									"nameLocation": "442:10:6",
									"nodeType": "VariableDeclaration",
									"scope": 1329,
									"src": "427:25:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 979,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "427:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "fc0c546a",
									"id": 982,
									"mutability": "mutable",
									"name": "token",
									"nameLocation": "474:5:6",
									"nodeType": "VariableDeclaration",
									"scope": 1329,
									"src": "459:20:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 981,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "459:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "61d027b3",
									"id": 984,
									"mutability": "mutable",
									"name": "treasury",
									"nameLocation": "500:8:6",
									"nodeType": "VariableDeclaration",
									"scope": 1329,
									"src": "485:23:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 983,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "485:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "7cc6cb7a",
									"id": 986,
									"mutability": "mutable",
									"name": "isClaiming",
									"nameLocation": "527:10:6",
									"nodeType": "VariableDeclaration",
									"scope": 1329,
									"src": "515:22:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 985,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "515:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "428e7565",
									"id": 988,
									"mutability": "mutable",
									"name": "startClaimingRound",
									"nameLocation": "558:18:6",
									"nodeType": "VariableDeclaration",
									"scope": 1329,
									"src": "543:33:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 987,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "543:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "49039527",
									"id": 990,
									"mutability": "mutable",
									"name": "claimingRoundDuration",
									"nameLocation": "597:21:6",
									"nodeType": "VariableDeclaration",
									"scope": 1329,
									"src": "582:36:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 989,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "582:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c884ef83",
									"id": 994,
									"mutability": "mutable",
									"name": "claimed",
									"nameLocation": "657:7:6",
									"nodeType": "VariableDeclaration",
									"scope": 1329,
									"src": "625:39:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 993,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 991,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "633:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "625:24:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 992,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "644:4:6",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "d8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a",
									"id": 1000,
									"name": "Claimed",
									"nameLocation": "677:7:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 996,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "701:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "685:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 995,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 998,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "718:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "710:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 997,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "710:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "684:41:6"
									},
									"src": "671:55:6"
								},
								{
									"body": {
										"id": 1021,
										"nodeType": "Block",
										"src": "761:234:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1016,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1003,
																"name": "isClaiming",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 986,
																"src": "792:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1007,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1004,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "807:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1005,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "813:9:6",
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "807:15:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">=",
																			"rightExpression": {
																				"id": 1006,
																				"name": "startClaimingRound",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 988,
																				"src": "826:18:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "807:37:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1013,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1008,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "864:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1009,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "870:9:6",
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "864:15:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<=",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1012,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1010,
																					"name": "startClaimingRound",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 988,
																					"src": "883:18:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1011,
																					"name": "claimingRoundDuration",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 990,
																					"src": "904:21:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "883:42:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "864:61:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "807:118:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1015,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "806:120:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "792:134:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4974206973206e6f20706572696f6420746f20636c61696d21",
															"id": 1017,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "940:27:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef35312ab5edf5b6a3e679741e49a97912d1142319a2ff11ab578776f752b342",
																"typeString": "literal_string \"It is no period to claim!\""
															},
															"value": "It is no period to claim!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef35312ab5edf5b6a3e679741e49a97912d1142319a2ff11ab578776f752b342",
																"typeString": "literal_string \"It is no period to claim!\""
															}
														],
														"id": 1002,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "771:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "771:206:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1019,
												"nodeType": "ExpressionStatement",
												"src": "771:206:6"
											},
											{
												"id": 1020,
												"nodeType": "PlaceholderStatement",
												"src": "987:1:6"
											}
										]
									},
									"id": 1022,
									"name": "onlyClaimingRound",
									"nameLocation": "741:17:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "758:2:6"
									},
									"src": "732:263:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1054,
										"nodeType": "Block",
										"src": "1068:170:6",
										"statements": [
											{
												"expression": {
													"id": 1035,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1033,
														"name": "treasury",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 984,
														"src": "1078:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1034,
														"name": "_treasury",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1026,
														"src": "1089:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1078:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1036,
												"nodeType": "ExpressionStatement",
												"src": "1078:20:6"
											},
											{
												"expression": {
													"id": 1041,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1037,
														"name": "claimingRoundDuration",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 990,
														"src": "1108:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_rational_604800_by_1",
															"typeString": "int_const 604800"
														},
														"id": 1040,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "3836343030",
															"id": 1038,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1132:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_86400_by_1",
																"typeString": "int_const 86400"
															},
															"value": "86400"
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"hexValue": "37",
															"id": 1039,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1140:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_7_by_1",
																"typeString": "int_const 7"
															},
															"value": "7"
														},
														"src": "1132:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_604800_by_1",
															"typeString": "int_const 604800"
														}
													},
													"src": "1108:33:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1042,
												"nodeType": "ExpressionStatement",
												"src": "1108:33:6"
											},
											{
												"expression": {
													"id": 1045,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1043,
														"name": "isClaiming",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 986,
														"src": "1161:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1044,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1174:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1161:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1046,
												"nodeType": "ExpressionStatement",
												"src": "1161:18:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1048,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1024,
															"src": "1207:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1047,
														"name": "transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 126,
														"src": "1189:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1049,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1189:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1050,
												"nodeType": "ExpressionStatement",
												"src": "1189:25:6"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1051,
														"name": "pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1296,
														"src": "1224:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1052,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1224:7:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1053,
												"nodeType": "ExpressionStatement",
												"src": "1224:7:6"
											}
										]
									},
									"id": 1055,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 1029,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1056:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1060:6:6",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "1056:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1031,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1028,
												"name": "Ownable",
												"nameLocations": [
													"1048:7:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "1048:7:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1048:19:6"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1024,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "1021:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "1013:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1023,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1013:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "_treasury",
												"nameLocation": "1037:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "1029:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1025,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1029:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1012:35:6"
									},
									"returnParameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1068:0:6"
									},
									"scope": 1329,
									"src": "1001:237:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1066,
										"nodeType": "Block",
										"src": "1307:41:6",
										"statements": [
											{
												"expression": {
													"id": 1064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1062,
														"name": "merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 980,
														"src": "1317:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1063,
														"name": "_merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1057,
														"src": "1330:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1317:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1065,
												"nodeType": "ExpressionStatement",
												"src": "1317:24:6"
											}
										]
									},
									"functionSelector": "7cb64759",
									"id": 1067,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1060,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1059,
												"name": "onlyOwner",
												"nameLocations": [
													"1297:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "1297:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1297:9:6"
										}
									],
									"name": "setMerkleRoot",
									"nameLocation": "1253:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "_merkleRoot",
												"nameLocation": "1275:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "1267:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1056,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1267:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:21:6"
									},
									"returnParameters": {
										"id": 1061,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1307:0:6"
									},
									"scope": 1329,
									"src": "1244:104:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1088,
										"nodeType": "Block",
										"src": "1407:97:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1080,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1075,
																"name": "_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1069,
																"src": "1425:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1078,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1443:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1077,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1435:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1076,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1435:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1079,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1435:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1425:20:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f6b656e2073686f756c646e2774206265207a65726f",
															"id": 1081,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:25:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_61a85e5c7ff10d61e0d485a3a109c122858fc92abbf7d6216873950f0d5aedcd",
																"typeString": "literal_string \"Token shouldn't be zero\""
															},
															"value": "Token shouldn't be zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_61a85e5c7ff10d61e0d485a3a109c122858fc92abbf7d6216873950f0d5aedcd",
																"typeString": "literal_string \"Token shouldn't be zero\""
															}
														],
														"id": 1074,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1417:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1082,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1417:56:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1083,
												"nodeType": "ExpressionStatement",
												"src": "1417:56:6"
											},
											{
												"expression": {
													"id": 1086,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1084,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 982,
														"src": "1483:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1085,
														"name": "_token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1069,
														"src": "1491:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1483:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1087,
												"nodeType": "ExpressionStatement",
												"src": "1483:14:6"
											}
										]
									},
									"functionSelector": "144fa6d7",
									"id": 1089,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1072,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1071,
												"name": "onlyOwner",
												"nameLocations": [
													"1397:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "1397:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1397:9:6"
										}
									],
									"name": "setToken",
									"nameLocation": "1363:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "1380:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1089,
												"src": "1372:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1068,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1372:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1371:16:6"
									},
									"returnParameters": {
										"id": 1073,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1407:0:6"
									},
									"scope": 1329,
									"src": "1354:150:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1103,
										"nodeType": "Block",
										"src": "1562:80:6",
										"statements": [
											{
												"expression": {
													"id": 1096,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1094,
														"name": "isClaiming",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 986,
														"src": "1572:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1095,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1585:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1572:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1097,
												"nodeType": "ExpressionStatement",
												"src": "1572:17:6"
											},
											{
												"expression": {
													"id": 1101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1098,
														"name": "startClaimingRound",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 988,
														"src": "1599:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1099,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "1620:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1100,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1626:9:6",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "1620:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1599:36:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1102,
												"nodeType": "ExpressionStatement",
												"src": "1599:36:6"
											}
										]
									},
									"functionSelector": "b6cd5d1a",
									"id": 1104,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1092,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1091,
												"name": "onlyOwner",
												"nameLocations": [
													"1552:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "1552:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1552:9:6"
										}
									],
									"name": "setStartClaimingRound",
									"nameLocation": "1519:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1090,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1540:2:6"
									},
									"returnParameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1562:0:6"
									},
									"scope": 1329,
									"src": "1510:132:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1117,
										"nodeType": "Block",
										"src": "1695:67:6",
										"statements": [
											{
												"expression": {
													"id": 1111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1109,
														"name": "isClaiming",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 986,
														"src": "1705:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1718:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1705:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1112,
												"nodeType": "ExpressionStatement",
												"src": "1705:18:6"
											},
											{
												"expression": {
													"id": 1115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1113,
														"name": "startClaimingRound",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 988,
														"src": "1733:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1114,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1754:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1733:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1116,
												"nodeType": "ExpressionStatement",
												"src": "1733:22:6"
											}
										]
									},
									"functionSelector": "5e4f3a9c",
									"id": 1118,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1107,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1106,
												"name": "onlyOwner",
												"nameLocations": [
													"1685:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "1685:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1685:9:6"
										}
									],
									"name": "endClaimingRound",
									"nameLocation": "1657:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1673:2:6"
									},
									"returnParameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1695:0:6"
									},
									"scope": 1329,
									"src": "1648:114:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1129,
										"nodeType": "Block",
										"src": "1840:50:6",
										"statements": [
											{
												"expression": {
													"id": 1127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1125,
														"name": "claimingRoundDuration",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 990,
														"src": "1850:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1126,
														"name": "_duration",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1120,
														"src": "1874:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1850:33:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1128,
												"nodeType": "ExpressionStatement",
												"src": "1850:33:6"
											}
										]
									},
									"functionSelector": "6038efad",
									"id": 1130,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1123,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1122,
												"name": "onlyOwner",
												"nameLocations": [
													"1830:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "1830:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1830:9:6"
										}
									],
									"name": "setClaimingRoundDuration",
									"nameLocation": "1777:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1120,
												"mutability": "mutable",
												"name": "_duration",
												"nameLocation": "1810:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1130,
												"src": "1802:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1119,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1802:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1801:19:6"
									},
									"returnParameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1840:0:6"
									},
									"scope": 1329,
									"src": "1768:122:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1159,
										"nodeType": "Block",
										"src": "2040:142:6",
										"statements": [
											{
												"assignments": [
													1143
												],
												"declarations": [
													{
														"constant": false,
														"id": 1143,
														"mutability": "mutable",
														"name": "node",
														"nameLocation": "2058:4:6",
														"nodeType": "VariableDeclaration",
														"scope": 1159,
														"src": "2050:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1142,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2050:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1151,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1147,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1132,
																	"src": "2092:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1148,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1134,
																	"src": "2099:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1145,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2075:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1146,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2079:12:6",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2075:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2075:32:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1144,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2065:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2065:43:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2050:58:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1154,
															"name": "_merkleProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1137,
															"src": "2144:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															}
														},
														{
															"id": 1155,
															"name": "merkleRoot",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 980,
															"src": "2158:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1156,
															"name": "node",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1143,
															"src": "2170:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1152,
															"name": "MerkleProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 965,
															"src": "2125:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_MerkleProof_$965_$",
																"typeString": "type(library MerkleProof)"
															}
														},
														"id": 1153,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2137:6:6",
														"memberName": "verify",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 455,
														"src": "2125:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
														}
													},
													"id": 1157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2125:50:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1141,
												"id": 1158,
												"nodeType": "Return",
												"src": "2118:57:6"
											}
										]
									},
									"functionSelector": "a0074c67",
									"id": 1160,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyUser",
									"nameLocation": "1905:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "1933:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1160,
												"src": "1925:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1925:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "1956:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1160,
												"src": "1948:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1948:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "_merkleProof",
												"nameLocation": "1992:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1160,
												"src": "1973:31:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1135,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1973:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1136,
													"nodeType": "ArrayTypeName",
													"src": "1973:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1915:95:6"
									},
									"returnParameters": {
										"id": 1141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1160,
												"src": "2034:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1139,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2034:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2033:6:6"
									},
									"scope": 1329,
									"src": "1896:286:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1256,
										"nodeType": "Block",
										"src": "2329:754:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "2356:20:6",
															"subExpression": {
																"baseExpression": {
																	"id": 1175,
																	"name": "claimed",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 994,
																	"src": "2357:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 1178,
																"indexExpression": {
																	"expression": {
																		"id": 1176,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "2365:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1177,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2369:6:6",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "2365:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2357:19:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416c726561647920636c61696d6564",
															"id": 1180,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2378:17:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8d5f1075ee9cf123a11fed45e62459547c318d7703b4e3920694b01d6b8c6dcf",
																"typeString": "literal_string \"Already claimed\""
															},
															"value": "Already claimed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8d5f1075ee9cf123a11fed45e62459547c318d7703b4e3920694b01d6b8c6dcf",
																"typeString": "literal_string \"Already claimed\""
															}
														],
														"id": 1174,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2348:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2348:48:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1182,
												"nodeType": "ExpressionStatement",
												"src": "2348:48:6"
											},
											{
												"assignments": [
													1184
												],
												"declarations": [
													{
														"constant": false,
														"id": 1184,
														"mutability": "mutable",
														"name": "node",
														"nameLocation": "2450:4:6",
														"nodeType": "VariableDeclaration",
														"scope": 1256,
														"src": "2442:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1183,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2442:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1193,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1188,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "2484:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2488:6:6",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "2484:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1190,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1162,
																	"src": "2496:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1186,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2467:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1187,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2471:12:6",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2467:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1191,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2467:37:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1185,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2457:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2457:48:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2442:63:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1197,
																	"name": "_merkleProof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1165,
																	"src": "2555:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																		"typeString": "bytes32[] calldata"
																	}
																},
																{
																	"id": 1198,
																	"name": "merkleRoot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 980,
																	"src": "2569:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1199,
																	"name": "node",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1184,
																	"src": "2581:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																		"typeString": "bytes32[] calldata"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1195,
																	"name": "MerkleProof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 965,
																	"src": "2536:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_MerkleProof_$965_$",
																		"typeString": "type(library MerkleProof)"
																	}
																},
																"id": 1196,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2548:6:6",
																"memberName": "verify",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 455,
																"src": "2536:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
																	"typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
																}
															},
															"id": 1200,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2536:50:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642070726f6f66",
															"id": 1201,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2600:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639",
																"typeString": "literal_string \"Invalid proof\""
															},
															"value": "Invalid proof"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_dbb8b2d35c676776519896c045ce9c5b267915e4127b1aa1fa65a56a3d2b2639",
																"typeString": "literal_string \"Invalid proof\""
															}
														],
														"id": 1194,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2515:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2515:110:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1203,
												"nodeType": "ExpressionStatement",
												"src": "2515:110:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1210,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1205,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 982,
																"src": "2644:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1208,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2661:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1207,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2653:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1206,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2653:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1209,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2653:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2644:19:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f6b656e20616464726573732073686f756c646e2774206265207a65726f21",
															"id": 1211,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2665:34:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_23bc11b9652f987eff8045f5fbefd0a7a6e0feeed7ac640e905989decdc052c6",
																"typeString": "literal_string \"Token address shouldn't be zero!\""
															},
															"value": "Token address shouldn't be zero!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_23bc11b9652f987eff8045f5fbefd0a7a6e0feeed7ac640e905989decdc052c6",
																"typeString": "literal_string \"Token address shouldn't be zero!\""
															}
														],
														"id": 1204,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2636:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2636:64:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1213,
												"nodeType": "ExpressionStatement",
												"src": "2636:64:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1221,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "2788:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_MerkleDistributor_$1329",
																					"typeString": "contract MerkleDistributor"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_MerkleDistributor_$1329",
																					"typeString": "contract MerkleDistributor"
																				}
																			],
																			"id": 1220,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2780:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1219,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2780:7:6",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1222,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2780:13:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1216,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 982,
																				"src": "2763:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1215,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 398,
																			"src": "2756:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$398_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1217,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2756:13:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$398",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1218,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2770:9:6",
																	"memberName": "balanceOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 355,
																	"src": "2756:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view external returns (uint256)"
																	}
																},
																"id": 1223,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2756:38:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1224,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1162,
																"src": "2797:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2756:48:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e742042616c616e636521",
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2818:23:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f6657e4d1cfe337fdb58cc2af2fa00dc813b20940f609425939a74aa165269ab",
																"typeString": "literal_string \"Insufficient Balance!\""
															},
															"value": "Insufficient Balance!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f6657e4d1cfe337fdb58cc2af2fa00dc813b20940f609425939a74aa165269ab",
																"typeString": "literal_string \"Insufficient Balance!\""
															}
														],
														"id": 1214,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2735:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2735:116:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1228,
												"nodeType": "ExpressionStatement",
												"src": "2735:116:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1229,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1162,
														"src": "2865:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1230,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2875:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2865:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1242,
												"nodeType": "IfStatement",
												"src": "2861:85:6",
												"trueBody": {
													"id": 1241,
													"nodeType": "Block",
													"src": "2878:68:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1236,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2915:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1237,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2919:6:6",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2915:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1238,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1162,
																		"src": "2927:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1233,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 982,
																				"src": "2899:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1232,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 398,
																			"src": "2892:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$398_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1234,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2892:13:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$398",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1235,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2906:8:6",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 365,
																	"src": "2892:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1239,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2892:43:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1240,
															"nodeType": "ExpressionStatement",
															"src": "2892:43:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1243,
															"name": "claimed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 994,
															"src": "3006:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1246,
														"indexExpression": {
															"expression": {
																"id": 1244,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3014:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1245,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3018:6:6",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3014:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3006:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1247,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3028:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3006:26:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1249,
												"nodeType": "ExpressionStatement",
												"src": "3006:26:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1251,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3056:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3060:6:6",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3056:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1253,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1162,
															"src": "3068:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1250,
														"name": "Claimed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1000,
														"src": "3048:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3048:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1255,
												"nodeType": "EmitStatement",
												"src": "3043:33:6"
											}
										]
									},
									"functionSelector": "2f52ebb7",
									"id": 1257,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1168,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1167,
												"name": "whenNotPaused",
												"nameLocations": [
													"2284:13:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 182,
												"src": "2284:13:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "2284:13:6"
										},
										{
											"id": 1170,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1169,
												"name": "nonReentrant",
												"nameLocations": [
													"2298:12:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 285,
												"src": "2298:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "2298:12:6"
										},
										{
											"id": 1172,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1171,
												"name": "onlyClaimingRound",
												"nameLocations": [
													"2311:17:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1022,
												"src": "2311:17:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "2311:17:6"
										}
									],
									"name": "claim",
									"nameLocation": "2197:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1162,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "2220:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "2212:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1161,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2212:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1165,
												"mutability": "mutable",
												"name": "_merkleProof",
												"nameLocation": "2256:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "2237:31:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1163,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2237:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1164,
													"nodeType": "ArrayTypeName",
													"src": "2237:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2202:72:6"
									},
									"returnParameters": {
										"id": 1173,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2329:0:6"
									},
									"scope": 1329,
									"src": "2188:895:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1286,
										"nodeType": "Block",
										"src": "3144:161:6",
										"statements": [
											{
												"assignments": [
													1264
												],
												"declarations": [
													{
														"constant": false,
														"id": 1264,
														"mutability": "mutable",
														"name": "tokenERC20",
														"nameLocation": "3161:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1286,
														"src": "3154:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$398",
															"typeString": "contract IERC20"
														},
														"typeName": {
															"id": 1263,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1262,
																"name": "IERC20",
																"nameLocations": [
																	"3154:6:6"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 398,
																"src": "3154:6:6"
															},
															"referencedDeclaration": 398,
															"src": "3154:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$398",
																"typeString": "contract IERC20"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1268,
												"initialValue": {
													"arguments": [
														{
															"id": 1266,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 982,
															"src": "3181:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1265,
														"name": "IERC20",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 398,
														"src": "3174:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IERC20_$398_$",
															"typeString": "type(contract IERC20)"
														}
													},
													"id": 1267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3174:13:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$398",
														"typeString": "contract IERC20"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3154:33:6"
											},
											{
												"assignments": [
													1270
												],
												"declarations": [
													{
														"constant": false,
														"id": 1270,
														"mutability": "mutable",
														"name": "balance",
														"nameLocation": "3205:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1286,
														"src": "3197:15:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1269,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3197:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1278,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1275,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3244:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_MerkleDistributor_$1329",
																		"typeString": "contract MerkleDistributor"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_MerkleDistributor_$1329",
																		"typeString": "contract MerkleDistributor"
																	}
																],
																"id": 1274,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3236:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1273,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3236:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1276,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3236:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1271,
															"name": "tokenERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1264,
															"src": "3215:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$398",
																"typeString": "contract IERC20"
															}
														},
														"id": 1272,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3226:9:6",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 355,
														"src": "3215:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1277,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3215:35:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3197:53:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1282,
															"name": "treasury",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 984,
															"src": "3280:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1283,
															"name": "balance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1270,
															"src": "3290:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1279,
															"name": "tokenERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1264,
															"src": "3260:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$398",
																"typeString": "contract IERC20"
															}
														},
														"id": 1281,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3271:8:6",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 365,
														"src": "3260:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 1284,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3260:38:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1285,
												"nodeType": "ExpressionStatement",
												"src": "3260:38:6"
											}
										]
									},
									"functionSelector": "de805da7",
									"id": 1287,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1260,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1259,
												"name": "onlyOwner",
												"nameLocations": [
													"3134:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "3134:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "3134:9:6"
										}
									],
									"name": "unClaimedTokenToTreasury",
									"nameLocation": "3098:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1258,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3122:2:6"
									},
									"returnParameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3144:0:6"
									},
									"scope": 1329,
									"src": "3089:216:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1295,
										"nodeType": "Block",
										"src": "3345:25:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1292,
														"name": "_pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 238,
														"src": "3355:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3355:8:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1294,
												"nodeType": "ExpressionStatement",
												"src": "3355:8:6"
											}
										]
									},
									"functionSelector": "8456cb59",
									"id": 1296,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1290,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1289,
												"name": "onlyOwner",
												"nameLocations": [
													"3335:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "3335:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "3335:9:6"
										}
									],
									"name": "pause",
									"nameLocation": "3320:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3325:2:6"
									},
									"returnParameters": {
										"id": 1291,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3345:0:6"
									},
									"scope": 1329,
									"src": "3311:59:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1304,
										"nodeType": "Block",
										"src": "3412:27:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1301,
														"name": "_unpause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 254,
														"src": "3422:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3422:10:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1303,
												"nodeType": "ExpressionStatement",
												"src": "3422:10:6"
											}
										]
									},
									"functionSelector": "3f4ba83a",
									"id": 1305,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1299,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1298,
												"name": "onlyOwner",
												"nameLocations": [
													"3402:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "3402:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "3402:9:6"
										}
									],
									"name": "unpause",
									"nameLocation": "3385:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1297,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3392:2:6"
									},
									"returnParameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3412:0:6"
									},
									"scope": 1329,
									"src": "3376:63:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1327,
										"nodeType": "Block",
										"src": "3504:170:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1319,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1310,
															"name": "isClaiming",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 986,
															"src": "3533:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1317,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1313,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1311,
																					"name": "startClaimingRound",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 988,
																					"src": "3549:18:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1312,
																					"name": "claimingRoundDuration",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 990,
																					"src": "3570:21:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "3549:42:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1314,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "3548:44:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"expression": {
																			"id": 1315,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "3596:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 1316,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "3602:9:6",
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "3596:15:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3548:63:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 1318,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3547:65:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "3533:79:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1323,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1320,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "3629:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3635:9:6",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "3629:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1322,
																	"name": "startClaimingRound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 988,
																	"src": "3648:18:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3629:37:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 1324,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3628:39:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3533:134:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1309,
												"id": 1326,
												"nodeType": "Return",
												"src": "3514:153:6"
											}
										]
									},
									"functionSelector": "c27f7e26",
									"id": 1328,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkClaimingRound",
									"nameLocation": "3454:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3472:2:6"
									},
									"returnParameters": {
										"id": 1309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "3498:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1307,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3498:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3497:6:6"
									},
									"scope": 1329,
									"src": "3445:229:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1330,
							"src": "356:3320:6",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24,
								158,
								163,
								1000
							]
						}
					],
					"src": "32:3645:6"
				},
				"id": 6
			}
		}
	}
}